(window.webpackJsonp=window.webpackJsonp||[]).push([[828],{1016:function(e,t,a){"use strict";a.r(t);var s=a(0),i=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Computes the gradient error. (deprecated)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.compat.v1.test.compute_gradient_error(\n    x,\n    x_shape,\n    y,\n    y_shape,\n    x_init_value=None,\n    delta=0.001,\n    init_targets=None,\n    extra_feed_dict=None\n)\n")])])]),a("p",[e._v("Computes the maximum error for dy/dx between the computed Jacobian and the numerically estimated Jacobian.")]),e._v(" "),a("p",[e._v("This function will modify the tensors passed in as it adds more operations and hence changing the consumers of the operations of the input tensors.")]),e._v(" "),a("p",[e._v("This function adds operations to the current session. To compute the error using a particular device, such as a GPU, use the standard methods for setting a device (e.g. using with sess.graph.device() or setting a device function in the session constructor).")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("x")]),e._v(": a tensor or list of tensors")]),e._v(" "),a("li",[a("code",[e._v("x")]),e._v("_shape: the dimensions of "),a("code",[e._v("x")]),e._v(" as a tuple or an array of ints. If "),a("code",[e._v("x")]),e._v(" is a list, then this is the list of shapes.")]),e._v(" "),a("li",[a("code",[e._v("y")]),e._v(": a tensor")]),e._v(" "),a("li",[a("code",[e._v("y")]),e._v("_shape: the dimensions of "),a("code",[e._v("y")]),e._v(" as a tuple or an arra"),a("code",[e._v("y")]),e._v(" of ints.")]),e._v(" "),a("li",[a("code",[e._v("x")]),e._v("_init_value: (optional) a nump"),a("code",[e._v("y")]),e._v(" arra"),a("code",[e._v("y")]),e._v(' of the same shape as "'),a("code",[e._v("x")]),e._v('" representing the initial value of '),a("code",[e._v("x")]),e._v(". If "),a("code",[e._v("x")]),e._v(" is a list, this should be a list of nump"),a("code",[e._v("y")]),e._v(" arra"),a("code",[e._v("y")]),e._v("s. If this is none, the function will pick a random tensor as the initial value.")]),e._v(" "),a("li",[a("code",[e._v("delta")]),e._v(": (optional) the amount of perturbation.")]),e._v(" "),a("li",[a("code",[e._v("init_targets")]),e._v(": list of targets to run to initialize model params.")]),e._v(" "),a("li",[a("code",[e._v("extra_feed_dict")]),e._v(": dict that allows fi"),a("code",[e._v("x")]),e._v("ing specified tensor values during the Jacobian calculation.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The maximum error in between the two Jacobians.")])])}),[],!1,null,null,null);t.default=i.exports}}]);