(window.webpackJsonp=window.webpackJsonp||[]).push([[2344],{2532:function(e,s,t){"use strict";t.r(s);var a=t(0),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Converts a dense tensor into a sparse tensor.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.sparse.from_dense")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.sparse.from_dense")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.sparse.from_dense(\n    tensor,\n    name=None\n)\n")])])]),t("p",[e._v("Only elements not equal to zero will be present in the result. The resulting SparseTensor has the same dtype and shape as the input.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tensor")]),e._v(": A dense "),t("code",[e._v("Tensor")]),e._v(" to be converted to a "),t("code",[e._v("SparseTensor")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": Optional "),t("code",[e._v("name")]),e._v(" for the op.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("The SparseTensor.")])])}),[],!1,null,null,null);s.default=r.exports}}]);