(window.webpackJsonp=window.webpackJsonp||[]).push([[2511],{2702:function(e,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Return "),a("code",[e._v("true_fn")]),e._v("() if the "),a("code",[e._v("pred")]),e._v("icate "),a("code",[e._v("pred")]),e._v(" is true else ``().")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v2.cond")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.cond(\n    pred,\n    true_fn=None,\n    false_fn=None,\n    name=None\n)\n")])])]),a("p",[a("code",[e._v("true_fn")]),e._v(" and "),a("code",[e._v("false_fn")]),e._v(" both return lists of output tensors. "),a("code",[e._v("true_fn")]),e._v(" and "),a("code",[e._v("false_fn")]),e._v(" must have the same non-zero number and type of outputs.\nWARNING: Any Tensors or Operations created outside of "),a("code",[e._v("true_fn")]),e._v(" and "),a("code",[e._v("false_fn")]),e._v(" will be executed regardless of which branch is selected at runtime.\nAlthough this behavior is consistent with the dataflow model of TensorFlow, it has frequently surprised users who expected a lazier semantics. Consider the following simple program:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" z = tf.multiply(a, b)\nresult = tf.cond(x < y, lambda: tf.add(x, z), lambda: tf.square(y))\n")])])]),a("p",[a("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/math/multiply",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.multiply"),a("OutboundLink")],1),e._v("If x < y, the tf.add operation will be executed and tf.square operation will not be executed. Since z is needed for at least one branch of the cond, the  operation is always executed, unconditionally.")]),e._v(" "),a("p",[e._v("Note that "),a("code",[e._v("cond")]),e._v(" calls "),a("code",[e._v("true_fn")]),e._v(" and "),a("code",[e._v("false_fn")]),e._v(" exactly once (inside the call to "),a("code",[e._v("cond")]),e._v(", and not at all during "),a("code",[e._v("Session.run")]),e._v("()). "),a("code",[e._v("cond")]),e._v(" stitches together the graph fragments created during the "),a("code",[e._v("true_fn")]),e._v(" and "),a("code",[e._v("false_fn")]),e._v(" calls with some additional graph nodes to ensure that the right branch gets executed depending on the value of ``.\n"),a("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/cond",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.cond"),a("OutboundLink")],1),e._v(" supports nested structures as implemented in tensorflow.python.util.nest. Both true_fn and false_fn must return the same (possibly nested) value structure of lists, tuples, and/or named tuples. Singleton lists and tuples form the only exceptions to this: when returned by true_fn and/or false_fn, they are implicitly unpacked to single values.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("pred")]),e._v(": A scalar determining whether to return the result of "),a("code",[e._v("true_fn")]),e._v(" or "),a("code",[e._v("false_fn")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("true_fn")]),e._v(": The callable to be performed if "),a("code",[e._v("pred")]),e._v(" is true.")]),e._v(" "),a("li",[a("code",[e._v("false_fn")]),e._v(": The callable to be performed if "),a("code",[e._v("pred")]),e._v(" is false.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": Optional "),a("code",[e._v("name")]),e._v(" prefix for the returned tensors.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Tensors returned by the call to either "),a("code",[e._v("true_fn")]),e._v(" or "),a("code",[e._v("false_fn")]),e._v(". If the callables return a singleton list, the element is extracted from the list.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TypeError")]),e._v(": if "),a("code",[e._v("true_fn")]),e._v(" or "),a("code",[e._v("false_fn")]),e._v(" is not callable.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": if "),a("code",[e._v("true_fn")]),e._v(" and "),a("code",[e._v("false_fn")]),e._v(" do not return the same number of tensors, or return tensors of different types.")])]),e._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" x = tf.constant(2)\ny = tf.constant(5)\ndef f1(): return tf.multiply(x, 17)\ndef f2(): return tf.add(y, 23)\nr = tf.cond(tf.less(x, y), f1, f2)\n# r is set to f1().\n# Operations in f2 (e.g., tf.add) are not executed.\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);