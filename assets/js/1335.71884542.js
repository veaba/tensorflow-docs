(window.webpackJsonp=window.webpackJsonp||[]).push([[1335],{1523:function(e,a,t){"use strict";t.r(a);var r=t(0),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Crop the central region of the image(s).")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.image.central_crop")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.image.central_crop")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.image.central_crop(\n    image,\n    central_fraction\n)\n")])])]),t("p",[e._v('Remove the outer parts of an image but retain the central region of the image along each dimension. If we specify central_fraction = 0.5, this function returns the region marked with "X" in the below diagram.')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  --------\n|        |\n|  XXXX  |\n|  XXXX  |\n|        |   where "X" is the central 50% of the image.\n --------\n')])])]),t("p",[e._v("This function works on either a single image (image is a 3-D Tensor), or a batch of images (image is a 4-D Tensor).")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("image")]),e._v(": Either a 3-D float Tensor of shape [height, width, depth], or a 4-D Tensor of shape [batch_size, height, width, depth].")]),e._v(" "),t("li",[t("code",[e._v("central_fraction")]),e._v(": float (0, 1], fraction of size to crop Usage Example: python >> import tensorflow as tf >> x = tf.random.normal(shape=(256, 256, 3)) >> tf."),t("code",[e._v("image")]),e._v(".central_crop(x, 0.5)")])]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": if central_crop_fraction is not within (0, 1].")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("3-D / 4-D float Tensor, as per the input.")])])}),[],!1,null,null,null);a.default=s.exports}}]);