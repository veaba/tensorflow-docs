(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{208:function(e,t,o){"use strict";o.r(t);var _=o(0),v=Object(_.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Similar to to_graph, but returns Python source code as a string.")]),e._v(" "),o("h3",{attrs:{id:"aliases"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("tf.compat.v2.autograph.to_code")])])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" tf.autograph.to_code(\n    entity,\n    recursive=True,\n    experimental_optional_features=None\n)\n")])])]),o("h3",{attrs:{id:"used-in-the-guide"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("B")]),e._v("e"),o("code",[e._v("t")]),e._v("t"),o("code",[e._v("e")]),e._v("r"),o("code"),e._v("p"),o("code",[e._v("e")]),e._v("r"),o("code",[e._v("f")]),e._v("o"),o("code",[e._v("r")]),e._v("m"),o("code",[e._v("a")]),e._v("n"),o("code",[e._v("c")]),e._v("e"),o("code"),e._v("w"),o("code",[e._v("i")]),e._v("t"),o("code",[e._v("h")]),e._v(" "),o("code",[e._v("t")]),e._v("f"),o("code",[e._v(".")]),e._v("f"),o("code",[e._v("u")]),e._v("n"),o("code",[e._v("c")]),e._v("t"),o("code",[e._v("i")]),e._v("o"),o("code",[e._v("n")]),e._v(" "),o("code",[e._v("a")]),e._v("n"),o("code",[e._v("d")]),e._v(" "),o("code",[e._v("A")]),e._v("u"),o("code",[e._v("t")]),e._v("o"),o("code",[e._v("G")]),e._v("r"),o("code",[e._v("a")]),e._v("p"),o("code",[e._v("h")])])]),e._v(" "),o("h3",{attrs:{id:"used-in-the-tutorials"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("B")]),e._v("e"),o("code",[e._v("t")]),e._v("t"),o("code",[e._v("e")]),e._v("r"),o("code"),e._v("p"),o("code",[e._v("e")]),e._v("r"),o("code",[e._v("f")]),e._v("o"),o("code",[e._v("r")]),e._v("m"),o("code",[e._v("a")]),e._v("n"),o("code",[e._v("c")]),e._v("e"),o("code"),e._v("w"),o("code",[e._v("i")]),e._v("t"),o("code",[e._v("h")]),e._v(" "),o("code",[e._v("t")]),e._v("f"),o("code",[e._v(".")]),e._v("f"),o("code",[e._v("u")]),e._v("n"),o("code",[e._v("c")]),e._v("t"),o("code",[e._v("i")]),e._v("o"),o("code",[e._v("n")]),e._v(" "),o("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/autograph/to_graph",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.autograph.to_graph"),o("OutboundLink")],1),e._v("Also see: .")])]),e._v(" "),o("p",[e._v("to_graph returns the Python source code that can be used to generate a TensorFlow graph that is functionally identical to the input Python code.")]),e._v(" "),o("h4",{attrs:{id:"args"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("entity")]),e._v(": Python callable or class to convert.")]),e._v(" "),o("li",[o("code",[e._v("recursive")]),e._v(": Whether to "),o("code",[e._v("recursive")]),e._v("ly convert any functions that the converted function may call.")]),e._v(" "),o("li",[o("code",[e._v("experimental_optional_features")]),e._v(": "),o("code",[e._v("None")]),e._v(", a tuple of, or a single "),o("code",[e._v("tf.autograph.experimental.Feature")]),e._v(" value. Controls the use of optional features in the conversion process.")])]),e._v(" "),o("h4",{attrs:{id:"returns"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),o("p",[e._v("The converted code as string.")])])}),[],!1,null,null,null);t.default=v.exports}}]);