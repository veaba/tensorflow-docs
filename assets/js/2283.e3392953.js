(window.webpackJsonp=window.webpackJsonp||[]).push([[2283],{2471:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"class-generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-generator","aria-hidden":"true"}},[e._v("#")]),e._v(" Class Generator")]),e._v(" "),a("p",[e._v("Random-number generator.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[e._v("Class "),a("code",[e._v("tf.compat.v1.random.experimental.Generator")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.compat.v2.random.experimental.Generator")])])]),e._v(" "),a("p",[e._v("It uses Variable to manage its internal state, and allows choosing an Random-Number-Generation (RNG) algorithm.")]),e._v(" "),a("p",[e._v("CPU, GPU and TPU with the same algorithm and seed will generate the same integer random numbers. Float-point results (such as the output of normal) may have small numerical discrepancies between CPU and GPU.")]),e._v(" "),a("h2",{attrs:{id:"init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("init")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L182-L214",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __init__(\n    copy_from=None,\n    state=None,\n    alg=None\n)\n")])])]),a("p",[e._v("Creates a generator.")]),e._v(" "),a("p",[e._v("The new generator will be initialized by one of the following ways, with decreasing precedence: (1) If copy_from is not None, the new generator is initialized by copying information from another generator. (3) If state and alg are not None (they must be set together), the new generator is initialized by a state.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("copy_from")]),e._v(": a generator to be copied from.")]),e._v(" "),a("li",[a("code",[e._v("state")]),e._v(": a vector of dtype STATE_TYPE representing the initial "),a("code",[e._v("state")]),e._v(" of the RNG, whose length and semantics are algorithm-specific.")]),e._v(" "),a("li",[a("code",[e._v("alg")]),e._v(": the RNG "),a("code",[e._v("alg")]),e._v("orithm. Possible values are RNG_ALG_PHILOX for the Philox "),a("code",[e._v("alg")]),e._v("orithm and RNG_ALG_THREEFRY for the ThreeFry "),a("code",[e._v("alg")]),e._v("orithm (see paper 'Parallel Random Numbers: As Easy as 1, 2, 3' [https://www.thesalmons.org/john/random123/papers/random123sc11.pdf]).")])]),e._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),a("h3",{attrs:{id:"algorithm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#algorithm","aria-hidden":"true"}},[e._v("#")]),e._v(" algorithm")]),e._v(" "),a("p",[e._v("The RNG algorithm.")]),e._v(" "),a("h3",{attrs:{id:"key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key","aria-hidden":"true"}},[e._v("#")]),e._v(" key")]),e._v(" "),a("p",[e._v("The 'key' part of the state of a counter-based RNG.")]),e._v(" "),a("p",[e._v("For a counter-base RNG algorithm such as Philox and ThreeFry (as described in paper 'Parallel Random Numbers: As Easy as 1, 2, 3' [https://www.thesalmons.org/john/random123/papers/random123sc11.pdf]), the RNG state consists of two parts: counter and key. The output is generated via the formula: output=hash(key, counter), i.e. a hashing of the counter parametrized by the key. Two RNGs with two different keys can be thought as generating two independent random-number streams (a stream is formed by increasing the counter).")]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A scalar which is the 'key' part of the state, if the RNG algorithm is counter-based; otherwise it raises a ValueError.")]),e._v(" "),a("h3",{attrs:{id:"state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state","aria-hidden":"true"}},[e._v("#")]),e._v(" state")]),e._v(" "),a("p",[e._v("The internal state of the RNG.")]),e._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),a("h3",{attrs:{id:"binomial"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#binomial","aria-hidden":"true"}},[e._v("#")]),e._v(" binomial")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L533-L581",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" binomial(\n    shape,\n    counts,\n    probs,\n    dtype=tf.dtypes.int32,\n    name=None\n)\n")])])]),a("p",[e._v("Outputs random values from a binomial distribution.")]),e._v(" "),a("p",[e._v("The generated values follow a binomial distribution with specified count and probability of success parameters.")]),e._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" counts = [10., 20.]\n# Probability of success.\nprobs = [0.8, 0.9]\n\nrng = tf.random.experimental.Generator.from_seed(seed=234)\nbinomial_samples = rng.binomial(shape=[2], counts=counts, probs=probs)\n")])])]),a("h4",{attrs:{id:"args-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("shape")]),e._v(": A 1-D integer Tensor or Python array. The "),a("code",[e._v("shape")]),e._v(" of the output tensor.")]),e._v(" "),a("li",[a("code",[e._v("counts")]),e._v(": A 0/1-D Tensor or Python value. The "),a("code",[e._v("counts")]),e._v(" of the binomial distribution. Must be broadcastable with the leftmost dimension defined by "),a("code",[e._v("shape")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("probs")]),e._v(": A 0/1-D Tensor or Python value. The probability of success for the binomial distribution. Must be broadcastable with the leftmost dimension defined by "),a("code",[e._v("shape")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("dtype")]),e._v(": The type of the output. Default: tf.int32")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("samples")]),e._v(": A Tensor of the specified shape filled with random binomial values. For each i, each "),a("code",[e._v("samples")]),e._v("[i, ...] is an independent draw from the binomial distribution on counts[i] trials with probability of success probs[i].")])]),e._v(" "),a("h3",{attrs:{id:"from-key-counter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from-key-counter","aria-hidden":"true"}},[e._v("#")]),e._v(" from_key_counter")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L276-L299",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" @classmethod\nfrom_key_counter(\n    cls,\n    key,\n    counter,\n    alg\n)\n")])])]),a("p",[e._v("Creates a generator from a key and a counter.")]),e._v(" "),a("p",[e._v('This constructor only applies if the algorithm is a counter-based algorithm. See method key for the meaning of "key" and "counter".')]),e._v(" "),a("h4",{attrs:{id:"args-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("key")]),e._v(": the "),a("code",[e._v("key")]),e._v(" for the RNG, a scalar of type STATE_TYPE.")]),e._v(" "),a("li",[a("code",[e._v("counter")]),e._v(": a vector of dtype STATE_TYPE representing the initial "),a("code",[e._v("counter")]),e._v(" for the RNG, whose length is algorithm-specific.,")]),e._v(" "),a("li",[a("code",[e._v("alg")]),e._v(": the RNG "),a("code",[e._v("alg")]),e._v("orithm. If None, it will be auto-selected. See "),a("code",[e._v("__init__")]),e._v(" for its possible values.")])]),e._v(" "),a("h4",{attrs:{id:"returns-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The new generator.")]),e._v(" "),a("h3",{attrs:{id:"from-non-deterministic-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from-non-deterministic-state","aria-hidden":"true"}},[e._v("#")]),e._v(" from_non_deterministic_state")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L256-L274",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" @classmethod\nfrom_non_deterministic_state(\n    cls,\n    alg=None\n)\n")])])]),a("p",[e._v("Creates a generator by non-deterministically initializing its state.")]),e._v(" "),a("p",[e._v("The source of the non-determinism will be platform- and time-dependent.")]),e._v(" "),a("h4",{attrs:{id:"args-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("alg")]),e._v(": (optional) the RNG "),a("code",[e._v("alg")]),e._v("orithm. If None, it will be auto-selected. See "),a("code",[e._v("__init__")]),e._v(" for its possible values.")])]),e._v(" "),a("h4",{attrs:{id:"returns-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The new generator.")]),e._v(" "),a("h3",{attrs:{id:"from-seed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from-seed","aria-hidden":"true"}},[e._v("#")]),e._v(" from_seed")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L231-L254",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" @classmethod\nfrom_seed(\n    cls,\n    seed,\n    alg=None\n)\n")])])]),a("p",[e._v("Creates a generator from a seed.")]),e._v(" "),a("p",[e._v("A seed is a 1024-bit unsigned integer represented either as a Python integer or a vector of integers. Seeds shorter than 1024-bit will be padded. The padding, the internal structure of a seed and the way a seed is converted to a state are all opaque (unspecified). The only semantics specification of seeds is that two different seeds are likely to produce two independent generators (but no guarantee).")]),e._v(" "),a("h4",{attrs:{id:"args-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("seed")]),e._v(": the "),a("code",[e._v("seed")]),e._v(" for the RNG.")]),e._v(" "),a("li",[a("code",[e._v("alg")]),e._v(": (optional) the RNG "),a("code",[e._v("alg")]),e._v("orithm. If None, it will be auto-selected. See "),a("code",[e._v("__init__")]),e._v(" for its possible values.")])]),e._v(" "),a("h4",{attrs:{id:"returns-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The new generator.")]),e._v(" "),a("h3",{attrs:{id:"from-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from-state","aria-hidden":"true"}},[e._v("#")]),e._v(" from_state")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L216-L229",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" @classmethod\nfrom_state(\n    cls,\n    state,\n    alg\n)\n")])])]),a("p",[e._v("Creates a generator from a state.")]),e._v(" "),a("p",[e._v("See "),a("strong",[e._v("init")]),e._v(" for description of state and alg.")]),e._v(" "),a("h4",{attrs:{id:"args-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("state")]),e._v(": the new "),a("code",[e._v("state")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("alg")]),e._v(": the RNG "),a("code",[e._v("alg")]),e._v("orithm.")])]),e._v(" "),a("h4",{attrs:{id:"returns-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The new generator.")]),e._v(" "),a("h3",{attrs:{id:"make-seeds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make-seeds","aria-hidden":"true"}},[e._v("#")]),e._v(" make_seeds")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L592-L620",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" make_seeds(count=1)\n")])])]),a("p",[e._v("Generates seeds for stateless random ops.")]),e._v(" "),a("h4",{attrs:{id:"for-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" seeds = get_global_generator().make_seeds(count=10)\nfor i in range(10):\n  seed = seeds[:, i]\n  numbers = stateless_random_normal(shape=[2, 3], seed=seed)\n  ...\n")])])]),a("h4",{attrs:{id:"args-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("count")]),e._v(": the number of seed pairs (note that stateless random ops need a pair of seeds to invoke).")])]),e._v(" "),a("h4",{attrs:{id:"returns-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A tensor of shape [2, count] and dtype int64.")]),e._v(" "),a("h3",{attrs:{id:"normal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#normal","aria-hidden":"true"}},[e._v("#")]),e._v(" normal")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L392-L414",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" normal(\n    shape,\n    mean=0.0,\n    stddev=1.0,\n    dtype=tf.dtypes.float32,\n    name=None\n)\n")])])]),a("p",[e._v("Outputs random values from a normal distribution.")]),e._v(" "),a("h4",{attrs:{id:"args-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("shape")]),e._v(": A 1-D integer Tensor or Python array. The "),a("code",[e._v("shape")]),e._v(" of the output tensor.")]),e._v(" "),a("li",[a("code",[e._v("mean")]),e._v(": A 0-D Tensor or Python value of type "),a("code",[e._v("dtype")]),e._v(". The "),a("code",[e._v("mean")]),e._v(" of the normal distribution.")]),e._v(" "),a("li",[a("code",[e._v("stddev")]),e._v(": A 0-D Tensor or Python value of type "),a("code",[e._v("dtype")]),e._v(". The standard deviation of the normal distribution.")]),e._v(" "),a("li",[a("code",[e._v("dtype")]),e._v(": The type of the output.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A tensor of the specified shape filled with random normal values.")]),e._v(" "),a("h3",{attrs:{id:"reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset","aria-hidden":"true"}},[e._v("#")]),e._v(" reset")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L301-L311",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" reset(state)\n")])])]),a("p",[e._v("Resets the generator by a new state.")]),e._v(" "),a("p",[e._v("See "),a("strong",[e._v("init")]),e._v(' for the meaning of "state".')]),e._v(" "),a("h4",{attrs:{id:"args-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("state")]),e._v(": the new "),a("code",[e._v("state")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"reset-from-key-counter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-from-key-counter","aria-hidden":"true"}},[e._v("#")]),e._v(" reset_from_key_counter")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L324-L340",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" reset_from_key_counter(\n    key,\n    counter\n)\n")])])]),a("p",[e._v("Resets the generator by a new key-counter pair.")]),e._v(" "),a("p",[e._v('See from_key_counter for the meaning of "key" and "counter".')]),e._v(" "),a("h4",{attrs:{id:"args-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-10","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("key")]),e._v(": the new "),a("code",[e._v("key")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("counter")]),e._v(": the new "),a("code",[e._v("counter")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"reset-from-seed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-from-seed","aria-hidden":"true"}},[e._v("#")]),e._v(" reset_from_seed")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L313-L322",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" reset_from_seed(seed)\n")])])]),a("p",[e._v("Resets the generator by a new seed.")]),e._v(" "),a("p",[e._v('See from_seed for the meaning of "seed".')]),e._v(" "),a("h4",{attrs:{id:"args-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-11","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("seed")]),e._v(": the new "),a("code",[e._v("seed")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"skip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#skip","aria-hidden":"true"}},[e._v("#")]),e._v(" skip")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L379-L388",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" skip(delta)\n")])])]),a("p",[e._v("Advance the counter of a counter-based RNG.")]),e._v(" "),a("h4",{attrs:{id:"args-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-12","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("delta")]),e._v(": the amount of advancement. The state of the RNG after skip(n) will be the same as that after normal([n]) (or any other distribution). The actual increment added to the counter is an unspecified implementation detail.")])]),e._v(" "),a("h3",{attrs:{id:"split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#split","aria-hidden":"true"}},[e._v("#")]),e._v(" split")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L622-L670",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" split(count=1)\n")])])]),a("p",[e._v("Returns a list of independent Generator objects.")]),e._v(" "),a("p",[e._v("Two generators are independent of each other in the sense that the random-number streams they generate don't have statistically detectable correlations. The new generators are also independent of the old one. The old generator's state will be changed (like other random-number generating methods), so two calls of split will return different new generators.")]),e._v(" "),a("h4",{attrs:{id:"for-example-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-example-2","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" gens = get_global_generator().split(count=10)\nfor gen in gens:\n  numbers = gen.normal(shape=[2, 3])\n  # ...\ngens2 = get_global_generator().split(count=10)\n# gens2 will be different from gens\n")])])]),a("p",[e._v("The new generators will be put on the current device (possible different from the old generator's), for example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' with tf.device("/device:CPU:0"):\n  gen = Generator(seed=1234)  # gen is on CPU\nwith tf.device("/device:GPU:0"):\n  gens = gen.split(count=10)  # gens are on GPU\n')])])]),a("h4",{attrs:{id:"args-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-13","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("count")]),e._v(": the number of generators to return.")])]),e._v(" "),a("h4",{attrs:{id:"returns-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A list (length count) of Generator objects independent of each other. The new generators have the same RNG algorithm as the old one.")]),e._v(" "),a("h3",{attrs:{id:"truncated-normal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#truncated-normal","aria-hidden":"true"}},[e._v("#")]),e._v(" truncated_normal")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L420-L452",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" truncated_normal(\n    shape,\n    mean=0.0,\n    stddev=1.0,\n    dtype=tf.dtypes.float32,\n    name=None\n)\n")])])]),a("p",[e._v("Outputs random values from a truncated normal distribution.")]),e._v(" "),a("p",[e._v("The generated values follow a normal distribution with specified mean and standard deviation, except that values whose magnitude is more than 2 standard deviations from the mean are dropped and re-picked.")]),e._v(" "),a("h4",{attrs:{id:"args-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-14","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("shape")]),e._v(": A 1-D integer Tensor or Python array. The "),a("code",[e._v("shape")]),e._v(" of the output tensor.")]),e._v(" "),a("li",[a("code",[e._v("mean")]),e._v(": A 0-D Tensor or Python value of type "),a("code",[e._v("dtype")]),e._v(". The "),a("code",[e._v("mean")]),e._v(" of the truncated normal distribution.")]),e._v(" "),a("li",[a("code",[e._v("stddev")]),e._v(": A 0-D Tensor or Python value of type "),a("code",[e._v("dtype")]),e._v(". The standard deviation of the normal distribution, before truncation.")]),e._v(" "),a("li",[a("code",[e._v("dtype")]),e._v(": The type of the output.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-10","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A tensor of the specified shape filled with random truncated normal values.")]),e._v(" "),a("h3",{attrs:{id:"uniform"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uniform","aria-hidden":"true"}},[e._v("#")]),e._v(" uniform")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L458-L509",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" uniform(\n    shape,\n    minval=0,\n    maxval=None,\n    dtype=tf.dtypes.float32,\n    name=None\n)\n")])])]),a("p",[e._v("Outputs random values from a uniform distribution.")]),e._v(" "),a("p",[e._v("The generated values follow a uniform distribution in the range [minval, maxval). The lower bound minval is included in the range, while the upper bound maxval is excluded. (For float numbers especially low-precision types like bfloat16, because of rounding, the result may sometimes include maxval.)")]),e._v(" "),a("p",[e._v("For floats, the default range is [0, 1). For ints, at least maxval must be specified explicitly.")]),e._v(" "),a("p",[e._v("In the integer case, the random integers are slightly biased unless maxval - minval is an exact power of two. The bias is small for values of maxval - minval significantly smaller than the range of the output (either 2"),a("strong",[e._v("32 or 2")]),e._v("64).")]),e._v(" "),a("h4",{attrs:{id:"args-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-15","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("shape")]),e._v(": A 1-D integer Tensor or Python array. The "),a("code",[e._v("shape")]),e._v(" of the output tensor.")]),e._v(" "),a("li",[a("code",[e._v("minval")]),e._v(": A 0-D Tensor or Python value of type "),a("code",[e._v("dtype")]),e._v(". The lower bound on the range of random values to generate. Defaults to 0.")]),e._v(" "),a("li",[a("code",[e._v("maxval")]),e._v(": A 0-D Tensor or Python value of type "),a("code",[e._v("dtype")]),e._v(". The upper bound on the range of random values to generate. Defaults to 1 if "),a("code",[e._v("dtype")]),e._v(" is floating point.")]),e._v(" "),a("li",[a("code",[e._v("dtype")]),e._v(": The type of the output.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-11","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A tensor of the specified shape filled with random uniform values.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If "),a("code",[e._v("dtype")]),e._v(" is integral and "),a("code",[e._v("maxval")]),e._v(" is not specified.")])]),e._v(" "),a("h3",{attrs:{id:"uniform-full-int"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uniform-full-int","aria-hidden":"true"}},[e._v("#")]),e._v(" uniform_full_int")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/stateful_random_ops.py#L511-L531",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" uniform_full_int(\n    shape,\n    dtype=tf.dtypes.uint64,\n    name=None\n)\n")])])]),a("p",[e._v("Uniform distribution on an integer type's entire range.")]),e._v(" "),a("p",[e._v("The other method uniform only covers the range [minval, maxval), which cannot be dtype's full range because maxval is of type dtype.")]),e._v(" "),a("h4",{attrs:{id:"args-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-16","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("shape")]),e._v(": the "),a("code",[e._v("shape")]),e._v(" of the output.")]),e._v(" "),a("li",[a("code",[e._v("dtype")]),e._v(": (optional) the integer type, default to uint64.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": (optional) the "),a("code",[e._v("name")]),e._v(" of the node.")])]),e._v(" "),a("h4",{attrs:{id:"returns-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-12","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A tensor of random numbers of the required shape.")])])}),[],!1,null,null,null);t.default=s.exports}}]);