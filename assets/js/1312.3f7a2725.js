(window.webpackJsonp=window.webpackJsonp||[]).push([[1312],{1501:function(e,_,a){"use strict";a.r(_);var o=a(0),v=Object(o.a)({},(function(){var e=this,_=e.$createElement,a=e._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("A CategoricalColumn with in-memory vocabulary.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.feature_column.categorical_column_with_vocabulary_list")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.feature_column.categorical_column_with_vocabulary_list")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.feature_column.categorical_column_with_vocabulary_list(\n    key,\n    vocabulary_list,\n    dtype=None,\n    default_value=-1,\n    num_oov_buckets=0\n)\n")])])]),a("h3",{attrs:{id:"used-in-the-guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("t")]),e._v("f"),a("code",[e._v(".")]),e._v("d"),a("code",[e._v("a")]),e._v("t"),a("code",[e._v("a")]),e._v(":"),a("code"),e._v("B"),a("code",[e._v("u")]),e._v("i"),a("code",[e._v("l")]),e._v("d"),a("code"),e._v("T"),a("code",[e._v("e")]),e._v("n"),a("code",[e._v("s")]),e._v("o"),a("code",[e._v("r")]),e._v("F"),a("code",[e._v("l")]),e._v("o"),a("code",[e._v("w")]),e._v(" "),a("code",[e._v("i")]),e._v("n"),a("code",[e._v("p")]),e._v("u"),a("code",[e._v("t")]),e._v(" "),a("code",[e._v("p")]),e._v("i"),a("code",[e._v("p")]),e._v("e"),a("code",[e._v("l")]),e._v("i"),a("code",[e._v("n")]),e._v("e"),a("code",[e._v("s")])])]),e._v(" "),a("h3",{attrs:{id:"used-in-the-tutorials"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("B")]),e._v("o"),a("code",[e._v("o")]),e._v("s"),a("code",[e._v("t")]),e._v("e"),a("code",[e._v("d")]),e._v(" "),a("code",[e._v("t")]),e._v("r"),a("code",[e._v("e")]),e._v("e"),a("code",[e._v("s")]),e._v(" "),a("code",[e._v("u")]),e._v("s"),a("code",[e._v("i")]),e._v("n"),a("code",[e._v("g")]),e._v(" "),a("code",[e._v("E")]),e._v("s"),a("code",[e._v("t")]),e._v("i"),a("code",[e._v("m")]),e._v("a"),a("code",[e._v("t")]),e._v("o"),a("code",[e._v("r")]),e._v("s``")]),e._v(" "),a("li",[a("code",[e._v("B")]),e._v("u"),a("code",[e._v("i")]),e._v("l"),a("code",[e._v("d")]),e._v(" "),a("code",[e._v("a")]),e._v(" "),a("code",[e._v("l")]),e._v("i"),a("code",[e._v("n")]),e._v("e"),a("code",[e._v("a")]),e._v("r"),a("code"),e._v("m"),a("code",[e._v("o")]),e._v("d"),a("code",[e._v("e")]),e._v("l"),a("code"),e._v("w"),a("code",[e._v("i")]),e._v("t"),a("code",[e._v("h")]),e._v(" "),a("code",[e._v("E")]),e._v("s"),a("code",[e._v("t")]),e._v("i"),a("code",[e._v("m")]),e._v("a"),a("code",[e._v("t")]),e._v("o"),a("code",[e._v("r")]),e._v("s``")]),e._v(" "),a("li",[a("code",[e._v("C")]),e._v("l"),a("code",[e._v("a")]),e._v("s"),a("code",[e._v("s")]),e._v("i"),a("code",[e._v("f")]),e._v("y"),a("code"),e._v("s"),a("code",[e._v("t")]),e._v("r"),a("code",[e._v("u")]),e._v("c"),a("code",[e._v("t")]),e._v("u"),a("code",[e._v("r")]),e._v("e"),a("code",[e._v("d")]),e._v(" "),a("code",[e._v("d")]),e._v("a"),a("code",[e._v("t")]),e._v("a"),a("code"),e._v("w"),a("code",[e._v("i")]),e._v("t"),a("code",[e._v("h")]),e._v(" "),a("code",[e._v("f")]),e._v("e"),a("code",[e._v("a")]),e._v("t"),a("code",[e._v("u")]),e._v("r"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("c")]),e._v("o"),a("code",[e._v("l")]),e._v("u"),a("code",[e._v("m")]),e._v("n"),a("code",[e._v("s")])]),e._v(" "),a("li",[a("code",[e._v("L")]),e._v("o"),a("code",[e._v("a")]),e._v("d"),a("code"),e._v("C"),a("code",[e._v("S")]),e._v("V"),a("code"),e._v("d"),a("code",[e._v("a")]),e._v("t"),a("code",[e._v("a")])])]),e._v(" "),a("p",[e._v("Use this when your inputs are in string or integer format, and you have an in-memory vocabulary mapping each value to an integer ID. By default, out-of-vocabulary values are ignored. Use either (but not both) of num_oov_buckets and default_value to specify how to include out-of-vocabulary values.")]),e._v(" "),a("p",[e._v("For input dictionary features, features[key] is either Tensor or SparseTensor. If Tensor, missing values can be represented by -1 for int and '' for string, which will be dropped by this feature column.")]),e._v(" "),a("p",[e._v("Example with num_oov_buckets: In the following example, each input in vocabulary_list is assigned an ID 0-3 corresponding to its index (e.g., input 'B' produces output 2). All other inputs are hashed and assigned an ID 4-5.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" colors = categorical_column_with_vocabulary_list(\n    key='colors', vocabulary_list=('R', 'G', 'B', 'Y'),\n    num_oov_buckets=2)\ncolumns = [colors, ...]\nfeatures = tf.io.parse_example(..., features=make_parse_example_spec(columns))\nlinear_prediction, _, _ = linear_model(features, columns)\n")])])]),a("p",[e._v("Example with default_value: In the following example, each input in vocabulary_list is assigned an ID 0-4 corresponding to its index (e.g., input 'B' produces output 3). All other inputs are assigned default_value 0.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" colors = categorical_column_with_vocabulary_list(\n    key='colors', vocabulary_list=('X', 'R', 'G', 'B', 'Y'), default_value=0)\ncolumns = [colors, ...]\nfeatures = tf.io.parse_example(..., features=make_parse_example_spec(columns))\nlinear_prediction, _, _ = linear_model(features, columns)\n")])])]),a("p",[e._v("And to make an embedding with either:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" columns = [embedding_column(colors, 3),...]\nfeatures = tf.io.parse_example(..., features=make_parse_example_spec(columns))\ndense_tensor = input_layer(features, columns)\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("key")]),e._v(": A unique string identifying the input feature. It is used as the column name and the dictionary "),a("code",[e._v("key")]),e._v(" for feature parsing configs, feature "),a("code",[e._v("Tensor")]),e._v(" objects, and feature columns.")]),e._v(" "),a("li",[a("code",[e._v("vocabulary_list")]),e._v(": An ordered iterable defining the vocabulary. Each feature is mapped to the index of its value (if present) in "),a("code",[e._v("vocabulary_list")]),e._v(". Must be castable to "),a("code",[e._v("dtype")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("dtype")]),e._v(": The type of features. Only string and integer types are supported. If "),a("code",[e._v("None")]),e._v(", it will be inferred from "),a("code",[e._v("vocabulary_list")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("default_value")]),e._v(": The integer ID value to return for out-of-vocabulary feature values, defaults to "),a("code",[e._v("-1")]),e._v(". This can not be specified with a positive "),a("code",[e._v("num_oov_buckets")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A CategoricalColumn with in-memory vocabulary.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": if "),a("code",[e._v("vocabulary_list")]),e._v(" is empty, or contains duplicate keys.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": "),a("code",[e._v("num_oov_buckets")]),e._v(" is a negative integer.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": "),a("code",[e._v("num_oov_buckets")]),e._v(" and "),a("code",[e._v("default_value")]),e._v(" are both specified.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": if "),a("code",[e._v("dtype")]),e._v(" is not integer or string.")])])])}),[],!1,null,null,null);_.default=v.exports}}]);