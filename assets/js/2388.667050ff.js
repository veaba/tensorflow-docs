(window.webpackJsonp=window.webpackJsonp||[]).push([[2388],{2576:function(e,t,n){"use strict";n.r(t);var i=n(0),o=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Defined in generated file: python/ops/gen_string_ops.py")]),e._v(" "),n("p",[e._v("Transcode the input text from a source encoding to a destination encoding.")]),e._v(" "),n("h3",{attrs:{id:"aliases"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("tf.compat.v1.strings.unicode_transcode")])]),e._v(" "),n("li",[n("code",[e._v("tf.compat.v2.strings.unicode_transcode")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.strings.unicode_transcode(\n    input,\n    input_encoding,\n    output_encoding,\n    errors='replace',\n    replacement_char=65533,\n    replace_control_characters=False,\n    name=None\n)\n")])])]),n("h3",{attrs:{id:"used-in-the-tutorials"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("U")]),e._v("n"),n("code",[e._v("i")]),e._v("c"),n("code",[e._v("o")]),e._v("d"),n("code",[e._v("e")]),e._v(" "),n("code",[e._v("s")]),e._v("t"),n("code",[e._v("r")]),e._v("i"),n("code",[e._v("n")]),e._v("g"),n("code",[e._v("s")])])]),e._v(" "),n("p",[e._v("The input is a string tensor of any shape. The output is a string tensor of the same shape containing the transcoded strings. Output strings are always valid unicode. If the input contains invalid encoding positions, the errors attribute sets the policy for how to deal with them. If the default error-handling policy is used, invalid formatting will be substituted in the output by the replacement_char. If the errors policy is to ignore, any invalid encoding positions in the input are skipped and not included in the output. If it set to strict then any invalid formatting will result in an InvalidArgument error.")]),e._v(" "),n("p",[e._v("This operation can be used with output_encoding = input_encoding to enforce correct formatting for inputs even if they are already in the desired encoding.")]),e._v(" "),n("p",[e._v("If the input is prefixed by a Byte Order Mark needed to determine encoding (e.g. if the encoding is UTF-16 and the BOM indicates big-endian), then that BOM will be consumed and not emitted into the output. If the input encoding is marked with an explicit endianness (e.g. UTF-16-BE), then the BOM is interpreted as a non-breaking-space and is preserved in the output (including always for UTF-8).")]),e._v(" "),n("p",[e._v("The end result is that if the input is marked as an explicit endianness the transcoding is faithful to all codepoints in the source. If it is not marked with an explicit endianness, the BOM is not considered part of the string itself but as metadata, and so is not preserved in the output.")]),e._v(" "),n("h4",{attrs:{id:"args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("input")]),e._v(": A "),n("code",[e._v("Tensor")]),e._v(" of type "),n("code",[e._v("string")]),e._v(". The text to be processed. Can have any shape.")]),e._v(" "),n("li",[n("code",[e._v("input")]),e._v("_encoding: A "),n("code",[e._v("string")]),e._v(". Text encoding of the "),n("code",[e._v("input")]),e._v(" "),n("code",[e._v("string")]),e._v("s. This is any of the encodings supported by ICU ucnv algorithmic converters. Examples: "),n("code",[e._v('"UTF-16", "US ASCII", "UTF-8"')]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("output_encoding")]),e._v(": A "),n("code",[e._v("string")]),e._v(" from: "),n("code",[e._v('"UTF-8", "UTF-16-BE", "UTF-32-BE"')]),e._v(". The unicode encoding to use in the output. Must be one of "),n("code",[e._v('"UTF-8", "UTF-16-BE", "UTF-32-BE"')]),e._v(". Multi-byte encodings will be big-endian.")]),e._v(" "),n("li",[n("code",[e._v("errors")]),e._v(": An optional "),n("code",[e._v("string")]),e._v(" from: "),n("code",[e._v('"strict", "replace", "ignore"')]),e._v(". Defaults to "),n("code",[e._v('"replace"')]),e._v(". Error handling policy when there is invalid formatting found in the "),n("code",[e._v("input")]),e._v(". The value of 'strict' will cause the operation to produce a InvalidArgument error on any invalid "),n("code",[e._v("input")]),e._v(" formatting. A value of 'replace' (the default) will cause the operation to replace any invalid formatting in the "),n("code",[e._v("input")]),e._v(" with the "),n("code",[e._v("replacement_char")]),e._v(" codepoint. A value of 'ignore' will cause the operation to skip any invalid formatting in the "),n("code",[e._v("input")]),e._v(" and produce no corresponding output character.")]),e._v(" "),n("li",[n("code",[e._v("replacement_char")]),e._v(": An optional "),n("code",[e._v("int")]),e._v(". Defaults to "),n("code",[e._v("65533")]),e._v(". The replacement character codepo"),n("code",[e._v("int")]),e._v(" to be used in place of any invalid formatting in the "),n("code",[e._v("input")]),e._v(" when "),n("code",[e._v("errors")]),e._v("='replace'. Any valid unicode codepo"),n("code",[e._v("int")]),e._v(" may be used. The default value is the default unicode replacement character is 0xFFFD or U+"),n("code",[e._v("65533")]),e._v(".)\nNote that for UTF-8, passing a replacement character expressible in 1 byte, such as ' ', will preserve "),n("code",[e._v("string")]),e._v(" alignment to the source since invalid bytes will be replaced with a 1-byte replacement. For UTF-16-BE and UTF-16-LE, any 1 or 2 byte replacement character will preserve byte alignment to the source.")]),e._v(" "),n("li",[n("code",[e._v("replace_control_characters")]),e._v(": An optional "),n("code",[e._v("bool")]),e._v(". Defaults to "),n("code",[e._v("False")]),e._v(". Whether to replace the C0 control characters (00-1F) with the "),n("code",[e._v("replacement_char")]),e._v(". Default is false.")]),e._v(" "),n("li",[n("code",[e._v("name")]),e._v(": A "),n("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),n("h4",{attrs:{id:"returns"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),n("p",[e._v("A Tensor of type string.")])])}),[],!1,null,null,null);t.default=o.exports}}]);