(window.webpackJsonp=window.webpackJsonp||[]).push([[1591],{1782:function(a,e,t){"use strict";t.r(e);var r=t(0),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("Instantiates an all-ones variable and returns it.")]),a._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[a._v("#")]),a._v(" Aliases:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("tf.compat.v1.keras.backend.ones")])]),a._v(" "),t("li",[t("code",[a._v("tf.compat.v2.keras.backend.ones")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" tf.keras.backend.ones(\n    shape,\n    dtype=None,\n    name=None\n)\n")])])]),t("h4",{attrs:{id:"arguments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[a._v("#")]),a._v(" Arguments:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("shape")]),a._v(": Tuple of integers, "),t("code",[a._v("shape")]),a._v(" of returned Keras variable.")]),a._v(" "),t("li",[t("code",[a._v("dtype")]),a._v(": String, data type of returned Keras variable.")]),a._v(" "),t("li",[t("code",[a._v("name")]),a._v(": String, "),t("code",[a._v("name")]),a._v(" of returned Keras variable.")])]),a._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[a._v("#")]),a._v(" Returns:")]),a._v(" "),t("p",[a._v("A Keras variable, filled with 1.0. Note that if shape was symbolic, we cannot return a variable, and will return a dynamically-shaped tensor instead.")]),a._v(" "),t("h4",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[a._v("#")]),a._v(" Example:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("     >>> from keras import backend as K\n    >>> kvar = K.ones((3,4))\n    >>> K.eval(kvar)\n    array([[ 1.,  1.,  1.,  1.],\n           [ 1.,  1.,  1.,  1.],\n           [ 1.,  1.,  1.,  1.]], dtype=float32)\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);