(window.webpackJsonp=window.webpackJsonp||[]).push([[1187],{1376:function(e,t,r){"use strict";r.r(t);var s=r(0),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"class-slurmclusterresolver"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#class-slurmclusterresolver","aria-hidden":"true"}},[e._v("#")]),e._v(" Class SlurmClusterResolver")]),e._v(" "),r("p",[e._v("ClusterResolver for system with Slurm workload manager.\n"),r("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/distribute/cluster_resolver/ClusterResolver",target:"_blank",rel:"noopener noreferrer"}},[e._v("ClusterResolver"),r("OutboundLink")],1),e._v("Inherits From:")]),e._v(" "),r("h3",{attrs:{id:"aliases"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),r("ul",[r("li",[e._v("Class "),r("code",[e._v("tf.compat.v1.distribute.cluster_resolver.SlurmClusterResolver")])]),e._v(" "),r("li",[e._v("Class "),r("code",[e._v("tf.compat.v2.distribute.cluster_resolver.SlurmClusterResolver")])])]),e._v(" "),r("p",[e._v("This is an implementation of cluster resolvers for Slurm clusters. This allows the specification of jobs and task counts, number of tasks per node, number of GPUs on each node and number of GPUs for each task. It retrieves system attributes by Slurm environment variables, resolves allocated computing node names, constructs a cluster and returns a ClusterResolver object which can be use for distributed TensorFlow.")]),e._v(" "),r("h2",{attrs:{id:"init"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),r("strong",[e._v("init")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/slurm_cluster_resolver.py#L53-L127",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" __init__(\n    jobs,\n    port_base=8888,\n    gpus_per_node=1,\n    gpus_per_task=1,\n    tasks_per_node=None,\n    auto_set_gpu=True,\n    rpc_layer='grpc'\n)\n")])])]),r("p",[e._v("Creates a new SlurmClusterResolver object.")]),e._v(" "),r("p",[e._v("This takes in parameters and creates a SlurmClusterResolver object. It uses those parameters to check which nodes will processes reside on and resolves their hostnames. With the number of the GPUs on each node and number of GPUs for each task it offsets the port number for each process and allocates GPUs to tasks by setting environment variables. The resolver currently supports homogeneous tasks and default Slurm process allocation.")]),e._v(" "),r("h4",{attrs:{id:"args"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("jobs")]),e._v(": Dictionary with job names as key and number of tasks in the job as value.")]),e._v(" "),r("li",[r("code",[e._v("port_base")]),e._v(": The first port number to start with for processes on a node.")]),e._v(" "),r("li",[r("code",[e._v("gpus_per_node")]),e._v(": Number of GPUs available on each node.")]),e._v(" "),r("li",[r("code",[e._v("gpus_per_task")]),e._v(": Number of GPUs to be used for each task.")]),e._v(" "),r("li",[r("code",[e._v("tasks_per_node")]),e._v(": Number of tasks to run on each node, if not set defaults to Slurm's output environment variable SLURM_NTASKS_PER_NODE.")]),e._v(" "),r("li",[r("code",[e._v("auto_set_gpu")]),e._v(": Set the visible CUDA devices automatically while resolving the cluster by setting CUDA_VISIBLE_DEVICES environment variable. Defaults to True.")]),e._v(" "),r("li",[r("code",[e._v("rpc_layer")]),e._v(": (Optional) The protocol TensorFlow uses to communicate between nodes. Defaults to 'grpc'.")])]),e._v(" "),r("h4",{attrs:{id:"returns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("A ClusterResolver object which can be used with distributed TensorFlow.")]),e._v(" "),r("h4",{attrs:{id:"raises"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("RuntimeError")]),e._v(": If requested more GPUs per node then available or requested more tasks then assigned tasks.")])]),e._v(" "),r("h2",{attrs:{id:"properties"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),r("h3",{attrs:{id:"environment"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#environment","aria-hidden":"true"}},[e._v("#")]),e._v(" environment")]),e._v(" "),r("p",[e._v("Returns the current environment which TensorFlow is running in.")]),e._v(" "),r("p",[e._v('There are two possible return values, "google" (when TensorFlow is running in a Google-internal environment) or an empty string (when TensorFlow is running elsewhere).')]),e._v(" "),r("p",[e._v("If you are implementing a ClusterResolver that works in both the Google environment and the open-source world (for instance, a TPU ClusterResolver or similar), you will have to return the appropriate string depending on the environment, which you will have to detect.")]),e._v(" "),r("p",[e._v("Otherwise, if you are implementing a ClusterResolver that will only work in open-source TensorFlow, you do not need to implement this property.")]),e._v(" "),r("h2",{attrs:{id:"methods"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),r("h3",{attrs:{id:"cluster-spec"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cluster-spec","aria-hidden":"true"}},[e._v("#")]),e._v(" cluster_spec")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/slurm_cluster_resolver.py#L129-L182",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" cluster_spec()\n")])])]),r("p",[e._v("Returns a ClusterSpec object based on the latest instance group info.")]),e._v(" "),r("p",[e._v("This returns a ClusterSpec object for use based on information from the specified initialization parameters and Slurm environment variables. The cluster specification is resolved each time this function is called. The resolver extract hostnames of nodes by scontrol and pack tasks in that order until a node a has number of tasks that is equal to specification. GPUs on nodes are allocated to tasks by specification through setting CUDA_VISIBLE_DEVICES environment variable.")]),e._v(" "),r("h4",{attrs:{id:"returns-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("A ClusterSpec containing host information retrieved from Slurm's environment variables.")]),e._v(" "),r("h3",{attrs:{id:"get-task-info"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#get-task-info","aria-hidden":"true"}},[e._v("#")]),e._v(" get_task_info")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/slurm_cluster_resolver.py#L184-L196",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" get_task_info()\n")])])]),r("p",[e._v("Returns job name and task_id for the process which calls this.")]),e._v(" "),r("p",[e._v("This returns the job name and task index for the process which calls this function according to its rank and cluster specification. The job name and task index are set after a cluster is constructed by cluster_spec otherwise defaults to None.")]),e._v(" "),r("h4",{attrs:{id:"returns-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("A string specifying job name the process belongs to and an integner specifying the task index the process belongs to in that job.")]),e._v(" "),r("h3",{attrs:{id:"master"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#master","aria-hidden":"true"}},[e._v("#")]),e._v(" master")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/slurm_cluster_resolver.py#L198-L218",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" master(\n    task_type=None,\n    task_id=None,\n    rpc_layer=None\n)\n")])])]),r("p",[e._v("Returns the master string for connecting to a TensorFlow master.")]),e._v(" "),r("h4",{attrs:{id:"args-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("task_type")]),e._v(": (Optional) Overrides the default auto-selected task type.")]),e._v(" "),r("li",[r("code",[e._v("task_id")]),e._v(": (Optional) Overrides the default auto-slected task index.")]),e._v(" "),r("li",[r("code",[e._v("rpc_layer")]),e._v(": (Optional) Overrides the default RPC protocol TensorFlow uses to communicate across nodes.")])]),e._v(" "),r("h4",{attrs:{id:"returns-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("A connection string for connecting to a TensorFlow master.")]),e._v(" "),r("h3",{attrs:{id:"num-accelerators"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#num-accelerators","aria-hidden":"true"}},[e._v("#")]),e._v(" num_accelerators")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/slurm_cluster_resolver.py#L220-L226",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" num_accelerators(\n    task_type=None,\n    task_id=None,\n    config_proto=None\n)\n")])])]),r("p",[e._v("Returns the number of accelerator cores per worker.")]),e._v(" "),r("p",[e._v("This returns the number of accelerator cores (such as GPUs and TPUs) available per worker.")]),e._v(" "),r("p",[e._v("Optionally, we allow callers to specify the task_type, and task_id, for if they want to target a specific TensorFlow process to query the number of accelerators. This is to support heterogenous environments, where the number of accelerators cores per host is different.")]),e._v(" "),r("h4",{attrs:{id:"args-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("task_type")]),e._v(": (Optional) The type of the TensorFlow task of the machine we want to query.")]),e._v(" "),r("li",[r("code",[e._v("task_id")]),e._v(": (Optional) The index of the TensorFlow task of the machine we want to query.")]),e._v(" "),r("li",[r("code",[e._v("config_proto")]),e._v(": (Optional) Configuration for starting a new session to query how many accelerator cores it has.")])]),e._v(" "),r("h4",{attrs:{id:"returns-5"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("A map of accelerator types to number of cores.")])])}),[],!1,null,null,null);t.default=a.exports}}]);