(window.webpackJsonp=window.webpackJsonp||[]).push([[1134],{1323:function(e,t,a){"use strict";a.r(t);var s=a(0),v=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Samples elements at random from the datasets in datasets.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v2.data.experimental.sample_from_datasets")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.data.experimental.sample_from_datasets(\n    datasets,\n    weights=None,\n    seed=None\n)\n")])])]),a("h3",{attrs:{id:"used-in-the-guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("t")]),e._v("f"),a("code",[e._v(".")]),e._v("d"),a("code",[e._v("a")]),e._v("t"),a("code",[e._v("a")]),e._v(":"),a("code"),e._v("B"),a("code",[e._v("u")]),e._v("i"),a("code",[e._v("l")]),e._v("d"),a("code"),e._v("T"),a("code",[e._v("e")]),e._v("n"),a("code",[e._v("s")]),e._v("o"),a("code",[e._v("r")]),e._v("F"),a("code",[e._v("l")]),e._v("o"),a("code",[e._v("w")]),e._v(" "),a("code",[e._v("i")]),e._v("n"),a("code",[e._v("p")]),e._v("u"),a("code",[e._v("t")]),e._v(" "),a("code",[e._v("p")]),e._v("i"),a("code",[e._v("p")]),e._v("e"),a("code",[e._v("l")]),e._v("i"),a("code",[e._v("n")]),e._v("e"),a("code",[e._v("s")])])]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("datasets")]),e._v(": A list of "),a("code",[e._v("tf.data.Dataset")]),e._v(" objects with compatible structure.")]),e._v(" "),a("li",[a("code",[e._v("weights")]),e._v(": (Optional.) A list of len("),a("code",[e._v("datasets")]),e._v(") floating-point values where "),a("code",[e._v("weights")]),e._v("[i] represents the probability with which an element should be sampled from "),a("code",[e._v("datasets")]),e._v("[i], or a "),a("code",[e._v("tf.data.Dataset")]),e._v(" object where each element is such a list. Defaults to a uniform distribution across "),a("code",[e._v("datasets")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("seed")]),e._v(": (Optional.) A "),a("code",[e._v("tf.int64")]),e._v(" scalar "),a("code",[e._v("tf.Tensor")]),e._v(", representing the random "),a("code",[e._v("seed")]),e._v(" that will be used to create the distribution. See "),a("code",[e._v("tf.compat.v1.set_random_seed")]),e._v(" for behavior.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A dataset that interleaves elements from datasets at random, according to weights if provided, otherwise with uniform probability.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TypeError")]),e._v(": If the "),a("code",[e._v("datasets")]),e._v(" or "),a("code",[e._v("weights")]),e._v(" arguments have the wrong type.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": If the "),a("code",[e._v("weights")]),e._v(" argument is specified and does not match the length of the "),a("code",[e._v("datasets")]),e._v(" element.")])])])}),[],!1,null,null,null);t.default=v.exports}}]);