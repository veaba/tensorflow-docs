(window.webpackJsonp=window.webpackJsonp||[]).push([[440],{629:function(e,t,a){"use strict";a.r(t);var o=a(0),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Constructs an Estimator instance from given keras model.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.compat.v1.keras.estimator.model_to_estimator(\n    keras_model=None,\n    keras_model_path=None,\n    custom_objects=None,\n    model_dir=None,\n    config=None,\n    checkpoint_format='saver'\n)\n")])])]),a("p",[a("a",{attrs:{href:"https://tensorflow.org/guide/estimators#model_to_estimator",target:"_blank",rel:"noopener noreferrer"}},[e._v("Creating estimators from Keras Models"),a("OutboundLink")],1),e._v("For usage example, please see: .")]),e._v(" "),a("p",[e._v("Sample Weights Estimators returned by model_to_estimator are configured to handle sample weights (similar to keras_model.fit(x, y, sample_weights)). To pass sample weights when training or evaluating the Estimator, the first item returned by the input function should be a dictionary with keys features and sample_weights. Example below:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" keras_model = tf.keras.Model(...)\nkeras_model.compile(...)\n\nestimator = tf.keras.estimator.model_to_estimator(keras_model)\n\ndef input_fn():\n  return dataset_ops.Dataset.from_tensors(\n      ({'features': features, 'sample_weights': sample_weights},\n       targets))\n\nestimator.train(input_fn, steps=1)\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("keras_model")]),e._v(": A compiled Keras model object. This argument is mutually exclusive with "),a("code",[e._v("keras_model")]),e._v("_path.")]),e._v(" "),a("li",[a("code",[e._v("keras_model")]),e._v("_path: Path to a compiled Keras model "),a("code",[e._v("save")]),e._v("d on disk, in HDF5 format, which can be generated with the "),a("code",[e._v("save")]),e._v("() method of a Keras model. This argument is mutually exclusive with "),a("code",[e._v("keras_model")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("custom_objects")]),e._v(": Dictionary for custom objects.")]),e._v(" "),a("li",[a("code",[e._v("model_dir")]),e._v(": Directory to "),a("code",[e._v("save")]),e._v(" "),a("code",[e._v("Estimator")]),e._v(" model parameters, graph, summary files for TensorBoard, etc.")]),e._v(" "),a("li",[a("code",[e._v("config")]),e._v(": "),a("code",[e._v("RunConfig")]),e._v(" to "),a("code",[e._v("config")]),e._v(" "),a("code",[e._v("Estimator")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("checkpoint_format")]),e._v(": Sets the format of the "),a("code",[e._v("checkpoint")]),e._v(" "),a("code",[e._v("save")]),e._v("d by the estimator when training. May be "),a("code",[e._v("save")]),e._v("r or "),a("code",[e._v("checkpoint")]),e._v(", depending on whether to "),a("code",[e._v("save")]),e._v(" "),a("code",[e._v("checkpoint")]),e._v("s from "),a("code",[e._v("tf.train.Saver")]),e._v(" or "),a("code",[e._v("tf.train.Checkpoint")]),e._v(". This argument currently defaults to "),a("code",[e._v("save")]),e._v("r. When 2.0 is released, the default will be "),a("code",[e._v("checkpoint")]),e._v(". "),a("code",[e._v("Estimator")]),e._v("s use name-based "),a("code",[e._v("tf.train.Saver")]),e._v(" "),a("code",[e._v("checkpoint")]),e._v("s, while Keras models use object-based "),a("code",[e._v("checkpoint")]),e._v("s from "),a("code",[e._v("tf.train.Checkpoint")]),e._v(". Currently, saving object-based "),a("code",[e._v("checkpoint")]),e._v("s from "),a("code",[e._v("model_to_estimator")]),e._v(" is only supported by Functional and Sequential models.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("An Estimator from given keras model.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": if neither keras_model nor keras_model_path was given.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": if both keras_model and keras_model_path was given.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": if the keras_model_path is a GCS URI.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": if keras_model has not been compiled.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": if an invalid checkpoint_format was given.")])])])}),[],!1,null,null,null);t.default=r.exports}}]);