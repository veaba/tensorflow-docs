(window.webpackJsonp=window.webpackJsonp||[]).push([[228],{416:function(e,t,o){"use strict";o.r(t);var a=o(0),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Enables eager execution for the lifetime of this program.")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" tf.compat.v1.enable_eager_execution(\n    config=None,\n    device_policy=None,\n    execution_mode=None\n)\n")])])]),o("p",[o("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/Session",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.compat.v1.Session"),o("OutboundLink")],1),e._v("Eager execution provides an imperative interface to TensorFlow. With eager execution enabled, TensorFlow functions execute operations immediately (as opposed to adding to a graph to be executed later in a ) and return concrete values (as opposed to symbolic references to a node in a computational graph).")]),e._v(" "),o("h4",{attrs:{id:"for-example"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" tf.compat.v1.enable_eager_execution()\n\n# After eager execution is enabled, operations are executed as they are\n# defined and Tensor objects hold concrete values, which can be accessed as\n# numpy.ndarray`s through the numpy() method.\nassert tf.multiply(6, 7).numpy() == 42\n")])])]),o("p",[e._v("Eager execution cannot be enabled after TensorFlow APIs have been used to create or execute graphs. It is typically recommended to invoke this function at program startup and not in a library (as most libraries should be usable both with and without eager execution).")]),e._v(" "),o("h4",{attrs:{id:"args"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("config")]),e._v(": (Optional.) A "),o("code",[e._v("tf.compat.v1.ConfigProto")]),e._v(" to use to "),o("code",[e._v("config")]),e._v("ure the environment in which operations are executed. Note that "),o("code",[e._v("tf.compat.v1.ConfigProto")]),e._v(" is also used to "),o("code",[e._v("config")]),e._v("ure graph execution (via "),o("code",[e._v("tf.compat.v1.Session")]),e._v(") and many options within "),o("code",[e._v("tf.compat.v1.ConfigProto")]),e._v(" are not implemented (or are irrelevant) when eager execution is enabled.")]),e._v(" "),o("li",[o("code",[e._v("device_policy")]),e._v(": (Optional.) Policy controlling how operations requiring inputs on a specific device (e.g., a GPU 0) handle inputs on a different device (e.g. GPU 1 or CPU). When set to None, an appropriate value will be picked automatically. The value picked may change between TensorFlow releases. Valid values:\ntf.contrib.eager.DEVICE_PLACEMENT_EXPLICIT: raises an error if the placement is not correct.\ntf.contrib.eager.DEVICE_PLACEMENT_WARN: copies the tensors which are not on the right device but logs a warning.\ntf.contrib.eager.DEVICE_PLACEMENT_SILENT: silently copies the tensors. Note that this may hide performance problems as there is no notification provided when operations are blocked on the tensor being copied between devices.\ntf.contrib.eager.DEVICE_PLACEMENT_SILENT_FOR_INT32: silently copies int32 tensors, raising errors on the other ones.")]),e._v(" "),o("li",[e._v("tf.contrib.eager.DEVICE_PLACEMENT_EXPLICIT: raises an error if the placement is not correct.")]),e._v(" "),o("li",[e._v("tf.contrib.eager.DEVICE_PLACEMENT_WARN: copies the tensors which are not on the right device but logs a warning.")]),e._v(" "),o("li",[e._v("tf.contrib.eager.DEVICE_PLACEMENT_SILENT: silently copies the tensors. Note that this may hide performance problems as there is no notification provided when operations are blocked on the tensor being copied between devices.")]),e._v(" "),o("li",[e._v("tf.contrib.eager.DEVICE_PLACEMENT_SILENT_FOR_INT32: silently copies int32 tensors, raising errors on the other ones.")]),e._v(" "),o("li",[o("code",[e._v("execution_mode")]),e._v(': (Optional.) Policy controlling how operations dispatched are actually executed. When set to None, an appropriate value will be picked automatically. The value picked may change between TensorFlow releases. Valid values:\ntf.contrib.eager.SYNC: executes each operation synchronously.\ntf.contrib.eager.ASYNC: executes each operation asynchronously. These operations may return "non-ready" handles.')]),e._v(" "),o("li",[e._v("tf.contrib.eager.SYNC: executes each operation synchronously.")]),e._v(" "),o("li",[e._v('tf.contrib.eager.ASYNC: executes each operation asynchronously. These operations may return "non-ready" handles.')])]),e._v(" "),o("h4",{attrs:{id:"raises"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("ValueError")]),e._v(": If eager execution is enabled after creating/executing a TensorFlow graph, or if options provided conflict with a previous call to this function.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);