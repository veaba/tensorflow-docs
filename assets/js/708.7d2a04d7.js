(window.webpackJsonp=window.webpackJsonp||[]).push([[708],{896:function(e,_,v){"use strict";v.r(_);var o=v(0),t=Object(o.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("Ragged Tensors.\n"),v("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/RaggedTensor",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.RaggedTensor"),v("OutboundLink")],1),e._v("This package defines ops for manipulating ragged tensors (), which are tensors with non-uniform shapes. In particular, each RaggedTensor has one or more ragged dimensions, which are dimensions whose slices may have different lengths. For example, the inner (column) dimension of rt=[[3, 1, 4, 1], [], [5, 9, 2], [6], []] is ragged, since the column slices (rt[0, :], ..., rt[4, :]) have different lengths. For a more detailed description of ragged tensors, see the  class documentation and the Ragged Tensor Guide.")]),e._v(" "),v("h3",{attrs:{id:"additional-ops-that-support-raggedtensor"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#additional-ops-that-support-raggedtensor","aria-hidden":"true"}},[e._v("#")]),e._v(" Additional ops that support RaggedTensor")]),e._v(" "),v("p",[e._v("Arguments that accept RaggedTensors are marked in bold.")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("tf.batch_gather")]),e._v("(params, indices, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.bitwise.bitwise_and")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.bitwise.bitwise_or")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.bitwise.bitwise_xor")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.bitwise.invert")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.bitwise.left_shift")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.bitwise.right_shift")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.clip_by_value")]),e._v("(t, clip_value_min, clip_value_max, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.concat")]),e._v("(values, axis, name="),v("code",[e._v("'concat'")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.debugging.check_numerics")]),e._v("(tensor, message, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.dtypes.cast")]),e._v("(x, dtype, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.dtypes.complex")]),e._v("(real, imag, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.dtypes.saturate_cast")]),e._v("(value, dtype, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.dynamic_partition")]),e._v("(data, partitions, num_partitions, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.expand_dims")]),e._v("(input, axis="),v("code",[e._v("None")]),e._v(", name="),v("code",[e._v("None")]),e._v(", dim="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.gather_nd")]),e._v("(params, indices, name="),v("code",[e._v("None")]),e._v(", batch_dims="),v("code",[e._v("0")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.gather")]),e._v("(params, indices, validate_indices="),v("code",[e._v("None")]),e._v(", name="),v("code",[e._v("None")]),e._v(", axis="),v("code",[e._v("None")]),e._v(", batch_dims="),v("code",[e._v("0")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.identity")]),e._v("(input, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.io.decode_base64")]),e._v("(input, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.io.decode_compressed")]),e._v("(bytes, compression_type="),v("code",[e._v("''")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.io.encode_base64")]),e._v("(input, pad="),v("code",[e._v("False")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.abs")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.acos")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.acos")]),e._v("h(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.add_n")]),e._v("(inputs, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.add")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.angle")]),e._v("(input, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.asin")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.asin")]),e._v("h(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.atan2")]),e._v("(y, x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.atan")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.atan")]),e._v("h(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.ceil")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.conj")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.cos")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.cos")]),e._v("h(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.digamma")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.divide_no_nan")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.divide")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.equal")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.erf")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.erf")]),e._v("c(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.exp")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.exp")]),e._v("m1(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.floor")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.floor")]),e._v("div(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.floor")]),e._v("mod(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.greater_equal")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.greater")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.imag")]),e._v("(input, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.is_finite")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.is_inf")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.is_nan")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.less_equal")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.less")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.lgamma")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.log1p")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.log_sigmoid")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.log")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.log")]),e._v("ical_and(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.log")]),e._v("ical_not(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.log")]),e._v("ical_or(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.log")]),e._v("ical_xor(x, y, name="),v("code",[e._v("'LogicalXor'")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.maximum")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.minimum")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.multiply")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.negative")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.not_equal")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.pow")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.real")]),e._v("(input, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.reciprocal")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.reduce_any")]),e._v("(input_tensor, axis="),v("code",[e._v("None")]),e._v(", keepdims="),v("code",[e._v("False")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.reduce_max")]),e._v("(input_tensor, axis="),v("code",[e._v("None")]),e._v(", keepdims="),v("code",[e._v("False")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.reduce_mean")]),e._v("(input_tensor, axis="),v("code",[e._v("None")]),e._v(", keepdims="),v("code",[e._v("False")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.reduce_min")]),e._v("(input_tensor, axis="),v("code",[e._v("None")]),e._v(", keepdims="),v("code",[e._v("False")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.reduce_prod")]),e._v("(input_tensor, axis="),v("code",[e._v("None")]),e._v(", keepdims="),v("code",[e._v("False")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.reduce_sum")]),e._v("(input_tensor, axis="),v("code",[e._v("None")]),e._v(", keepdims="),v("code",[e._v("False")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.rint")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.round")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.rsqrt")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.sign")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.sin")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.sin")]),e._v("h(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.sqrt")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.square")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.square")]),e._v("d_difference(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.subtract")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.tan")]),e._v("(x, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.truediv")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.unsorted_segment_max")]),e._v("(data, segment_ids, num_segments, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.unsorted_segment_mean")]),e._v("(data, segment_ids, num_segments, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.unsorted_segment_min")]),e._v("(data, segment_ids, num_segments, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.unsorted_segment_prod")]),e._v("(data, segment_ids, num_segments, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.unsorted_segment_sqrt_n")]),e._v("(data, segment_ids, num_segments, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.math.unsorted_segment_sum")]),e._v("(data, segment_ids, num_segments, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.ones_like")]),e._v("(tensor, dtype="),v("code",[e._v("None")]),e._v(", name="),v("code",[e._v("None")]),e._v(", optimize="),v("code",[e._v("True")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.rank")]),e._v("(input, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.realdiv")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.reduce_all")]),e._v("(input_tensor, axis="),v("code",[e._v("None")]),e._v(", keepdims="),v("code",[e._v("False")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.size")]),e._v("(input, name="),v("code",[e._v("None")]),e._v(", out_type="),v("code",[e._v("tf.int32")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.squeeze")]),e._v("(input, axis="),v("code",[e._v("None")]),e._v(", name="),v("code",[e._v("None")]),e._v(", squeeze_dims="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.stack")]),e._v("(values, axis="),v("code",[e._v("0")]),e._v(", name="),v("code",[e._v("'stack'")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.as_string")]),e._v("(input, precision="),v("code",[e._v("-1")]),e._v(", scientific="),v("code",[e._v("False")]),e._v(", shortest="),v("code",[e._v("False")]),e._v(", width="),v("code",[e._v("-1")]),e._v(", fill="),v("code",[e._v("''")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.join")]),e._v("(inputs, separator="),v("code",[e._v("''")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.length")]),e._v("(input, name="),v("code",[e._v("None")]),e._v(", unit="),v("code",[e._v("'BYTE'")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.reduce_join")]),e._v("(inputs, axis="),v("code",[e._v("None")]),e._v(", keepdims="),v("code",[e._v("False")]),e._v(", separator="),v("code",[e._v("''")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.regex_full_match")]),e._v("(input, pattern, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.regex_replace")]),e._v("(input, pattern, rewrite, replace_global="),v("code",[e._v("True")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.strip")]),e._v("(input, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.substr")]),e._v("(input, pos, len, name="),v("code",[e._v("None")]),e._v(", unit="),v("code",[e._v("'BYTE'")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.to_hash_bucket_fast")]),e._v("(input, num_buckets, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.to_hash_bucket_strong")]),e._v("(input, num_buckets, key, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.to_hash_bucket")]),e._v("(input, num_buckets, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.to_hash_bucket")]),e._v("(input, num_buckets, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.to_number")]),e._v("(input, out_type="),v("code",[e._v("tf.float32")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.strings.unicode_script")]),e._v("(input, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.tile")]),e._v("(input, multiples, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.truncatediv")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.truncatemod")]),e._v("(x, y, name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.where")]),e._v("(condition, x="),v("code",[e._v("None")]),e._v(", y="),v("code",[e._v("None")]),e._v(", name="),v("code",[e._v("None")]),e._v(")")]),e._v(" "),v("li",[v("code",[e._v("tf.zeros_like")]),e._v("(tensor, dtype="),v("code",[e._v("None")]),e._v(", name="),v("code",[e._v("None")]),e._v(", optimize="),v("code",[e._v("True")]),e._v(")n")])]),e._v(" "),v("h2",{attrs:{id:"classes"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#classes","aria-hidden":"true"}},[e._v("#")]),e._v(" Classes")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/ragged/RaggedTensorValue",target:"_blank",rel:"noopener noreferrer"}},[e._v("class RaggedTensorValue"),v("OutboundLink")],1),e._v(": Represents the value of a RaggedTensor.")]),e._v(" "),v("h2",{attrs:{id:"functions"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#functions","aria-hidden":"true"}},[e._v("#")]),e._v(" Functions")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/ragged/boolean_mask",target:"_blank",rel:"noopener noreferrer"}},[e._v("boolean_mask(...)"),v("OutboundLink")],1),e._v(": Applies a boolean mask to data without flattening the mask dimensions.")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/ragged/constant",target:"_blank",rel:"noopener noreferrer"}},[e._v("constant(...)"),v("OutboundLink")],1),e._v(": Constructs a constant RaggedTensor from a nested Python list.")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/ragged/constant_value",target:"_blank",rel:"noopener noreferrer"}},[e._v("constant_value(...)"),v("OutboundLink")],1),e._v(": Constructs a RaggedTensorValue from a nested Python list.")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/ragged/map_flat_values",target:"_blank",rel:"noopener noreferrer"}},[e._v("map_flat_values(...)"),v("OutboundLink")],1),e._v(": Applies op to the values of one or more RaggedTensors.")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/ragged/placeholder",target:"_blank",rel:"noopener noreferrer"}},[e._v("placeholder(...)"),v("OutboundLink")],1),e._v(": Creates a placeholder for a tf.RaggedTensor that will always be fed.")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/ragged/range",target:"_blank",rel:"noopener noreferrer"}},[e._v("range(...)"),v("OutboundLink")],1),e._v(": Returns a RaggedTensor containing the specified sequences of numbers.")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/ragged/row_splits_to_segment_ids",target:"_blank",rel:"noopener noreferrer"}},[e._v("row_splits_to_segment_ids(...)"),v("OutboundLink")],1),e._v(": Generates the segmentation corresponding to a RaggedTensor row_splits.")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/ragged/segment_ids_to_row_splits",target:"_blank",rel:"noopener noreferrer"}},[e._v("segment_ids_to_row_splits(...)"),v("OutboundLink")],1),e._v(": Generates the RaggedTensor row_splits corresponding to a segmentation.")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/ragged/stack",target:"_blank",rel:"noopener noreferrer"}},[e._v("stack(...)"),v("OutboundLink")],1),e._v(": Stacks a list of rank-R tensors into one rank-(R+1) RaggedTensor.")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/ragged/stack_dynamic_partitions",target:"_blank",rel:"noopener noreferrer"}},[e._v("stack_dynamic_partitions(...)"),v("OutboundLink")],1),e._v(": Stacks dynamic partitions of a Tensor or RaggedTensor.")])])}),[],!1,null,null,null);_.default=t.exports}}]);