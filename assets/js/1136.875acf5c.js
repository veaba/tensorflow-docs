(window.webpackJsonp=window.webpackJsonp||[]).push([[1136],{1325:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Shuffles and repeats a Dataset returning a new permutation for each epoch. (deprecated)")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.data.experimental.shuffle_and_repeat")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.data.experimental.shuffle_and_repeat")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.data.experimental.shuffle_and_repeat(\n    buffer_size,\n    count=None,\n    seed=None\n)\n")])])]),a("p",[e._v("dataset.apply(tf.data.experimental.shuffle_and_repeat(buffer_size, count))")]),e._v(" "),a("p",[e._v("is equivalent to")]),e._v(" "),a("p",[e._v("dataset.shuffle(buffer_size, reshuffle_each_iteration=True).repeat(count)")]),e._v(" "),a("p",[e._v("The difference is that the latter dataset is not serializable. So, if you need to checkpoint an input pipeline with reshuffling you must use this implementation.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("buffer_size")]),e._v(": A "),a("code",[e._v("tf.int64")]),e._v(" scalar "),a("code",[e._v("tf.Tensor")]),e._v(", representing the maximum number elements that will be buffered when prefetching.")]),e._v(" "),a("li",[a("code",[e._v("count")]),e._v(": (Optional.) A "),a("code",[e._v("tf.int64")]),e._v(" scalar "),a("code",[e._v("tf.Tensor")]),e._v(", representing the number of times the dataset should be repeated. The default behavior (if "),a("code",[e._v("count")]),e._v(" is "),a("code",[e._v("None")]),e._v(" or "),a("code",[e._v("-1")]),e._v(") is for the dataset be repeated indefinitely.")]),e._v(" "),a("li",[a("code",[e._v("seed")]),e._v(": (Optional.) A "),a("code",[e._v("tf.int64")]),e._v(" scalar "),a("code",[e._v("tf.Tensor")]),e._v(", representing the random "),a("code",[e._v("seed")]),e._v(" that will be used to create the distribution. See "),a("code",[e._v("tf.compat.v1.set_random_seed")]),e._v(" for behavior.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/data/Dataset#apply",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.data.Dataset.apply"),a("OutboundLink")],1),e._v("A Dataset transformation function, which can be passed to .")])])}),[],!1,null,null,null);t.default=s.exports}}]);