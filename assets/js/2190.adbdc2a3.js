(window.webpackJsonp=window.webpackJsonp||[]).push([[2190],{2378:function(e,t,a){"use strict";a.r(t);var n=a(0),i=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Batch normalization.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v2.nn.batch_norm_with_global_normalization")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.nn.batch_norm_with_global_normalization(\n    input,\n    mean,\n    variance,\n    beta,\n    gamma,\n    variance_epsilon,\n    scale_after_normalization,\n    name=None\n)\n")])])]),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/nn/batch_normalization",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.nn.batch_normalization"),a("OutboundLink")],1),e._v("This op is deprecated. See .")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("input")]),e._v(": A 4D "),a("code",[e._v("input")]),e._v(" Tensor.")]),e._v(" "),a("li",[a("code",[e._v("mean")]),e._v(": A 1D "),a("code",[e._v("mean")]),e._v(" Tensor with size matching the last dimension of t. This is the first output from tf.nn.moments, or a saved moving average thereof.")]),e._v(" "),a("li",[a("code",[e._v("variance")]),e._v(": A 1D "),a("code",[e._v("variance")]),e._v(" Tensor with size matching the last dimension of t. This is the second output from tf.nn.moments, or a saved moving average thereof.")]),e._v(" "),a("li",[a("code",[e._v("beta")]),e._v(": A 1D "),a("code",[e._v("beta")]),e._v(" Tensor with size matching the last dimension of t. An offset to be added to the normalized tensor.")]),e._v(" "),a("li",[a("code",[e._v("gamma")]),e._v(": A 1D "),a("code",[e._v("gamma")]),e._v(' Tensor with size matching the last dimension of t. If "scale_after_normalization" is true, this tensor will be multiplied with the normalized tensor.')]),e._v(" "),a("li",[a("code",[e._v("variance")]),e._v("_epsilon: A small float number to avoid dividing by 0.")]),e._v(" "),a("li",[a("code",[e._v("scale_after_normalization")]),e._v(": A bool indicating whether the resulted tensor needs to be multiplied with "),a("code",[e._v("gamma")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A batch-normalized t.")])])}),[],!1,null,null,null);t.default=i.exports}}]);