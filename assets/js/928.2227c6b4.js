(window.webpackJsonp=window.webpackJsonp||[]).push([[928],{1116:function(e,t,s){"use strict";s.r(t);var a=s(0),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Create batches by randomly shuffling tensors. (deprecated)")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.compat.v1.train.shuffle_batch_join(\n    tensors_list,\n    batch_size,\n    capacity,\n    min_after_dequeue,\n    seed=None,\n    enqueue_many=False,\n    shapes=None,\n    allow_smaller_final_batch=False,\n    shared_name=None,\n    name=None\n)\n")])])]),s("p",[s("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/train/shuffle_batch",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.compat.v1.train.shuffle_batch()"),s("OutboundLink")],1),e._v("The tensors_list argument is a list of tuples of tensors, or a list of dictionaries of tensors. Each element in the list is treated similarly to the tensors argument of .")]),e._v(" "),s("p",[e._v("This version enqueues a different list of tensors in different threads. It adds the following to the current Graph:")]),e._v(" "),s("ul",[s("li",[e._v("A shuffling queue into which tensors from "),s("code",[e._v("tensors_list")]),e._v(" are enqueued.")]),e._v(" "),s("li",[e._v("A "),s("code",[e._v("dequeue_many")]),e._v(" operation to create batches from the queue.")]),e._v(" "),s("li",[e._v("A "),s("code",[e._v("QueueRunner")]),e._v(" to "),s("code",[e._v("QUEUE_RUNNER")]),e._v(" collection, to enqueue the tensors from "),s("code",[e._v("tensors_list")]),e._v(".")])]),e._v(" "),s("p",[e._v("len(tensors_list) threads will be started, with thread i enqueuing the tensors from tensors_list[i]. tensors_list[i1][j] must match tensors_list[i2][j] in type and shape, except in the first dimension if enqueue_many is true.")]),e._v(" "),s("p",[e._v("If enqueue_many is False, each tensors_list[i] is assumed to represent a single example. An input tensor with shape [x, y, z] will be output as a tensor with shape [batch_size, x, y, z].")]),e._v(" "),s("p",[e._v("If enqueue_many is True, tensors_list[i] is assumed to represent a batch of examples, where the first dimension is indexed by example, and all members of tensors_list[i] should have the same size in the first dimension. If an input tensor has shape [*, x, y, z], the output will have shape [batch_size, x, y, z].")]),e._v(" "),s("p",[e._v("The capacity argument controls the how long the prefetching is allowed to grow the queues.\n"),s("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/errors/OutOfRangeError",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.errors.OutOfRangeError"),s("OutboundLink")],1),e._v("The returned operation is a dequeue operation and will throw  if the input queue is exhausted. If this operation is feeding another input queue, its queue runner will catch this exception, however, if this operation is used in your main thread you are responsible for catching this yourself.")]),e._v(" "),s("p",[e._v("If allow_smaller_final_batch is True, a smaller batch value than batch_size is returned when the queue is closed and there are not enough elements to fill the batch, otherwise the pending elements are discarded. In addition, all output tensors' static shapes, as accessed via the shape property will have a first Dimension value of None, and operations that depend on fixed batch_size would fail.")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("tensors_list")]),e._v(": A list of tuples or dictionaries of tensors to enqueue.")]),e._v(" "),s("li",[s("code",[e._v("batch_size")]),e._v(": An integer. The new batch size pulled from the queue.")]),e._v(" "),s("li",[s("code",[e._v("capacity")]),e._v(": An integer. The maximum number of elements in the queue.")]),e._v(" "),s("li",[s("code",[e._v("min_after_dequeue")]),e._v(": Minimum number elements in the queue after a dequeue, used to ensure a level of mixing of elements.")]),e._v(" "),s("li",[s("code",[e._v("seed")]),e._v(": Seed for the random shuffling within the queue.")]),e._v(" "),s("li",[s("code",[e._v("enqueue_many")]),e._v(": Whether each tensor in "),s("code",[e._v("tensor_list_list")]),e._v(" is a single example.")]),e._v(" "),s("li",[s("code",[e._v("shapes")]),e._v(": (Optional) The "),s("code",[e._v("shapes")]),e._v(" for each example. Defaults to the inferred "),s("code",[e._v("shapes")]),e._v(" for "),s("code",[e._v("tensors_list")]),e._v("[i].")]),e._v(" "),s("li",[s("code",[e._v("allow_smaller_final_batch")]),e._v(": (Optional) Boolean. If "),s("code",[e._v("True")]),e._v(", allow the final batch to be smaller if there are insufficient items left in the queue.")]),e._v(" "),s("li",[s("code",[e._v("shared_name")]),e._v(": (optional). If set, this queue will be shared under the given name across multiple sessions.")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(": (Optional) A "),s("code",[e._v("name")]),e._v(" for the operations.")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A list or dictionary of tensors with the same number and types as tensors_list[i].")]),e._v(" "),s("h4",{attrs:{id:"raises"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ValueError")]),e._v(": If the "),s("code",[e._v("shapes")]),e._v(" are not specified, and cannot be inferred from the elements of "),s("code",[e._v("tensors_list")]),e._v(".")])]),e._v(" "),s("h4",{attrs:{id:"eager-compatibility"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eager-compatibility","aria-hidden":"true"}},[e._v("#")]),e._v(" Eager Compatibility")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/data",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.data"),s("OutboundLink")],1),e._v("Input pipelines based on Queues are not supported when eager execution is enabled. Please use the  API to ingest data under eager execution.")])])}),[],!1,null,null,null);t.default=n.exports}}]);