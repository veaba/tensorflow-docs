(window.webpackJsonp=window.webpackJsonp||[]).push([[363],{552:function(e,a,t){"use strict";t.r(a);var s=t(0),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Return the handle of data.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.compat.v1.get_session_handle(\n    data,\n    name=None\n)\n")])])]),t("p",[e._v("This is EXPERIMENTAL and subject to change.")]),e._v(" "),t("p",[e._v('Keep data "in-place" in the runtime and create a handle that can be used to retrieve data in a subsequent run().')]),e._v(" "),t("p",[e._v("Combined with get_session_tensor, we can keep a tensor produced in one run call in place, and use it as the input in a future run call.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("data")]),e._v(": A tensor to be stored in the session.")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": Optional "),t("code",[e._v("name")]),e._v(" prefix for the return tensor.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A scalar string tensor representing a unique handle for data.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("TypeError")]),e._v(": if "),t("code",[e._v("data")]),e._v(" is not a Tensor.")])]),e._v(" "),t("h4",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" c = tf.multiply(a, b)\nh = tf.compat.v1.get_session_handle(c)\nh = sess.run(h)\n\np, a = tf.compat.v1.get_session_tensor(h.handle, tf.float32)\nb = tf.multiply(a, 10)\nc = sess.run(b, feed_dict={p: h.handle})\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);