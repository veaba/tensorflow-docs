(window.webpackJsonp=window.webpackJsonp||[]).push([[2361],{2549:function(e,s,a){"use strict";a.r(s);var t=a(0),r=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Converts a SparseTensor into a dense tensor.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.sparse.to_dense")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v1.sparse_tensor_to_dense")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.sparse.to_dense")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.sparse.to_dense(\n    sp_input,\n    default_value=None,\n    validate_indices=True,\n    name=None\n)\n")])])]),a("h3",{attrs:{id:"used-in-the-guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("R")]),e._v("a"),a("code",[e._v("g")]),e._v("g"),a("code",[e._v("e")]),e._v("d"),a("code"),e._v("t"),a("code",[e._v("e")]),e._v("n"),a("code",[e._v("s")]),e._v("o"),a("code",[e._v("r")]),e._v("s``")])]),e._v(" "),a("p",[e._v("This op is a convenience wrapper around sparse_to_dense for SparseTensors.")]),e._v(" "),a("p",[e._v("For example, if sp_input has shape [3, 5] and non-empty string values:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" [0, 1]: a\n[0, 3]: b\n[2, 0]: c\n")])])]),a("p",[e._v("and default_value is x, then the output will be a dense [3, 5] string tensor with values:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" [[x a x b x]\n [x x x x x]\n [c x x x x]]\n")])])]),a("p",[e._v("Indices must be without repeats. This is only tested if validate_indices is True.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("sp_input")]),e._v(": The input "),a("code",[e._v("SparseTensor")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("default_value")]),e._v(": Scalar value to set for indices not specified in "),a("code",[e._v("sp_input")]),e._v(". Defaults to zero.")]),e._v(" "),a("li",[a("code",[e._v("validate_indices")]),e._v(": A boolean value. If "),a("code",[e._v("True")]),e._v(", indices are checked to make sure they are sorted in lexicographic order and that there are no repeats.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" prefix for the returned tensors (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A dense tensor with shape sp_input.dense_shape and values specified by the non-empty values in sp_input. Indices not in sp_input are assigned default_value.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TypeError")]),e._v(": If "),a("code",[e._v("sp_input")]),e._v(" is not a "),a("code",[e._v("SparseTensor")]),e._v(".")])])])}),[],!1,null,null,null);s.default=r.exports}}]);