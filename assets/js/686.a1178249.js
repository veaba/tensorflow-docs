(window.webpackJsonp=window.webpackJsonp||[]).push([[686],{874:function(e,a,s){"use strict";s.r(a);var t=s(0),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Parses a single Example proto.")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("tf.compat.v1.io.parse_single_example")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.compat.v1.parse_single_example(\n    serialized,\n    features,\n    name=None,\n    example_names=None\n)\n")])])]),s("p",[e._v("Similar to parse_example, except:")]),e._v(" "),s("p",[e._v("For dense tensors, the returned Tensor is identical to the output of parse_example, except there is no batch dimension, the output shape is the same as the shape given in dense_shape.")]),e._v(" "),s("p",[e._v("For SparseTensors, the first (batch) column of the indices matrix is removed (the indices matrix is a column vector), the values vector is unchanged, and the first (batch_size) entry of the shape vector is removed (it is now a single element vector).")]),e._v(" "),s("p",[e._v("One might see performance advantages by batching Example protos with parse_example instead of using this function directly.")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("serialized")]),e._v(": A scalar string Tensor, a single "),s("code",[e._v("serialized")]),e._v(" Example. See "),s("code",[e._v("_parse_single_example_raw")]),e._v(" documentation for more details.")]),e._v(" "),s("li",[s("code",[e._v("features")]),e._v(": A "),s("code",[e._v("dict")]),e._v(" mapping feature keys to "),s("code",[e._v("FixedLenFeature")]),e._v(" or "),s("code",[e._v("VarLenFeature")]),e._v(" values.")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(": A "),s("code",[e._v("name")]),e._v(" for this operation (optional).")]),e._v(" "),s("li",[s("code",[e._v("example_names")]),e._v(": (Optional) A scalar string Tensor, the associated "),s("code",[e._v("name")]),e._v(". See "),s("code",[e._v("_parse_single_example_raw")]),e._v(" documentation for more details.")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A dict mapping feature keys to Tensor and SparseTensor values.")]),e._v(" "),s("h4",{attrs:{id:"raises"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ValueError")]),e._v(": if any feature is invalid.")])])])}),[],!1,null,null,null);a.default=r.exports}}]);