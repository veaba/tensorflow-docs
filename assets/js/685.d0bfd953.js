(window.webpackJsonp=window.webpackJsonp||[]).push([[685],{873:function(e,a,t){"use strict";t.r(a);var s=t(0),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Parses Example protos into a dict of tensors.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.io.parse_example")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.compat.v1.parse_example(\n    serialized,\n    features,\n    name=None,\n    example_names=None\n)\n")])])]),t("p",[t("a",{attrs:{href:"https://www.tensorflow.org/code/tensorflow/core/example/example.proto",target:"_blank",rel:"noopener noreferrer"}},[e._v("Example"),t("OutboundLink")],1),e._v("Parses a number of serialized  protos given in serialized. We refer to serialized as a batch with batch_size many entries of individual  protos.")]),e._v(" "),t("p",[e._v("example_names may contain descriptive names for the corresponding serialized protos. These may be useful for debugging purposes, but they have no effect on the output. If not None, example_names must be the same length as serialized.")]),e._v(" "),t("p",[e._v("This op parses serialized examples into a dictionary mapping keys to Tensor and SparseTensor objects. features is a dict from keys to VarLenFeature, SparseFeature, and FixedLenFeature objects. Each VarLenFeature and SparseFeature is mapped to a SparseTensor, and each FixedLenFeature is mapped to a Tensor.")]),e._v(" "),t("p",[e._v("Each VarLenFeature maps to a SparseTensor of the specified type representing a ragged matrix. Its indices are [batch, index] where batch identifies the example in serialized, and index is the value's index in the list of values associated with that feature and example.")]),e._v(" "),t("p",[e._v("Each SparseFeature maps to a SparseTensor of the specified type representing a Tensor of dense_shape [batch_size] + SparseFeature.size. Its values come from the feature in the examples with key value_key. A values[i] comes from a position k in the feature of an example at batch entry batch. This positional information is recorded in indices[i] as [batch, index_0, index_1, ...] where index_j is the k-th value of the feature in the example at with key SparseFeature.index_key[j]. In other words, we split the indices (except the first index indicating the batch entry) of a SparseTensor by dimension into different features of the Example. Due to its complexity a VarLenFeature should be preferred over a SparseFeature whenever possible.\n"),t("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf#float32",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.float32"),t("OutboundLink")],1),e._v("Each FixedLenFeature df maps to a Tensor of the specified type (or  if not specified) and shape (serialized.size(),) + df.shape.")]),e._v(" "),t("p",[e._v("FixedLenFeature entries with a default_value are optional. With no default value, we will fail if that Feature is missing from any example in serialized.\n"),t("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf#float32",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.float32"),t("OutboundLink")],1),e._v("Each FixedLenSequenceFeature df maps to a Tensor of the specified type (or  if not specified) and shape (serialized.size(), None) + df.shape. All examples in serialized will be padded with default_value along the second dimension.")]),e._v(" "),t("h4",{attrs:{id:"examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf#float32",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.float32"),t("OutboundLink")],1),e._v("For example, if one expects a  VarLenFeature ft and three serialized Examples are provided:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' serialized = [\n  features\n    { feature { key: "ft" value { float_list { value: [1.0, 2.0] } } } },\n  features\n    { feature []},\n  features\n    { feature { key: "ft" value { float_list { value: [3.0] } } }\n]\n')])])]),t("p",[e._v("then the output will look like:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' {"ft": SparseTensor(indices=[[0, 0], [0, 1], [2, 0]],\n                    values=[1.0, 2.0, 3.0],\n                    dense_shape=(3, 2)) }\n')])])]),t("p",[e._v("If instead a FixedLenSequenceFeature with default_value = -1.0 and shape=[] is used then the output will look like:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' {"ft": [[1.0, 2.0], [3.0, -1.0]]}\n')])])]),t("p",[e._v("Given two Example input protos in serialized:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' [\n  features {\n    feature { key: "kw" value { bytes_list { value: [ "knit", "big" ] } } }\n    feature { key: "gps" value { float_list { value: [] } } }\n  },\n  features {\n    feature { key: "kw" value { bytes_list { value: [ "emmy" ] } } }\n    feature { key: "dank" value { int64_list { value: [ 42 ] } } }\n    feature { key: "gps" value { } }\n  }\n]\n')])])]),t("p",[e._v("And arguments")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' example_names: ["input0", "input1"],\nfeatures: {\n    "kw": VarLenFeature(tf.string),\n    "dank": VarLenFeature(tf.int64),\n    "gps": VarLenFeature(tf.float32),\n}\n')])])]),t("p",[e._v("Then the output is a dictionary:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' {\n  "kw": SparseTensor(\n      indices=[[0, 0], [0, 1], [1, 0]],\n      values=["knit", "big", "emmy"]\n      dense_shape=[2, 2]),\n  "dank": SparseTensor(\n      indices=[[1, 0]],\n      values=[42],\n      dense_shape=[2, 1]),\n  "gps": SparseTensor(\n      indices=[],\n      values=[],\n      dense_shape=[2, 0]),\n}\n')])])]),t("p",[e._v("For dense results in two serialized Examples:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' [\n  features {\n    feature { key: "age" value { int64_list { value: [ 0 ] } } }\n    feature { key: "gender" value { bytes_list { value: [ "f" ] } } }\n   },\n   features {\n    feature { key: "age" value { int64_list { value: [] } } }\n    feature { key: "gender" value { bytes_list { value: [ "f" ] } } }\n  }\n]\n')])])]),t("h4",{attrs:{id:"we-can-use-arguments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#we-can-use-arguments","aria-hidden":"true"}},[e._v("#")]),e._v(" We can use arguments:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' example_names: ["input0", "input1"],\nfeatures: {\n    "age": FixedLenFeature([], dtype=tf.int64, default_value=-1),\n    "gender": FixedLenFeature([], dtype=tf.string),\n}\n')])])]),t("p",[e._v("And the expected output is:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' {\n  "age": [[0], [-1]],\n  "gender": [["f"], ["f"]],\n}\n')])])]),t("p",[e._v("An alternative to VarLenFeature to obtain a SparseTensor is SparseFeature. For example, given two Example input protos in serialized:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' [\n  features {\n    feature { key: "val" value { float_list { value: [ 0.5, -1.0 ] } } }\n    feature { key: "ix" value { int64_list { value: [ 3, 20 ] } } }\n  },\n  features {\n    feature { key: "val" value { float_list { value: [ 0.0 ] } } }\n    feature { key: "ix" value { int64_list { value: [ 42 ] } } }\n  }\n]\n')])])]),t("p",[e._v("And arguments")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' example_names: ["input0", "input1"],\nfeatures: {\n    "sparse": SparseFeature(\n        index_key="ix", value_key="val", dtype=tf.float32, size=100),\n}\n')])])]),t("p",[e._v("Then the output is a dictionary:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' {\n  "sparse": SparseTensor(\n      indices=[[0, 3], [0, 20], [1, 42]],\n      values=[0.5, -1.0, 0.0]\n      dense_shape=[2, 100]),\n}\n')])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("serialized")]),e._v(": A vector (1-D Tensor) of strings, a batch of binary "),t("code",[e._v("serialized")]),e._v(" "),t("code",[e._v("Example")]),e._v(" protos.")]),e._v(" "),t("li",[t("code",[e._v("features")]),e._v(": A "),t("code",[e._v("dict")]),e._v(" mapping feature keys to "),t("code",[e._v("FixedLenFeature")]),e._v(", "),t("code",[e._v("VarLenFeature")]),e._v(", and "),t("code",[e._v("SparseFeature")]),e._v(" values.")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": A "),t("code",[e._v("name")]),e._v(" for this operation (optional).")]),e._v(" "),t("li",[t("code",[e._v("example_names")]),e._v(": A vector (1-D Tensor) of strings (optional), the "),t("code",[e._v("name")]),e._v("s of the "),t("code",[e._v("serialized")]),e._v(" protos in the batch.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A dict mapping feature keys to Tensor and SparseTensor values.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": if any feature is invalid.")])])])}),[],!1,null,null,null);a.default=n.exports}}]);