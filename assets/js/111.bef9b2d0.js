(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{302:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Assert the condition x >= 0 holds element-wise.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.debugging.assert_non_negative")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.compat.v1.assert_non_negative(\n    x,\n    data=None,\n    summarize=None,\n    message=None,\n    name=None\n)\n")])])]),a("p",[e._v("Example of adding a dependency to an operation:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" with tf.control_dependencies([tf.compat.v1.assert_non_negative(x)]):\n  output = tf.reduce_sum(x)\n")])])]),a("p",[e._v("Non-negative means, for every element x[i] of x, we have x[i] >= 0. If x is empty this is trivially satisfied.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("x")]),e._v(": Numeric "),a("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("data")]),e._v(": The tensors to print out if the condition is False. Defaults to error message and first few entries of "),a("code",[e._v("x")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("summarize")]),e._v(": Print this many entries of each tensor.")]),e._v(" "),a("li",[a("code",[e._v("message")]),e._v(": A string to prefi"),a("code",[e._v("x")]),e._v(" to the default "),a("code",[e._v("message")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(' for this operation (optional). Defaults to "assert_non_negative".')])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Op raising InvalidArgumentError unless x is all non-negative.")])])}),[],!1,null,null,null);t.default=n.exports}}]);