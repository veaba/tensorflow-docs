(window.webpackJsonp=window.webpackJsonp||[]).push([[2073],{2261:function(e,t,a){"use strict";a.r(t);var n=a(0),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Counts the number of occurrences of each value in an integer array.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v2.math.bincount")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.math.bincount(\n    arr,\n    weights=None,\n    minlength=None,\n    maxlength=None,\n    dtype=tf.dtypes.int32,\n    name=None\n)\n")])])]),a("p",[e._v("If minlength and maxlength are not given, returns a vector with length tf.reduce_max(arr) + 1 if arr is non-empty, and length 0 otherwise. If weights are non-None, then index i of the output stores the sum of the value in weights at each index where the corresponding value in arr is i.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" values = tf.constant([1,1,2,3,2,4,4,5])\ntf.math.bincount(values) #[0 2 2 1 2 1]\n")])])]),a("p",[e._v("Vector length = Maximum element in vector values is 5. Adding 1, which is 6 will be the vector length.")]),e._v(" "),a("p",[e._v("Each bin value in the output indicates number of occurrences of the particular index. Here, index 1 in output has a value 2. This indicates value 1 occurs two times in values.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" values = tf.constant([1,1,2,3,2,4,4,5])\nweights = tf.constant([1,5,0,1,0,5,4,5])\ntf.math.bincount(values, weights=weights) #[0 6 0 1 9 5]\n")])])]),a("p",[e._v("Bin will be incremented by the corresponding weight instead of 1. Here, index 1 in output has a value 6. This is the summation of weights corresponding to the value in values.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("arr")]),e._v(": An int32 tensor of non-negative values.")]),e._v(" "),a("li",[a("code",[e._v("weights")]),e._v(": If non-None, must be the same shape as "),a("code",[e._v("arr")]),e._v(". For each value in "),a("code",[e._v("arr")]),e._v(", the bin will be incremented by the corresponding weight instead of 1.")]),e._v(" "),a("li",[a("code",[e._v("minlength")]),e._v(": If given, ensures the output has length at least "),a("code",[e._v("minlength")]),e._v(", padding with zeros at the end if necessary.")]),e._v(" "),a("li",[a("code",[e._v("maxlength")]),e._v(": If given, skips values in "),a("code",[e._v("arr")]),e._v(" that are equal or greater than "),a("code",[e._v("maxlength")]),e._v(", ensuring that the output has length at most "),a("code",[e._v("maxlength")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("dtype")]),e._v(": If "),a("code",[e._v("weights")]),e._v(" is None, determines the type of the output bins.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" scope for the associated operations (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A vector with the same dtype as weights or the given dtype. The bin values.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("p",[e._v("InvalidArgumentError if negative values are provided as an input.")])])}),[],!1,null,null,null);t.default=s.exports}}]);