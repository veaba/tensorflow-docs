(window.webpackJsonp=window.webpackJsonp||[]).push([[769],{957:function(e,t,a){"use strict";a.r(t);var o=a(0),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Subtracts sparse updates to a variable reference.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.compat.v1.scatter_sub(\n    ref,\n    indices,\n    updates,\n    use_locking=False,\n    name=None\n)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("     # Scalar indices\n    ref[indices, ...] -= updates[...]\n\n    # Vector indices (for each i)\n    ref[indices[i], ...] -= updates[i, ...]\n\n    # High rank indices (for each i, ..., j)\n    ref[indices[i, ..., j], ...] -= updates[i, ..., j, ...]\n")])])]),a("p",[e._v("This operation outputs ref after the update is done. This makes it easier to chain operations that need to use the reset value.")]),e._v(" "),a("p",[e._v("Duplicate entries are handled correctly: if multiple indices reference the same location, their (negated) contributions add.")]),e._v(" "),a("p",[e._v("Requires updates.shape = indices.shape + ref.shape[1:] or updates.shape = [].")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ref")]),e._v(": A mutable "),a("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),a("code",[e._v("float32")]),e._v(", "),a("code",[e._v("float64")]),e._v(", "),a("code",[e._v("int32")]),e._v(", "),a("code",[e._v("uint8")]),e._v(", "),a("code",[e._v("int16")]),e._v(", "),a("code",[e._v("int8")]),e._v(", "),a("code",[e._v("complex64")]),e._v(", "),a("code",[e._v("int64")]),e._v(", "),a("code",[e._v("qint8")]),e._v(", "),a("code",[e._v("quint8")]),e._v(", "),a("code",[e._v("qint32")]),e._v(", "),a("code",[e._v("bfloat16")]),e._v(", "),a("code",[e._v("uint16")]),e._v(", "),a("code",[e._v("complex128")]),e._v(", "),a("code",[e._v("half")]),e._v(", "),a("code",[e._v("uint32")]),e._v(", "),a("code",[e._v("uint64")]),e._v(". Should be from a "),a("code",[e._v("Variable")]),e._v(" node.")]),e._v(" "),a("li",[a("code",[e._v("indices")]),e._v(": A "),a("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),a("code",[e._v("int32")]),e._v(", "),a("code",[e._v("int64")]),e._v(". A tensor of "),a("code",[e._v("indices")]),e._v(" into the first dimension of "),a("code",[e._v("ref")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("updates")]),e._v(": A "),a("code",[e._v("Tensor")]),e._v(". Must have the same type as "),a("code",[e._v("ref")]),e._v(". A tensor of updated values to subtract from "),a("code",[e._v("ref")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("use_locking")]),e._v(": An optional "),a("code",[e._v("bool")]),e._v(". Defaults to "),a("code",[e._v("False")]),e._v(". If True, the subtraction will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A mutable Tensor. Has the same type as ref.")])])}),[],!1,null,null,null);t.default=s.exports}}]);