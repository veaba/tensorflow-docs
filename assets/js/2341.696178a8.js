(window.webpackJsonp=window.webpackJsonp||[]).push([[2341],{2529:function(e,s,a){"use strict";a.r(s);var _=a(0),v=Object(_.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Inserts a dimension of 1 into a tensor's shape.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.sparse.expand_dims")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.sparse.expand_dims")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.sparse.expand_dims(\n    sp_input,\n    axis=None,\n    name=None\n)\n")])])]),a("p",[e._v("Given a tensor sp_input, this operation inserts a dimension of 1 at the dimension index axis of sp_input's shape. The dimension index axis starts at zero; if you specify a negative number for axis it is counted backwards from the end.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("sp_input")]),e._v(": A "),a("code",[e._v("SparseTensor")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("axis")]),e._v(":"),a("code"),e._v("0"),a("code",[e._v("-")]),e._v("D"),a("code",[e._v("``(``s")]),e._v("c"),a("code",[e._v("a")]),e._v("l"),a("code",[e._v("a``r``)")]),e._v("."),a("code"),e._v("S"),a("code",[e._v("p")]),e._v("ec"),a("code",[e._v("i")]),e._v("f"),a("code",[e._v("i")]),e._v("e"),a("code",[e._v("s`` ``t")]),e._v("he"),a("code"),e._v("d"),a("code",[e._v("i")]),e._v("me"),a("code",[e._v("n``s``i")]),e._v("o"),a("code",[e._v("n`` ``i``n")]),e._v("dex"),a("code",[e._v("``a``t``")]),e._v("wh"),a("code",[e._v("i")]),e._v("ch"),a("code",[e._v("``t")]),e._v("o"),a("code"),e._v("ex"),a("code",[e._v("p``a``n")]),e._v("d"),a("code",[e._v("``t")]),e._v("he"),a("code",[e._v("``s")]),e._v("h"),a("code",[e._v("a``p")]),e._v("e"),a("code"),e._v("of"),a("code",[e._v("``input")]),e._v("."),a("code"),e._v("M"),a("code",[e._v("u``s``t``")]),e._v("be"),a("code",[e._v("``i``n`` ``t")]),e._v("he"),a("code",[e._v("``r``a``n")]),e._v("ge"),a("code"),e._v("["),a("code",[e._v("-``r``a``n``k``(``sp_input``)`` ``-`` ``1``,`` ``r``a``n``k``(``sp_input``)")]),e._v("].")]),e._v(" "),a("li",[a("code",[e._v("n``a")]),e._v("me:"),a("code"),e._v("The"),a("code",[e._v("``n``a")]),e._v("me"),a("code"),e._v("of"),a("code",[e._v("``t")]),e._v("he"),a("code"),e._v("o"),a("code",[e._v("u``t``p``u``t`` ``SparseTensor")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A SparseTensor with the same data as sp_input, but its shape has an additional dimension of size 1 added.")])])}),[],!1,null,null,null);s.default=v.exports}}]);