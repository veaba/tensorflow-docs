(window.webpackJsonp=window.webpackJsonp||[]).push([[798],{986:function(e,t,s){"use strict";s.r(t);var r=s(0),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Split elements of source based on delimiter. (deprecated arguments)")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.compat.v1.string_split(\n    source,\n    sep=None,\n    skip_empty=True,\n    delimiter=None,\n    result_type='SparseTensor',\n    name=None\n)\n")])])]),s("p",[e._v("Let N be the size of source (typically N will be the batch size). Split each element of source based on delimiter and return a SparseTensor or RaggedTensor containing the split tokens. Empty tokens are ignored.")]),e._v(" "),s("p",[e._v("If sep is an empty string, each element of the source is split into individual strings, each containing one byte. (This includes splitting multibyte sequences of UTF-8.) If delimiter contains multiple bytes, it is treated as a set of delimiters with each considered a potential split point.")]),e._v(" "),s("h4",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.strings.split(['hello world', 'a b c'])\ntf.SparseTensor(indices=[[0, 0], [0, 1], [1, 0], [1, 1], [1, 2]],\n                values=['hello', 'world', 'a', 'b', 'c']\n                dense_shape=[2, 3])\n\n")])])]),s("p",[e._v("tf.strings.split(['hello world', 'a b c'], result_type=\"RaggedTensor\")\n<tf.RaggedTensor [['hello', 'world'], ['a', 'b', 'c']]>")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\n")])])]),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("b",[s("code",[e._v("source")])]),e._v(": "),s("code",[e._v("1-D")]),e._v(" string "),s("code",[e._v("Tensor")]),e._v(", the strings to split.")]),e._v(" "),s("li",[s("b",[s("code",[e._v("sep")])]),e._v(": "),s("code",[e._v("0-D")]),e._v(" string "),s("code",[e._v("Tensor")]),e._v(", the delimiter character, the string should\nbe length 0 or 1. Default is ' '.")]),e._v(" "),s("li",[s("b",[s("code",[e._v("skip_empty")])]),e._v(": A "),s("code",[e._v("bool")]),e._v(". If "),s("code",[e._v("True")]),e._v(", skip the empty strings from the result.")]),e._v(" "),s("li",[s("b",[s("code",[e._v("delimiter")])]),e._v(": deprecated alias for "),s("code",[e._v("sep")]),e._v(".")]),e._v(" "),s("li",[s("b",[s("code",[e._v("result_type")])]),e._v(": The tensor type for the result: one of "),s("code",[e._v('"RaggedTensor"')]),e._v(" or\n"),s("code",[e._v('"SparseTensor"')]),e._v(".")]),e._v(" "),s("li",[s("b",[s("code",[e._v("name")])]),e._v(": A name for the operation (optional).")])]),e._v(" "),s("h4",{attrs:{id:"raises"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),s("ul",[s("li",[s("b",[s("code",[e._v("ValueError")])]),e._v(": If delimiter is not a string.")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A "),s("code",[e._v("SparseTensor")]),e._v(" or "),s("code",[e._v("RaggedTensor")]),e._v(" of rank "),s("code",[e._v("2")]),e._v(", the strings split according\nto the delimiter.  The first column of the indices corresponds to the row\nin "),s("code",[e._v("source")]),e._v(" and the second column corresponds to the index of the split\ncomponent in this row.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])])])}),[],!1,null,null,null);t.default=a.exports}}]);