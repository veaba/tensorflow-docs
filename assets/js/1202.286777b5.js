(window.webpackJsonp=window.webpackJsonp||[]).push([[1202],{1391:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"class-dtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-dtype","aria-hidden":"true"}},[e._v("#")]),e._v(" Class DType")]),e._v(" "),a("p",[e._v("Represents the type of the elements in a Tensor.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[e._v("Class "),a("code",[e._v("tf.DType")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.compat.v1.DType")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.compat.v1.dtypes.DType")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.compat.v2.DType")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.compat.v2.dtypes.DType")])])]),e._v(" "),a("p",[e._v("The following DType objects are defined:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.float16")]),e._v(": 16-bit half-precision floating-point.")]),e._v(" "),a("li",[a("code",[e._v("tf.float32")]),e._v(": 32-bit single-precision floating-point.")]),e._v(" "),a("li",[a("code",[e._v("tf.float64")]),e._v(": 64-bit double-precision floating-point.")]),e._v(" "),a("li",[a("code",[e._v("tf.bfloat16")]),e._v(": 16-bit truncated floating-point.")]),e._v(" "),a("li",[a("code",[e._v("tf.complex64")]),e._v(": 64-bit single-precision complex.")]),e._v(" "),a("li",[a("code",[e._v("tf.complex128")]),e._v(": 128-bit double-precision complex.")]),e._v(" "),a("li",[a("code",[e._v("tf.int8")]),e._v(": 8-bit signed integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.uint8")]),e._v(": 8-bit unsigned integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.uint16")]),e._v(": 16-bit unsigned integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.uint32")]),e._v(": 32-bit unsigned integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.uint64")]),e._v(": 64-bit unsigned integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.int16")]),e._v(": 16-bit signed integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.int32")]),e._v(": 32-bit signed integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.int64")]),e._v(": 64-bit signed integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.bool")]),e._v(": Boolean.")]),e._v(" "),a("li",[a("code",[e._v("tf.string")]),e._v(": String.")]),e._v(" "),a("li",[a("code",[e._v("tf.qint8")]),e._v(": Quantized 8-bit signed integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.quint8")]),e._v(": Quantized 8-bit unsigned integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.qint16")]),e._v(": Quantized 16-bit signed integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.quint16")]),e._v(": Quantized 16-bit unsigned integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.qint32")]),e._v(": Quantized 32-bit signed integer.")]),e._v(" "),a("li",[a("code",[e._v("tf.resource")]),e._v(": Handle to a mutable resource.")]),e._v(" "),a("li",[a("code",[e._v("tf.variant")]),e._v(": Values of arbitrary types.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/dtypes/as_dtype",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.as_dtype()"),a("OutboundLink")],1),e._v("The  function converts numpy types and string type names to a DType object.")])]),e._v(" "),a("h2",{attrs:{id:"init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("init")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/dtypes.py#L64-L85",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __init__(type_enum)\n")])])]),a("p",[e._v("Creates a new DataType.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/dtypes/as_dtype",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.as_dtype()"),a("OutboundLink")],1),e._v("NOTE(mrry): In normal circumstances, you should not need to construct a DataType object directly. Instead, use the  function.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("type_enum")]),e._v(": A "),a("code",[e._v("types_pb2.DataType")]),e._v(" enum value.")])]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TypeError")]),e._v(": If "),a("code",[e._v("type_enum")]),e._v(" is not a value "),a("code",[e._v("types_pb2.DataType")]),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),a("h3",{attrs:{id:"as-datatype-enum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#as-datatype-enum","aria-hidden":"true"}},[e._v("#")]),e._v(" as_datatype_enum")]),e._v(" "),a("p",[e._v("Returns a types_pb2.DataType enum value based on this DType.")]),e._v(" "),a("h3",{attrs:{id:"as-numpy-dtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#as-numpy-dtype","aria-hidden":"true"}},[e._v("#")]),e._v(" as_numpy_dtype")]),e._v(" "),a("p",[e._v("Returns a numpy.dtype based on this DType.")]),e._v(" "),a("h3",{attrs:{id:"base-dtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base-dtype","aria-hidden":"true"}},[e._v("#")]),e._v(" base_dtype")]),e._v(" "),a("p",[e._v("Returns a non-reference DType based on this DType.")]),e._v(" "),a("h3",{attrs:{id:"is-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-bool","aria-hidden":"true"}},[e._v("#")]),e._v(" is_bool")]),e._v(" "),a("p",[e._v("Returns whether this is a boolean data type")]),e._v(" "),a("h3",{attrs:{id:"is-complex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-complex","aria-hidden":"true"}},[e._v("#")]),e._v(" is_complex")]),e._v(" "),a("p",[e._v("Returns whether this is a complex floating point type.")]),e._v(" "),a("h3",{attrs:{id:"is-floating"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-floating","aria-hidden":"true"}},[e._v("#")]),e._v(" is_floating")]),e._v(" "),a("p",[e._v("Returns whether this is a (non-quantized, real) floating point type.")]),e._v(" "),a("h3",{attrs:{id:"is-integer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-integer","aria-hidden":"true"}},[e._v("#")]),e._v(" is_integer")]),e._v(" "),a("p",[e._v("Returns whether this is a (non-quantized) integer type.")]),e._v(" "),a("h3",{attrs:{id:"is-numpy-compatible"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-numpy-compatible","aria-hidden":"true"}},[e._v("#")]),e._v(" is_numpy_compatible")]),e._v(" "),a("h3",{attrs:{id:"is-quantized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-quantized","aria-hidden":"true"}},[e._v("#")]),e._v(" is_quantized")]),e._v(" "),a("p",[e._v("Returns whether this is a quantized data type.")]),e._v(" "),a("h3",{attrs:{id:"is-unsigned"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-unsigned","aria-hidden":"true"}},[e._v("#")]),e._v(" is_unsigned")]),e._v(" "),a("p",[e._v("Returns whether this type is unsigned.")]),e._v(" "),a("p",[e._v("Non-numeric, unordered, and quantized types are not considered unsigned, and this function returns False.")]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Whether a DType is unsigned.")]),e._v(" "),a("h3",{attrs:{id:"limits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#limits","aria-hidden":"true"}},[e._v("#")]),e._v(" limits")]),e._v(" "),a("p",[e._v("Return intensity limits, i.e.")]),e._v(" "),a("p",[e._v("(min, max) tuple, of the dtype. Args: clip_negative : bool, optional If True, clip the negative range (i.e. return 0 for min intensity) even if the image dtype allows negative values. Returns min, max : tuple Lower and upper intensity limits.")]),e._v(" "),a("h3",{attrs:{id:"max"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max","aria-hidden":"true"}},[e._v("#")]),e._v(" max")]),e._v(" "),a("p",[e._v("Returns the maximum representable value in this data type.")]),e._v(" "),a("h4",{attrs:{id:"raises-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TypeError")]),e._v(": if this is a non-numeric, unordered, or quantized type.")])]),e._v(" "),a("h3",{attrs:{id:"min"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#min","aria-hidden":"true"}},[e._v("#")]),e._v(" min")]),e._v(" "),a("p",[e._v("Returns the minimum representable value in this data type.")]),e._v(" "),a("h4",{attrs:{id:"raises-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TypeError")]),e._v(": if this is a non-numeric, unordered, or quantized type.")])]),e._v(" "),a("h3",{attrs:{id:"name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#name","aria-hidden":"true"}},[e._v("#")]),e._v(" name")]),e._v(" "),a("p",[e._v("Returns the string name for this DType.")]),e._v(" "),a("h3",{attrs:{id:"real-dtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#real-dtype","aria-hidden":"true"}},[e._v("#")]),e._v(" real_dtype")]),e._v(" "),a("p",[e._v("Returns the dtype correspond to this dtype's real part.")]),e._v(" "),a("h3",{attrs:{id:"size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#size","aria-hidden":"true"}},[e._v("#")]),e._v(" size")]),e._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),a("h3",{attrs:{id:"eq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eq","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("eq")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/dtypes.py#L260-L268",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __eq__(other)\n")])])]),a("p",[e._v("Returns True iff this DType refers to the same type as other.")]),e._v(" "),a("h3",{attrs:{id:"ne"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ne","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("ne")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/dtypes.py#L270-L272",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __ne__(other)\n")])])]),a("p",[e._v("Returns True iff self != other.")]),e._v(" "),a("h3",{attrs:{id:"is-compatible-with"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-compatible-with","aria-hidden":"true"}},[e._v("#")]),e._v(" is_compatible_with")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/dtypes.py#L240-L258",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" is_compatible_with(other)\n")])])]),a("p",[e._v("Returns True if the other DType will be converted to this DType.")]),e._v(" "),a("p",[e._v("The conversion rules are as follows:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" DType(T)       .is_compatible_with(DType(T))        == True\n")])])]),a("h4",{attrs:{id:"args-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("other")]),e._v(": A "),a("code",[e._v("DType")]),e._v(" (or object that may be converted to a "),a("code",[e._v("DType")]),e._v(").")])]),e._v(" "),a("h4",{attrs:{id:"returns-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("True if a Tensor of the other DType will be implicitly converted to this DType.")])])}),[],!1,null,null,null);t.default=s.exports}}]);