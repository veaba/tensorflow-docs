(window.webpackJsonp=window.webpackJsonp||[]).push([[1229],{1418:function(e,t,r){"use strict";r.r(t);var a=r(0),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"class-bestexporter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#class-bestexporter","aria-hidden":"true"}},[e._v("#")]),e._v(" Class BestExporter")]),e._v(" "),r("p",[e._v("This class exports the serving graph and checkpoints of the best models.\n"),r("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/estimator/Exporter",target:"_blank",rel:"noopener noreferrer"}},[e._v("Exporter"),r("OutboundLink")],1),e._v("Inherits From:")]),e._v(" "),r("h3",{attrs:{id:"aliases"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),r("ul",[r("li",[e._v("Class "),r("code",[e._v("tf.compat.v1.estimator.BestExporter")])]),e._v(" "),r("li",[e._v("Class "),r("code",[e._v("tf.compat.v2.estimator.BestExporter")])])]),e._v(" "),r("p",[e._v("This class performs a model export everytime the new model is better than any existing model.")]),e._v(" "),r("h2",{attrs:{id:"init"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),r("strong",[e._v("init")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/exporter.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" __init__(\n    name='best_exporter',\n    serving_input_receiver_fn=None,\n    event_file_pattern='eval/*.tfevents.*',\n    compare_fn=_loss_smaller,\n    assets_extra=None,\n    as_text=False,\n    exports_to_keep=5\n)\n")])])]),r("p",[r("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/estimator/EvalSpec",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.estimator.EvalSpec"),r("OutboundLink")],1),e._v("Create an Exporter to use with .")]),e._v(" "),r("p",[e._v("Example of creating a BestExporter for training and evaluation:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" def make_train_and_eval_fn():\n  # Set up feature columns.\n  categorical_feature_a = (\n      tf.feature_column.categorical_column_with_hash_bucket(...))\n  categorical_feature_a_emb = embedding_column(\n      categorical_column=categorical_feature_a, ...)\n  ...  # other feature columns\n\n  estimator = tf.estimator.DNNClassifier(\n      config=tf.estimator.RunConfig(\n          model_dir='/my_model', save_summary_steps=100),\n      feature_columns=[categorical_feature_a_emb, ...],\n      hidden_units=[1024, 512, 256])\n\n  serving_feature_spec = tf.feature_column.make_parse_example_spec(\n      categorical_feature_a_emb)\n  serving_input_receiver_fn = (\n      tf.estimator.export.build_parsing_serving_input_receiver_fn(\n      serving_feature_spec))\n\n  exporter = tf.estimator.BestExporter(\n      name=\"best_exporter\",\n      serving_input_receiver_fn=serving_input_receiver_fn,\n      exports_to_keep=5)\n\n  train_spec = tf.estimator.TrainSpec(...)\n\n  eval_spec = [tf.estimator.EvalSpec(\n    input_fn=eval_input_fn,\n    steps=100,\n    exporters=exporter,\n    start_delay_secs=0,\n    throttle_secs=5)]\n\n  return tf.estimator.DistributedTrainingSpec(estimator, train_spec,\n                                              eval_spec)\n")])])]),r("h4",{attrs:{id:"args"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": unique "),r("code",[e._v("name")]),e._v(" of this "),r("code",[e._v("Exporter")]),e._v(" that is going to be used in the export path.")]),e._v(" "),r("li",[r("code",[e._v("serving_input_receiver_fn")]),e._v(": a function that takes no arguments and returns a "),r("code",[e._v("ServingInputReceiver")]),e._v(".")]),e._v(" "),r("li",[r("code",[e._v("event_file_pattern")]),e._v(": event file "),r("code",[e._v("name")]),e._v(" pattern relative to model_dir. If None, however, the exporter would not be preemption-safe. To be preemption-safe, "),r("code",[e._v("event_file_pattern")]),e._v(" must be specified.")]),e._v(" "),r("li",[r("code",[e._v("compare_fn")]),e._v(": a function that compares two evaluation results and returns true if current evaluation result is better. Follows the signature:\nArgs:\n"),r("code",[e._v("best_eval_result")]),e._v(": This is the evaluation result of the best model.\n"),r("code",[e._v("current_eval_result")]),e._v(": This is the evaluation result of current candidate model.\nReturns: True if current evaluation result is better; otherwise, False.")]),e._v(" "),r("li",[e._v("Args:")]),e._v(" "),r("li",[r("code",[e._v("best_eval_result")]),e._v(": This is the evaluation result of the best model.")]),e._v(" "),r("li",[r("code",[e._v("current_eval_result")]),e._v(": This is the evaluation result of current candidate model.")]),e._v(" "),r("li",[e._v("Returns: True if current evaluation result is better; otherwise, False.")]),e._v(" "),r("li",[r("code",[e._v("assets_extra")]),e._v(": An optional dict specifying how to populate the assets.extra directory within the exported SavedModel. Each key should give the destination path (including the file"),r("code",[e._v("name")]),e._v(") relative to the assets.extra directory. The corresponding value gives the full path of the source file to be copied. For example, the simple case of copying a single file without renaming it is specified as "),r("code",[e._v("{'my_asset_file.txt': '/path/to/my_asset_file.txt'}")]),e._v(".")]),e._v(" "),r("li",[r("code",[e._v("as_text")]),e._v(": whether to write the SavedModel proto in text format. Defaults to "),r("code",[e._v("False")]),e._v(".")]),e._v(" "),r("li",[r("code",[e._v("exports_to_keep")]),e._v(": Number of exports to keep. Older exports will be garbage-collected. Defaults to 5. Set to "),r("code",[e._v("None")]),e._v(" to disable garbage collection.")])]),e._v(" "),r("h4",{attrs:{id:"raises"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("ValueError")]),e._v(": if any argument is invalid.")])]),e._v(" "),r("h2",{attrs:{id:"properties"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),r("h3",{attrs:{id:"name"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#name","aria-hidden":"true"}},[e._v("#")]),e._v(" name")]),e._v(" "),r("p",[e._v("Directory name.")]),e._v(" "),r("p",[e._v("A directory name under the export base directory where exports of this type are written. Should not be None nor empty.")]),e._v(" "),r("h2",{attrs:{id:"methods"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),r("h3",{attrs:{id:"export"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#export","aria-hidden":"true"}},[e._v("#")]),e._v(" export")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/exporter.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" export(\n    estimator,\n    export_path,\n    checkpoint_path,\n    eval_result,\n    is_the_final_export\n)\n")])])]),r("p",[e._v("Exports the given Estimator to a specific format.")]),e._v(" "),r("h4",{attrs:{id:"args-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("estimator")]),e._v(": the "),r("code",[e._v("Estimator")]),e._v(" to export.")]),e._v(" "),r("li",[r("code",[e._v("export_path")]),e._v(": A string containing a directory where to write the export.")]),e._v(" "),r("li",[r("code",[e._v("checkpoint_path")]),e._v(": The checkpoint path to export.")]),e._v(" "),r("li",[r("code",[e._v("eval_result")]),e._v(": The output of "),r("code",[e._v("Estimator")]),e._v(".evaluate on this checkpoint.")]),e._v(" "),r("li",[r("code",[e._v("is_the_final_export")]),e._v(": This boolean is True when this is an export in the end of training. It is False for the intermediate exports during the training. When passing "),r("code",[e._v("Exporter")]),e._v(" to "),r("code",[e._v("tf.estimator.train_and_evaluate")]),e._v(" "),r("code",[e._v("is_the_final_export")]),e._v(" is always False if "),r("code",[e._v("TrainSpec.max_steps")]),e._v(" is "),r("code",[e._v("None")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("The string path to the exported directory or None if export is skipped.")])])}),[],!1,null,null,null);t.default=s.exports}}]);