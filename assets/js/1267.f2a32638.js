(window.webpackJsonp=window.webpackJsonp||[]).push([[1267],{1456:function(e,t,s){"use strict";s.r(t);var a=s(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"class-runconfig"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-runconfig","aria-hidden":"true"}},[e._v("#")]),e._v(" Class RunConfig")]),e._v(" "),s("p",[e._v("This class specifies the configurations for an Estimator run.")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[e._v("Class "),s("code",[e._v("tf.compat.v1.estimator.RunConfig")])]),e._v(" "),s("li",[e._v("Class "),s("code",[e._v("tf.compat.v2.estimator.RunConfig")])])]),e._v(" "),s("h3",{attrs:{id:"used-in-the-guide"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("D")]),e._v("i"),s("code",[e._v("s")]),e._v("t"),s("code",[e._v("r")]),e._v("i"),s("code",[e._v("b")]),e._v("u"),s("code",[e._v("t")]),e._v("e"),s("code",[e._v("d")]),e._v(" "),s("code",[e._v("t")]),e._v("r"),s("code",[e._v("a")]),e._v("i"),s("code",[e._v("n")]),e._v("i"),s("code",[e._v("n")]),e._v("g"),s("code"),e._v("w"),s("code",[e._v("i")]),e._v("t"),s("code",[e._v("h")]),e._v(" "),s("code",[e._v("T")]),e._v("e"),s("code",[e._v("n")]),e._v("s"),s("code",[e._v("o")]),e._v("r"),s("code",[e._v("F")]),e._v("l"),s("code",[e._v("o")]),e._v("w``")])]),e._v(" "),s("h3",{attrs:{id:"used-in-the-tutorials"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("M")]),e._v("u"),s("code",[e._v("l")]),e._v("t"),s("code",[e._v("i")]),e._v("-"),s("code",[e._v("w")]),e._v("o"),s("code",[e._v("r")]),e._v("k"),s("code",[e._v("e")]),e._v("r"),s("code"),e._v("t"),s("code",[e._v("r")]),e._v("a"),s("code",[e._v("i")]),e._v("n"),s("code",[e._v("i")]),e._v("n"),s("code",[e._v("g")]),e._v(" "),s("code",[e._v("w")]),e._v("i"),s("code",[e._v("t")]),e._v("h"),s("code"),e._v("E"),s("code",[e._v("s")]),e._v("t"),s("code",[e._v("i")]),e._v("m"),s("code",[e._v("a")]),e._v("t"),s("code",[e._v("o")]),e._v("r``")])]),e._v(" "),s("h2",{attrs:{id:"init"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),s("strong",[e._v("init")])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/run_config.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" __init__(\n    model_dir=None,\n    tf_random_seed=None,\n    save_summary_steps=100,\n    save_checkpoints_steps=_USE_DEFAULT,\n    save_checkpoints_secs=_USE_DEFAULT,\n    session_config=None,\n    keep_checkpoint_max=5,\n    keep_checkpoint_every_n_hours=10000,\n    log_step_count_steps=100,\n    train_distribute=None,\n    device_fn=None,\n    protocol=None,\n    eval_distribute=None,\n    experimental_distribute=None,\n    experimental_max_worker_delay_secs=None,\n    session_creation_timeout_secs=7200\n)\n")])])]),s("p",[e._v("Constructs a RunConfig.")]),e._v(" "),s("p",[e._v("All distributed training related properties cluster_spec, is_chief, master , num_worker_replicas, num_ps_replicas, task_id, and task_type are set based on the TF_CONFIG environment variable, if the pertinent information is present. The TF_CONFIG environment variable is a JSON object with attributes: cluster and task.")]),e._v(" "),s("p",[e._v("cluster is a JSON serialized version of ClusterSpec's Python dict from server_lib.py, mapping task types (usually one of the TaskType enums) to a list of task addresses.")]),e._v(" "),s("p",[e._v("task has two attributes: type and index, where type can be any of the task types in cluster. When TF_CONFIG contains said information, the following properties are set on this class:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("cluster_spec")]),e._v(" is parsed from TF_CONFIG['cluster']. Defaults to {}. If present, must have one and only one node in the "),s("code",[e._v("chief")]),e._v(" attribute of "),s("code",[e._v("cluster_spec")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("task_type")]),e._v(" is set to TF_CONFIG['task']['type']. Must set if "),s("code",[e._v("cluster_spec")]),e._v(" is present; must be "),s("code",[e._v("worker")]),e._v(" (the default value) if "),s("code",[e._v("cluster_spec")]),e._v(" is not set.")]),e._v(" "),s("li",[s("code",[e._v("task_id")]),e._v(" is set to TF_CONFIG['task']['index']. Must set if "),s("code",[e._v("cluster_spec")]),e._v(" is present; must be 0 (the default value) if "),s("code",[e._v("cluster_spec")]),e._v(" is not set.")]),e._v(" "),s("li",[s("code",[e._v("master")]),e._v(" is determined by looking up "),s("code",[e._v("task_type")]),e._v(" and "),s("code",[e._v("task_id")]),e._v(" in the "),s("code",[e._v("cluster_spec")]),e._v(". Defaults to ''.")]),e._v(" "),s("li",[s("code",[e._v("num_ps_replicas")]),e._v(" is set by counting the number of nodes listed in the "),s("code",[e._v("ps")]),e._v(" attribute of "),s("code",[e._v("cluster_spec")]),e._v(". Defaults to 0.")]),e._v(" "),s("li",[s("code",[e._v("num_worker_replicas")]),e._v(" is set by counting the number of nodes listed in the "),s("code",[e._v("worker")]),e._v(" and "),s("code",[e._v("chief")]),e._v(" attributes of "),s("code",[e._v("cluster_spec")]),e._v(". Defaults to 1.")]),e._v(" "),s("li",[s("code",[e._v("is_chief")]),e._v(" is determined based on "),s("code",[e._v("task_type")]),e._v(" and "),s("code",[e._v("cluster")]),e._v(".")])]),e._v(" "),s("p",[e._v("There is a special node with task_type as evaluator, which is not part of the (training) cluster_spec. It handles the distributed evaluation job.")]),e._v(" "),s("p",[e._v("Example of non-chief node:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("   cluster = {'chief': ['host0:2222'],\n             'ps': ['host1:2222', 'host2:2222'],\n             'worker': ['host3:2222', 'host4:2222', 'host5:2222']}\n  os.environ['TF_CONFIG'] = json.dumps(\n      {'cluster': cluster,\n       'task': {'type': 'worker', 'index': 1}})\n  config = RunConfig()\n  assert config.master == 'host4:2222'\n  assert config.task_id == 1\n  assert config.num_ps_replicas == 2\n  assert config.num_worker_replicas == 4\n  assert config.cluster_spec == server_lib.ClusterSpec(cluster)\n  assert config.task_type == 'worker'\n  assert not config.is_chief\n")])])]),s("h4",{attrs:{id:"example-of-chief-node"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-of-chief-node","aria-hidden":"true"}},[e._v("#")]),e._v(" Example of chief node:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("   cluster = {'chief': ['host0:2222'],\n             'ps': ['host1:2222', 'host2:2222'],\n             'worker': ['host3:2222', 'host4:2222', 'host5:2222']}\n  os.environ['TF_CONFIG'] = json.dumps(\n      {'cluster': cluster,\n       'task': {'type': 'chief', 'index': 0}})\n  config = RunConfig()\n  assert config.master == 'host0:2222'\n  assert config.task_id == 0\n  assert config.num_ps_replicas == 2\n  assert config.num_worker_replicas == 4\n  assert config.cluster_spec == server_lib.ClusterSpec(cluster)\n  assert config.task_type == 'chief'\n  assert config.is_chief\n")])])]),s("p",[e._v("Example of evaluator node (evaluator is not part of training cluster):")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("   cluster = {'chief': ['host0:2222'],\n             'ps': ['host1:2222', 'host2:2222'],\n             'worker': ['host3:2222', 'host4:2222', 'host5:2222']}\n  os.environ['TF_CONFIG'] = json.dumps(\n      {'cluster': cluster,\n       'task': {'type': 'evaluator', 'index': 0}})\n  config = RunConfig()\n  assert config.master == ''\n  assert config.evaluator_master == ''\n  assert config.task_id == 0\n  assert config.num_ps_replicas == 0\n  assert config.num_worker_replicas == 0\n  assert config.cluster_spec == {}\n  assert config.task_type == 'evaluator'\n  assert not config.is_chief\n")])])]),s("p",[e._v("N.B.: If save_checkpoints_steps or save_checkpoints_secs is set, keep_checkpoint_max might need to be adjusted accordingly, especially in distributed training. For example, setting save_checkpoints_secs as 60 without adjusting keep_checkpoint_max (defaults to 5) leads to situation that checkpoint would be garbage collected after 5 minutes. In distributed training, the evaluation job starts asynchronously and might fail to load or find the checkpoint due to race condition.")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("model_dir")]),e._v(": directory where model parameters, graph, etc are saved. If "),s("code",[e._v("PathLike")]),e._v(" object, the path will be resolved. If "),s("code",[e._v("None")]),e._v(", will use a default value set by the Estimator.")]),e._v(" "),s("li",[s("code",[e._v("tf_random_seed")]),e._v(": Random seed for TensorFlow initializers. Setting this value allows consistency between reruns.")]),e._v(" "),s("li",[s("code",[e._v("save_summary_steps")]),e._v(": Save summaries every this many steps.")]),e._v(" "),s("li",[s("code",[e._v("save_checkpoints_steps")]),e._v(": Save checkpoints every this many steps. Can not be specified with "),s("code",[e._v("save_checkpoints_secs")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("save_checkpoints_secs")]),e._v(": Save checkpoints every this many seconds. Can not be specified with "),s("code",[e._v("save_checkpoints_steps")]),e._v(". Defaults to 600 seconds if both "),s("code",[e._v("save_checkpoints_steps")]),e._v(" and "),s("code",[e._v("save_checkpoints_secs")]),e._v(" are not set in constructor. If both "),s("code",[e._v("save_checkpoints_steps")]),e._v(" and "),s("code",[e._v("save_checkpoints_secs")]),e._v(" are "),s("code",[e._v("None")]),e._v(", then checkpoints are disabled.")]),e._v(" "),s("li",[s("code",[e._v("session_config")]),e._v(": a ConfigProto used to set session parameters, or "),s("code",[e._v("None")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("keep_checkpoint_max")]),e._v(": The maximum number of recent checkpoint files to keep. As new files are created, older files are deleted. If "),s("code",[e._v("None")]),e._v(" or 0, all checkpoint files are kept. Defaults to 5 (that is, the 5 most recent checkpoint files are kept.)")]),e._v(" "),s("li",[s("code",[e._v("keep_checkpoint_every_n_hours")]),e._v(": Number of hours between each checkpoint to be saved. The default value of 10,000 hours effectively disables the feature.")]),e._v(" "),s("li",[s("code",[e._v("log_step_count_steps")]),e._v(": The frequency, in number of global steps, that the global step and the loss will be logged during training. Also controls the frequency that the global steps / s will be logged (and written to summary) during training.")]),e._v(" "),s("li",[s("code",[e._v("train_distribute")]),e._v(": An optional instance of "),s("code",[e._v("tf.distribute.Strategy")]),e._v(". If specified, then Estimator will distribute the user's model during training, according to the policy specified by that strategy. Setting "),s("code",[e._v("experimental_distribute.train_distribute")]),e._v(" is preferred.")]),e._v(" "),s("li",[s("code",[e._v("device_fn")]),e._v(": A callable invoked for every "),s("code",[e._v("Operation")]),e._v(" that takes the "),s("code",[e._v("Operation")]),e._v(" and returns the device string. If "),s("code",[e._v("None")]),e._v(", defaults to the device function returned by "),s("code",[e._v("tf.train.replica_device_setter")]),e._v(" with round-robin strategy.")]),e._v(" "),s("li",[s("code",[e._v("protocol")]),e._v(": An optional argument which specifies the "),s("code",[e._v("protocol")]),e._v(" used when starting server. "),s("code",[e._v("None")]),e._v(" means default to grpc.")]),e._v(" "),s("li",[s("code",[e._v("eval_distribute")]),e._v(": An optional instance of "),s("code",[e._v("tf.distribute.Strategy")]),e._v(". If specified, then Estimator will distribute the user's model during evaluation, according to the policy specified by that strategy. Setting "),s("code",[e._v("experimental_distribute.eval_distribute")]),e._v(" is preferred.")]),e._v(" "),s("li",[s("code",[e._v("experimental_distribute")]),e._v(": An optional "),s("code",[e._v("tf.contrib.distribute.DistributeConfig")]),e._v(" object specifying DistributionStrategy-related configuration. The "),s("code",[e._v("train_distribute")]),e._v(" and "),s("code",[e._v("eval_distribute")]),e._v(" can be passed as parameters to "),s("code",[e._v("RunConfig")]),e._v(" or set in "),s("code",[e._v("experimental_distribute")]),e._v(" but not both.")]),e._v(" "),s("li",[s("code",[e._v("experimental_max_worker_delay_secs")]),e._v(": An optional integer specifying the maximum time a worker should wait before starting. By default, workers are started at staggered times, with each worker being delayed by up to 60 seconds. This is intended to reduce the risk of divergence, which can occur when many workers simultaneously update the weights of a randomly initialized model. Users who warm-start their models and train them for short durations (a few minutes or less) should consider reducing this default to improve training times.")]),e._v(" "),s("li",[s("code",[e._v("session_creation_timeout_secs")]),e._v(": Max time workers should wait for a session to become available (on initialization or when recovering a session) with MonitoredTrainingSession. Defaults to 7200 seconds, but users may want to set a lower value to detect problems with variable / session (re)-initialization more quickly.")])]),e._v(" "),s("h4",{attrs:{id:"raises"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ValueError")]),e._v(": If both "),s("code",[e._v("save_checkpoints_steps")]),e._v(" and "),s("code",[e._v("save_checkpoints_secs")]),e._v(" are set.")])]),e._v(" "),s("h2",{attrs:{id:"properties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),s("h3",{attrs:{id:"cluster-spec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cluster-spec","aria-hidden":"true"}},[e._v("#")]),e._v(" cluster_spec")]),e._v(" "),s("h3",{attrs:{id:"device-fn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#device-fn","aria-hidden":"true"}},[e._v("#")]),e._v(" device_fn")]),e._v(" "),s("p",[e._v("Returns the device_fn.")]),e._v(" "),s("p",[e._v("If device_fn is not None, it overrides the default device function used in Estimator. Otherwise the default one is used.")]),e._v(" "),s("h3",{attrs:{id:"eval-distribute"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval-distribute","aria-hidden":"true"}},[e._v("#")]),e._v(" eval_distribute")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/distribute/Strategy",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.distribute.Strategy"),s("OutboundLink")],1),e._v("Optional  for evaluation.")]),e._v(" "),s("h3",{attrs:{id:"evaluation-master"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#evaluation-master","aria-hidden":"true"}},[e._v("#")]),e._v(" evaluation_master")]),e._v(" "),s("h3",{attrs:{id:"experimental-max-worker-delay-secs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#experimental-max-worker-delay-secs","aria-hidden":"true"}},[e._v("#")]),e._v(" experimental_max_worker_delay_secs")]),e._v(" "),s("h3",{attrs:{id:"global-id-in-cluster"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#global-id-in-cluster","aria-hidden":"true"}},[e._v("#")]),e._v(" global_id_in_cluster")]),e._v(" "),s("p",[e._v("The global id in the training cluster.")]),e._v(" "),s("p",[e._v("All global ids in the training cluster are assigned from an increasing sequence of consecutive integers. The first id is 0.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("   cluster = {'chief': ['host0:2222'],\n             'ps': ['host1:2222', 'host2:2222'],\n             'worker': ['host3:2222', 'host4:2222', 'host5:2222']}\n")])])]),s("p",[e._v("Nodes with task type worker can have id 0, 1, 2. Nodes with task type ps can have id, 0, 1. So, task_id is not unique, but the pair (task_type, task_id) can uniquely determine a node in the cluster.")]),e._v(" "),s("p",[e._v("Global id, i.e., this field, is tracking the index of the node among ALL nodes in the cluster. It is uniquely assigned. For example, for the cluster spec given above, the global ids are assigned as:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("   task_type  | task_id  |  global_id\n  --------------------------------\n  chief      | 0        |  0\n  worker     | 0        |  1\n  worker     | 1        |  2\n  worker     | 2        |  3\n  ps         | 0        |  4\n  ps         | 1        |  5\n")])])]),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("An integer id.")]),e._v(" "),s("h3",{attrs:{id:"is-chief"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#is-chief","aria-hidden":"true"}},[e._v("#")]),e._v(" is_chief")]),e._v(" "),s("h3",{attrs:{id:"keep-checkpoint-every-n-hours"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keep-checkpoint-every-n-hours","aria-hidden":"true"}},[e._v("#")]),e._v(" keep_checkpoint_every_n_hours")]),e._v(" "),s("h3",{attrs:{id:"keep-checkpoint-max"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keep-checkpoint-max","aria-hidden":"true"}},[e._v("#")]),e._v(" keep_checkpoint_max")]),e._v(" "),s("h3",{attrs:{id:"log-step-count-steps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#log-step-count-steps","aria-hidden":"true"}},[e._v("#")]),e._v(" log_step_count_steps")]),e._v(" "),s("h3",{attrs:{id:"master"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#master","aria-hidden":"true"}},[e._v("#")]),e._v(" master")]),e._v(" "),s("h3",{attrs:{id:"model-dir"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#model-dir","aria-hidden":"true"}},[e._v("#")]),e._v(" model_dir")]),e._v(" "),s("h3",{attrs:{id:"num-ps-replicas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#num-ps-replicas","aria-hidden":"true"}},[e._v("#")]),e._v(" num_ps_replicas")]),e._v(" "),s("h3",{attrs:{id:"num-worker-replicas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#num-worker-replicas","aria-hidden":"true"}},[e._v("#")]),e._v(" num_worker_replicas")]),e._v(" "),s("h3",{attrs:{id:"protocol"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protocol","aria-hidden":"true"}},[e._v("#")]),e._v(" protocol")]),e._v(" "),s("p",[e._v("Returns the optional protocol value.")]),e._v(" "),s("h3",{attrs:{id:"save-checkpoints-secs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#save-checkpoints-secs","aria-hidden":"true"}},[e._v("#")]),e._v(" save_checkpoints_secs")]),e._v(" "),s("h3",{attrs:{id:"save-checkpoints-steps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#save-checkpoints-steps","aria-hidden":"true"}},[e._v("#")]),e._v(" save_checkpoints_steps")]),e._v(" "),s("h3",{attrs:{id:"save-summary-steps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#save-summary-steps","aria-hidden":"true"}},[e._v("#")]),e._v(" save_summary_steps")]),e._v(" "),s("h3",{attrs:{id:"service"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#service","aria-hidden":"true"}},[e._v("#")]),e._v(" service")]),e._v(" "),s("p",[e._v("Returns the platform defined (in TF_CONFIG) service dict.")]),e._v(" "),s("h3",{attrs:{id:"session-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session-config","aria-hidden":"true"}},[e._v("#")]),e._v(" session_config")]),e._v(" "),s("h3",{attrs:{id:"session-creation-timeout-secs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session-creation-timeout-secs","aria-hidden":"true"}},[e._v("#")]),e._v(" session_creation_timeout_secs")]),e._v(" "),s("h3",{attrs:{id:"task-id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#task-id","aria-hidden":"true"}},[e._v("#")]),e._v(" task_id")]),e._v(" "),s("h3",{attrs:{id:"task-type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#task-type","aria-hidden":"true"}},[e._v("#")]),e._v(" task_type")]),e._v(" "),s("h3",{attrs:{id:"tf-random-seed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tf-random-seed","aria-hidden":"true"}},[e._v("#")]),e._v(" tf_random_seed")]),e._v(" "),s("h3",{attrs:{id:"train-distribute"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#train-distribute","aria-hidden":"true"}},[e._v("#")]),e._v(" train_distribute")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/distribute/Strategy",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.distribute.Strategy"),s("OutboundLink")],1),e._v("Optional  for training.")]),e._v(" "),s("h2",{attrs:{id:"methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),s("h3",{attrs:{id:"replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replace","aria-hidden":"true"}},[e._v("#")]),e._v(" replace")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/run_config.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" replace(**kwargs)\n")])])]),s("p",[e._v("Returns a new instance of RunConfig replacing specified properties.")]),e._v(" "),s("p",[e._v("Only the properties in the following list are allowed to be replaced:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("model_dir")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("tf_random_seed")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("save_summary_steps")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("save_checkpoints_steps")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("save_checkpoints_secs")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("session_config")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("keep_checkpoint_max")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("keep_checkpoint_every_n_hours")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("log_step_count_steps")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("train_distribute")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("device_fn")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("protocol")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("eval_distribute")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("experimental_distribute")]),e._v(",")]),e._v(" "),s("li",[s("code",[e._v("experimental_max_worker_delay_secs")]),e._v(",")])]),e._v(" "),s("p",[e._v("In addition, either save_checkpoints_steps or save_checkpoints_secs can be set (should not be both).")]),e._v(" "),s("h4",{attrs:{id:"args-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("h4",{attrs:{id:"raises-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raises-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ValueError")]),e._v(": If any property name in "),s("code",[e._v("kwargs")]),e._v(" does not exist or is not allowed to be replaced, or both "),s("code",[e._v("save_checkpoints_steps")]),e._v(" and "),s("code",[e._v("save_checkpoints_secs")]),e._v(" are set.")])]),e._v(" "),s("h4",{attrs:{id:"returns-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("a new instance of RunConfig.")])])}),[],!1,null,null,null);t.default=r.exports}}]);