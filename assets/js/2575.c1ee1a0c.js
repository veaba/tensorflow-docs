(window.webpackJsonp=window.webpackJsonp||[]).push([[2575],{2766:function(e,t,n){"use strict";n.r(t);var o=n(0),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Registers a function for converting objects of "),n("code",[e._v("base_type")]),e._v(" to "),n("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"aliases"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("tf.compat.v1.register_tensor_conversion_function")])]),e._v(" "),n("li",[n("code",[e._v("tf.compat.v2.register_tensor_conversion_function")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.register_tensor_conversion_function(\n    base_type,\n    conversion_func,\n    priority=100\n)\n")])])]),n("p",[e._v("The conversion function must have the following signature:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("     def conversion_func(value, dtype=None, name=None, as_ref=False):\n      # ...\n")])])]),n("p",[e._v("It must return a "),n("code",[e._v("Tensor")]),e._v(" with the given "),n("code",[e._v("dtype")]),e._v(" if specified. If the conversion function creates a new "),n("code",[e._v("Tensor")]),e._v(", it should use the given "),n("code",[e._v("name")]),e._v(" if specified. All exceptions will be propagated to the caller.\nThe conversion function may return "),n("code",[e._v("NotImplemented")]),e._v(" for some inputs. In this case, the conversion process will continue to try subsequent conversion functions.\nIf "),n("code",[e._v("as_ref")]),e._v(" is true, the function must return a "),n("code",[e._v("Tensor")]),e._v(" reference, such as a "),n("code",[e._v("Variable")]),e._v(".\nNOTE: The conversion functions will execute in order of priority, followed by order of registration. To ensure that a conversion function "),n("code",[e._v("F")]),e._v(" runs before another conversion function "),n("code",[e._v("G")]),e._v(", ensure that "),n("code",[e._v("F")]),e._v(" is registered with a smaller priority than "),n("code",[e._v("G")]),e._v(".")]),e._v(" "),n("h4",{attrs:{id:"args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("base_type")]),e._v(": The base type or tuple of base types for all objects that "),n("code",[e._v("conversion_func")]),e._v(" accepts.")]),e._v(" "),n("li",[n("code",[e._v("conversion_func")]),e._v(": A function that converts instances of "),n("code",[e._v("base_type")]),e._v(" to "),n("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("priority")]),e._v(": Optional integer that indicates the "),n("code",[e._v("priority")]),e._v(" for applying this conversion function. Conversion functions with smaller "),n("code",[e._v("priority")]),e._v(" values run earlier than conversion functions with larger "),n("code",[e._v("priority")]),e._v(" values. Defaults to 100.")])]),e._v(" "),n("h4",{attrs:{id:"raises"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("TypeError")]),e._v(": If the arguments do not have the appropriate type.")])])])}),[],!1,null,null,null);t.default=r.exports}}]);