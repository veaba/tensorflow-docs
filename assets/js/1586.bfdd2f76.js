(window.webpackJsonp=window.webpackJsonp||[]).push([[1586],{1777:function(e,a,t){"use strict";t.r(a);var s=t(0),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("A context manager for use when defining a Python op.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v2.keras.backend.name_scope")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.keras.backend.name_scope(name)\n")])])]),t("p",[e._v("This context manager pushes a name scope, which will make the name of all operations added within it have a prefix.")]),e._v(" "),t("p",[e._v("For example, to define a new Python op called my_op:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' def my_op(a):\n  with tf.name_scope("MyOp") as scope:\n    a = tf.convert_to_tensor(a, name="a")\n    # Define some computation that uses `a`.\n    return foo_op(..., name=scope)\n')])])]),t("p",[e._v("When executed, the Tensor a will have the name MyOp/a.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("name")]),e._v(": The prefix to use on all "),t("code",[e._v("name")]),e._v("s created within the "),t("code",[e._v("name")]),e._v(" scope.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("Name scope context manager.")])])}),[],!1,null,null,null);a.default=n.exports}}]);