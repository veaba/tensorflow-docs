(window.webpackJsonp=window.webpackJsonp||[]).push([[269],{457:function(e,a,t){"use strict";t.r(a);var v=t(0),_=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Inserts a dimension of 1 into a tensor's shape. (deprecated arguments)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.compat.v1.expand_dims(\n    input,\n    axis=None,\n    name=None,\n    dim=None\n)\n")])])]),t("p",[e._v("Given a tensor input, this operation inserts a dimension of 1 at the dimension index axis of input's shape. The dimension index axis starts at zero; if you specify a negative number for axis it is counted backward from the end.")]),e._v(" "),t("p",[e._v("This operation is useful if you want to add a batch dimension to a single element. For example, if you have a single image of shape [height, width, channels], you can make it a batch of 1 image with expand_dims(image, 0), which will make the shape [1, height, width, channels].")]),e._v(" "),t("h4",{attrs:{id:"other-examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#other-examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Other examples:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" # 't' is a tensor of shape [2]\ntf.shape(tf.expand_dims(t, 0))  # [1, 2]\ntf.shape(tf.expand_dims(t, 1))  # [2, 1]\ntf.shape(tf.expand_dims(t, -1))  # [2, 1]\n\n# 't2' is a tensor of shape [2, 3, 5]\ntf.shape(tf.expand_dims(t2, 0))  # [1, 2, 3, 5]\ntf.shape(tf.expand_dims(t2, 2))  # [2, 3, 1, 5]\ntf.shape(tf.expand_dims(t2, 3))  # [2, 3, 5, 1]\n")])])]),t("p",[e._v("This operation requires that:")]),e._v(" "),t("p",[e._v("-1-input.dims() <= dim <= input.dims()")]),e._v(" "),t("p",[e._v("This operation is related to squeeze(), which removes dimensions of size 1.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("input")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("axis")]),e._v(":"),t("code"),e._v("0"),t("code",[e._v("-")]),e._v("D"),t("code",[e._v("``(")]),e._v("sc"),t("code",[e._v("a")]),e._v("l"),t("code",[e._v("a``r``)")]),e._v("."),t("code"),e._v("S"),t("code",[e._v("p")]),e._v("ec"),t("code",[e._v("i")]),e._v("f"),t("code",[e._v("i")]),e._v("es"),t("code",[e._v("``t")]),e._v("he"),t("code"),e._v("d"),t("code",[e._v("i")]),e._v("me"),t("code",[e._v("n")]),e._v("s"),t("code",[e._v("i")]),e._v("o"),t("code",[e._v("n`` ``i``n")]),e._v("dex"),t("code",[e._v("``a``t``")]),e._v("wh"),t("code",[e._v("i")]),e._v("ch"),t("code",[e._v("``t")]),e._v("o"),t("code"),e._v("ex"),t("code",[e._v("p``a``n")]),e._v("d"),t("code",[e._v("``t")]),e._v("he"),t("code"),e._v("sh"),t("code",[e._v("a``p")]),e._v("e"),t("code"),e._v("of"),t("code",[e._v("``input")]),e._v("."),t("code"),e._v("M"),t("code",[e._v("u")]),e._v("s"),t("code",[e._v("t``")]),e._v("be"),t("code",[e._v("``i``n`` ``t")]),e._v("he"),t("code",[e._v("``r``a``n")]),e._v("ge"),t("code"),e._v("["),t("code",[e._v("-``r``a``n``k``(``input``)`` ``-`` ``1``,`` ``r``a``n``k``(``input``)")]),e._v("].")]),e._v(" "),t("li",[t("code",[e._v("n``a")]),e._v("me:"),t("code"),e._v("The"),t("code",[e._v("``n``a")]),e._v("me"),t("code"),e._v("of"),t("code",[e._v("``t")]),e._v("he"),t("code"),e._v("o"),t("code",[e._v("u``t``p``u``t`` ``Tensor`` ``(")]),e._v("o"),t("code",[e._v("p``t``i")]),e._v("o"),t("code",[e._v("n``a")]),e._v("l"),t("code",[e._v(")")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("dim")]),e._v(":"),t("code"),e._v("0"),t("code",[e._v("-")]),e._v("D"),t("code",[e._v("``(")]),e._v("sc"),t("code",[e._v("a")]),e._v("l"),t("code",[e._v("a``r``)")]),e._v("."),t("code"),e._v("Eq"),t("code",[e._v("u``i")]),e._v("v"),t("code",[e._v("a")]),e._v("le"),t("code",[e._v("n``t`` ``t")]),e._v("o"),t("code",[e._v("``axis``,`` ``t")]),e._v("o"),t("code"),e._v("be"),t("code"),e._v("de"),t("code",[e._v("p``r")]),e._v("ec"),t("code",[e._v("a``t")]),e._v("ed.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A Tensor with the same data as input, but its shape has an additional dimension of size 1 added.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": if either both or neither of "),t("code",[e._v("dim")]),e._v(" and "),t("code",[e._v("axis")]),e._v(" are specified.")])])])}),[],!1,null,null,null);a.default=_.exports}}]);