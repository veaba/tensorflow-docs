(window.webpackJsonp=window.webpackJsonp||[]).push([[764],{952:function(e,t,s){"use strict";s.r(t);var a=s(0),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Reduces sparse updates into a variable reference using the min operation.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.compat.v1.scatter_min(\n    ref,\n    indices,\n    updates,\n    use_locking=False,\n    name=None\n)\n")])])]),s("p",[e._v("This operation computes")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" # Scalar indices\nref[indices, ...] = min(ref[indices, ...], updates[...])\n\n# Vector indices (for each i)\nref[indices[i], ...] = min(ref[indices[i], ...], updates[i, ...])\n\n# High rank indices (for each i, ..., j)\nref[indices[i, ..., j], ...] = min(ref[indices[i, ..., j], ...],\nupdates[i, ..., j, ...])\n")])])]),s("p",[e._v("This operation outputs ref after the update is done. This makes it easier to chain operations that need to use the reset value.")]),e._v(" "),s("p",[e._v("Duplicate entries are handled correctly: if multiple indices reference the same location, their contributions combine.")]),e._v(" "),s("p",[e._v("Requires updates.shape = indices.shape + ref.shape[1:] or updates.shape = [].")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ref")]),e._v(": A mutable "),s("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),s("code",[e._v("half")]),e._v(", "),s("code",[e._v("bfloat16")]),e._v(", "),s("code",[e._v("float32")]),e._v(", "),s("code",[e._v("float64")]),e._v(", "),s("code",[e._v("int32")]),e._v(", "),s("code",[e._v("int64")]),e._v(". Should be from a "),s("code",[e._v("Variable")]),e._v(" node.")]),e._v(" "),s("li",[s("code",[e._v("indices")]),e._v(": A "),s("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),s("code",[e._v("int32")]),e._v(", "),s("code",[e._v("int64")]),e._v(". A tensor of "),s("code",[e._v("indices")]),e._v(" into the first dimension of "),s("code",[e._v("ref")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("updates")]),e._v(": A "),s("code",[e._v("Tensor")]),e._v(". Must have the same type as "),s("code",[e._v("ref")]),e._v(". A tensor of updated values to reduce into "),s("code",[e._v("ref")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("use_locking")]),e._v(": An optional "),s("code",[e._v("bool")]),e._v(". Defaults to "),s("code",[e._v("False")]),e._v(". If True, the update will be protected by a lock; otherwise the behavior is undefined, but may exhibit less contention.")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(": A "),s("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A mutable Tensor. Has the same type as ref.")])])}),[],!1,null,null,null);t.default=i.exports}}]);