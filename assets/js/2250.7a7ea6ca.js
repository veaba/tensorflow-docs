(window.webpackJsonp=window.webpackJsonp||[]).push([[2250],{2438:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Returns the frequency-weighted mean and variance of x.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v2.nn.weighted_moments")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.nn.weighted_moments(\n    x,\n    axes,\n    frequency_weights,\n    keepdims=False,\n    name=None\n)\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("x")]),e._v(": A tensor.")]),e._v(" "),a("li",[a("code",[e._v("axes")]),e._v(": 1-d tensor of int32 values; these are the "),a("code",[e._v("axes")]),e._v(" along which to compute mean and variance.")]),e._v(" "),a("li",[a("code",[e._v("frequency_weights")]),e._v(": A tensor of positive weights which can be broadcast with "),a("code",[e._v("x")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("keepdims")]),e._v(": Produce moments with the same dimensionality as the input.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": Name used to scope the operation.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Two tensors: weighted_mean and weighted_variance.")])])}),[],!1,null,null,null);t.default=n.exports}}]);