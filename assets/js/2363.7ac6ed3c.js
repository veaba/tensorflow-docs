(window.webpackJsonp=window.webpackJsonp||[]).push([[2363],{2551:function(e,s,a){"use strict";a.r(s);var t=a(0),r=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Transposes a SparseTensor")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.sparse.transpose")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v1.sparse_transpose")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.sparse.transpose")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.sparse.transpose(\n    sp_input,\n    perm=None,\n    name=None\n)\n")])])]),a("p",[e._v("The returned tensor's dimension i will correspond to the input dimension perm[i]. If perm is not given, it is set to (n-1...0), where n is the rank of the input tensor. Hence by default, this operation performs a regular matrix transpose on 2-D input Tensors.")]),e._v(" "),a("p",[e._v("For example, if sp_input has shape [4, 5] and indices / values:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" [0, 3]: b\n[0, 1]: a\n[3, 1]: d\n[2, 0]: c\n")])])]),a("p",[e._v("then the output will be a SparseTensor of shape [5, 4] and indices / values:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" [0, 2]: c\n[1, 0]: a\n[1, 3]: d\n[3, 0]: b\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("sp_input")]),e._v(": The input "),a("code",[e._v("SparseTensor")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("perm")]),e._v(": A "),a("code",[e._v("perm")]),e._v("utation of the dimensions of "),a("code",[e._v("sp_input")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" prefix for the returned tensors (optional)")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A transposed SparseTensor.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TypeError")]),e._v(": If "),a("code",[e._v("sp_input")]),e._v(" is not a "),a("code",[e._v("SparseTensor")]),e._v(".")])])])}),[],!1,null,null,null);s.default=r.exports}}]);