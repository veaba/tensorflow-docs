(window.webpackJsonp=window.webpackJsonp||[]).push([[1186],{1375:function(e,t,r){"use strict";r.r(t);var s=r(0),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"class-simpleclusterresolver"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#class-simpleclusterresolver","aria-hidden":"true"}},[e._v("#")]),e._v(" Class SimpleClusterResolver")]),e._v(" "),r("p",[e._v("Simple implementation of ClusterResolver that accepts a ClusterSpec.\n"),r("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/distribute/cluster_resolver/ClusterResolver",target:"_blank",rel:"noopener noreferrer"}},[e._v("ClusterResolver"),r("OutboundLink")],1),e._v("Inherits From:")]),e._v(" "),r("h3",{attrs:{id:"aliases"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),r("ul",[r("li",[e._v("Class "),r("code",[e._v("tf.compat.v1.distribute.cluster_resolver.SimpleClusterResolver")])]),e._v(" "),r("li",[e._v("Class "),r("code",[e._v("tf.compat.v2.distribute.cluster_resolver.SimpleClusterResolver")])])]),e._v(" "),r("h2",{attrs:{id:"init"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),r("strong",[e._v("init")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/cluster_resolver.py#L185-L204",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" __init__(\n    cluster_spec,\n    master='',\n    task_type=None,\n    task_id=None,\n    environment='',\n    num_accelerators=None,\n    rpc_layer=None\n)\n")])])]),r("p",[e._v("Creates a SimpleClusterResolver from a ClusterSpec.")]),e._v(" "),r("h2",{attrs:{id:"properties"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),r("h3",{attrs:{id:"environment"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#environment","aria-hidden":"true"}},[e._v("#")]),e._v(" environment")]),e._v(" "),r("p",[e._v("Returns the current environment which TensorFlow is running in.")]),e._v(" "),r("p",[e._v('There are two possible return values, "google" (when TensorFlow is running in a Google-internal environment) or an empty string (when TensorFlow is running elsewhere).')]),e._v(" "),r("p",[e._v("If you are implementing a ClusterResolver that works in both the Google environment and the open-source world (for instance, a TPU ClusterResolver or similar), you will have to return the appropriate string depending on the environment, which you will have to detect.")]),e._v(" "),r("p",[e._v("Otherwise, if you are implementing a ClusterResolver that will only work in open-source TensorFlow, you do not need to implement this property.")]),e._v(" "),r("h3",{attrs:{id:"rpc-layer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rpc-layer","aria-hidden":"true"}},[e._v("#")]),e._v(" rpc_layer")]),e._v(" "),r("h3",{attrs:{id:"task-id"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#task-id","aria-hidden":"true"}},[e._v("#")]),e._v(" task_id")]),e._v(" "),r("h3",{attrs:{id:"task-type"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#task-type","aria-hidden":"true"}},[e._v("#")]),e._v(" task_type")]),e._v(" "),r("h2",{attrs:{id:"methods"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),r("h3",{attrs:{id:"cluster-spec"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cluster-spec","aria-hidden":"true"}},[e._v("#")]),e._v(" cluster_spec")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/cluster_resolver.py#L206-L208",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" cluster_spec()\n")])])]),r("p",[e._v("Returns the ClusterSpec passed into the constructor.")]),e._v(" "),r("h3",{attrs:{id:"master"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#master","aria-hidden":"true"}},[e._v("#")]),e._v(" master")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/cluster_resolver.py#L210-L229",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" master(\n    task_type=None,\n    task_id=None,\n    rpc_layer=None\n)\n")])])]),r("p",[e._v("Returns the master address to use when creating a session.")]),e._v(" "),r("h4",{attrs:{id:"args"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("task_type")]),e._v(": (Optional) The type of the TensorFlow task of the master.")]),e._v(" "),r("li",[r("code",[e._v("task_id")]),e._v(": (Optional) The index of the TensorFlow task of the master.")]),e._v(" "),r("li",[r("code",[e._v("rpc_layer")]),e._v(": (Optional) The RPC used by distributed TensorFlow.")])]),e._v(" "),r("h4",{attrs:{id:"returns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("The name or URL of the session master.")]),e._v(" "),r("p",[e._v("If a task_type and task_id is given, this will override the master string passed into the initialization function.")]),e._v(" "),r("h3",{attrs:{id:"num-accelerators"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#num-accelerators","aria-hidden":"true"}},[e._v("#")]),e._v(" num_accelerators")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/cluster_resolver.py#L251-L271",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" num_accelerators(\n    task_type=None,\n    task_id=None,\n    config_proto=None\n)\n")])])]),r("p",[e._v("Returns the number of accelerator cores per worker.")]),e._v(" "),r("p",[e._v("The SimpleClusterResolver does not do automatic detection of accelerators, so a TensorFlow session will never be created, and thus all arguments are unused and we simply assume that the type of accelerator is a GPU and return the value in provided to us in the constructor.")]),e._v(" "),r("h4",{attrs:{id:"args-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("task_type")]),e._v(": Unused.")]),e._v(" "),r("li",[r("code",[e._v("task_id")]),e._v(": Unused.")]),e._v(" "),r("li",[r("code",[e._v("config_proto")]),e._v(": Unused.")])])])}),[],!1,null,null,null);t.default=a.exports}}]);