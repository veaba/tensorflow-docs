(window.webpackJsonp=window.webpackJsonp||[]).push([[1866],{2057:function(e,t,s){"use strict";s.r(t);var a=s(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"class-precision"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-precision","aria-hidden":"true"}},[e._v("#")]),e._v(" Class Precision")]),e._v(" "),s("p",[e._v("Computes the precision of the predictions with respect to the labels.\n"),s("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/keras/metrics/Metric",target:"_blank",rel:"noopener noreferrer"}},[e._v("Metric"),s("OutboundLink")],1),e._v("Inherits From:")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[e._v("Class "),s("code",[e._v("tf.compat.v1.keras.metrics.Precision")])]),e._v(" "),s("li",[e._v("Class "),s("code",[e._v("tf.compat.v2.keras.metrics.Precision")])]),e._v(" "),s("li",[e._v("Class "),s("code",[e._v("tf.compat.v2.metrics.Precision")])]),e._v(" "),s("li",[e._v("Class "),s("code",[e._v("tf.metrics.Precision")])])]),e._v(" "),s("h3",{attrs:{id:"used-in-the-tutorials"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("C")]),e._v("l"),s("code",[e._v("a")]),e._v("s"),s("code",[e._v("s")]),e._v("i"),s("code",[e._v("f")]),e._v("i"),s("code",[e._v("c")]),e._v("a"),s("code",[e._v("t")]),e._v("i"),s("code",[e._v("o")]),e._v("n"),s("code"),e._v("o"),s("code",[e._v("n")]),e._v(" "),s("code",[e._v("i")]),e._v("m"),s("code",[e._v("b")]),e._v("a"),s("code",[e._v("l")]),e._v("a"),s("code",[e._v("n")]),e._v("c"),s("code",[e._v("e")]),e._v("d"),s("code"),e._v("d"),s("code",[e._v("a")]),e._v("t"),s("code",[e._v("a")])])]),e._v(" "),s("p",[e._v("For example, if y_true is [0, 1, 1, 1] and y_pred is [1, 0, 1, 1] then the precision value is 2/(2+1) ie. 0.66. If the weights were specified as [0, 0, 1, 0] then the precision value would be 1.")]),e._v(" "),s("p",[e._v("The metric creates two local variables, true_positives and false_positives that are used to compute the precision. This value is ultimately returned as precision, an idempotent operation that simply divides true_positives by the sum of true_positives and false_positives.")]),e._v(" "),s("p",[e._v("If sample_weight is None, weights default to 1. Use sample_weight of 0 to mask values.")]),e._v(" "),s("p",[e._v("If top_k is set, we'll calculate precision as how often on average a class among the top-k classes with the highest predicted values of a batch entry is correct and can be found in the label for that entry.")]),e._v(" "),s("p",[e._v("If class_id is specified, we calculate precision by considering only the entries in the batch for which class_id is above the threshold and/or in the top-k highest predictions, and computing the fraction of them for which class_id is indeed a correct label.")]),e._v(" "),s("h4",{attrs:{id:"usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usage","aria-hidden":"true"}},[e._v("#")]),e._v(" Usage:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" m = tf.keras.metrics.Precision()\nm.update_state([0, 1, 1, 1], [1, 0, 1, 1])\nprint('Final result: ', m.result().numpy())  # Final result: 0.66\n")])])]),s("p",[e._v("Usage with tf.keras API:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" model = tf.keras.Model(inputs, outputs)\nmodel.compile('sgd', loss='mse', metrics=[tf.keras.metrics.Precision()])\n")])])]),s("h2",{attrs:{id:"init"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),s("strong",[e._v("init")])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/metrics.py#L1144-L1182",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" __init__(\n    thresholds=None,\n    top_k=None,\n    class_id=None,\n    name=None,\n    dtype=None\n)\n")])])]),s("p",[e._v("Creates a Precision instance.")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("thresholds")]),e._v(": (Optional) A float value or a python list/tuple of float threshold values in [0, 1]. A threshold is compared with prediction values to determine the truth value of predictions (i.e., above the threshold is "),s("code",[e._v("true")]),e._v(", below is "),s("code",[e._v("false")]),e._v("). One metric value is generated for each threshold value. If neither "),s("code",[e._v("thresholds")]),e._v(" nor top_k are set, the default is to calculate precision with "),s("code",[e._v("thresholds")]),e._v("=0.5.")]),e._v(" "),s("li",[s("code",[e._v("top_k")]),e._v(": (Optional) Unset by default. An int value specifying the top-k predictions to consider when calculating precision.")])]),e._v(" "),s("h2",{attrs:{id:"new"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new","aria-hidden":"true"}},[e._v("#")]),e._v(" "),s("strong",[e._v("new")])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/metrics.py#L144-L160",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" __new__(\n    cls,\n    *args,\n    **kwargs\n)\n")])])]),s("p",[e._v("Create and return a new object. See help(type) for accurate signature.")]),e._v(" "),s("h2",{attrs:{id:"methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),s("h3",{attrs:{id:"reset-states"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reset-states","aria-hidden":"true"}},[e._v("#")]),e._v(" reset_states")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/metrics.py#L1215-L1218",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" reset_states()\n")])])]),s("p",[e._v("Resets all of the metric state variables.")]),e._v(" "),s("p",[e._v("This function is called between epochs/steps, when a metric is evaluated during training.")]),e._v(" "),s("h3",{attrs:{id:"result"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#result","aria-hidden":"true"}},[e._v("#")]),e._v(" result")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/metrics.py#L1210-L1213",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" result()\n")])])]),s("p",[e._v("Computes and returns the metric value tensor.")]),e._v(" "),s("p",[e._v("Result computation is an idempotent operation that simply calculates the metric value using the state variables.")]),e._v(" "),s("h3",{attrs:{id:"update-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update-state","aria-hidden":"true"}},[e._v("#")]),e._v(" update_state")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/metrics.py#L1184-L1208",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" update_state(\n    y_true,\n    y_pred,\n    sample_weight=None\n)\n")])])]),s("p",[e._v("Accumulates true positive and false positive statistics.")]),e._v(" "),s("h4",{attrs:{id:"args-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("y_true")]),e._v(": The ground truth values, with the same dimensions as "),s("code",[e._v("y_pred")]),e._v(". Will be cast to "),s("code",[e._v("bool")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("y_pred")]),e._v(":"),s("code"),e._v("The"),s("code"),e._v("predicted"),s("code"),e._v("values."),s("code"),e._v("Each"),s("code"),e._v("element"),s("code"),e._v("must"),s("code"),e._v("be"),s("code"),e._v("in"),s("code"),e._v("the"),s("code"),e._v("range"),s("code"),e._v("["),s("code",[e._v("0``,`` ``1")]),e._v("].")]),e._v(" "),s("li",[s("code",[e._v("sample_weight")]),e._v(":"),s("code"),e._v("Optional"),s("code"),e._v("weighting"),s("code"),e._v("of"),s("code"),e._v("each"),s("code"),e._v("example."),s("code"),e._v("Defaults"),s("code"),e._v("to"),s("code",[e._v("``1")]),e._v("."),s("code"),e._v("Can"),s("code"),e._v("be"),s("code"),e._v("a"),s("code",[e._v("``Tensor``")]),e._v("whose"),s("code"),e._v("rank"),s("code"),e._v("is"),s("code"),e._v("either"),s("code",[e._v("``0``,``")]),e._v("or"),s("code"),e._v("the"),s("code"),e._v("same"),s("code"),e._v("rank"),s("code"),e._v("as"),s("code",[e._v("``y_true``,``")]),e._v("and"),s("code"),e._v("must"),s("code"),e._v("be"),s("code"),e._v("broadcastable"),s("code"),e._v("to"),s("code",[e._v("``y_true")]),e._v(".")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("Update op.")])])}),[],!1,null,null,null);t.default=r.exports}}]);