(window.webpackJsonp=window.webpackJsonp||[]).push([[2527],{2718:function(e,t,a){"use strict";a.r(t);var v=a(0),s=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Creates a tensor filled with a scalar value.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.fill")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.fill")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.fill(\n    dims,\n    value,\n    name=None\n)\n")])])]),a("h3",{attrs:{id:"used-in-the-guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("R")]),e._v("a"),a("code",[e._v("g")]),e._v("g"),a("code",[e._v("e")]),e._v("d"),a("code"),e._v("t"),a("code",[e._v("e")]),e._v("n"),a("code",[e._v("s")]),e._v("o"),a("code",[e._v("r")]),e._v("s``")]),e._v(" "),a("li",[a("code",[e._v("t")]),e._v("f"),a("code",[e._v(".")]),e._v("d"),a("code",[e._v("a")]),e._v("t"),a("code",[e._v("a")]),e._v(":"),a("code"),e._v("B"),a("code",[e._v("u")]),e._v("i"),a("code",[e._v("l")]),e._v("d"),a("code"),e._v("T"),a("code",[e._v("e")]),e._v("n"),a("code",[e._v("s")]),e._v("o"),a("code",[e._v("r")]),e._v("F"),a("code",[e._v("l")]),e._v("o"),a("code",[e._v("w")]),e._v(" "),a("code",[e._v("i")]),e._v("n"),a("code",[e._v("p")]),e._v("u"),a("code",[e._v("t")]),e._v(" "),a("code",[e._v("p")]),e._v("i"),a("code",[e._v("p")]),e._v("e"),a("code",[e._v("l")]),e._v("i"),a("code",[e._v("n")]),e._v("e"),a("code",[e._v("s")])])]),e._v(" "),a("h3",{attrs:{id:"used-in-the-tutorials"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("U")]),e._v("n"),a("code",[e._v("i")]),e._v("c"),a("code",[e._v("o")]),e._v("d"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("s")]),e._v("t"),a("code",[e._v("r")]),e._v("i"),a("code",[e._v("n")]),e._v("g"),a("code",[e._v("s")]),e._v("\nThis operation creates a tensor of shape "),a("code",[e._v("dims")]),e._v(" and fills it with "),a("code",[e._v("value")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"for-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" # Output tensor has shape [2, 3].\nfill([2, 3], 9) ==> [[9, 9, 9]\n                     [9, 9, 9]]\n")])])]),a("p",[a("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/fill",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.fill"),a("OutboundLink")],1),e._v(" differs from tf.constant in a few ways:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.fill")]),e._v(" only supports scalar contents, whereas "),a("code",[e._v("tf.constant")]),e._v(" supports Tensor values.")]),e._v(" "),a("li",[a("code",[e._v("tf.fill")]),e._v(" creates an Op in the computation graph that constructs the actual Tensor value at runtime. This is in contrast to "),a("code",[e._v("tf.constant")]),e._v(" which embeds the entire Tensor into the graph with a "),a("code",[e._v("Const")]),e._v(" node.")]),e._v(" "),a("li",[e._v("Because "),a("code",[e._v("tf.fill")]),e._v(" evaluates at graph runtime, it supports dynamic shapes based on other runtime Tensors, unlike "),a("code",[e._v("tf.constant")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("dims")]),e._v(": A "),a("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),a("code",[e._v("int32")]),e._v(", "),a("code",[e._v("int64")]),e._v(". 1-D. Represents the shape of the output tensor.")]),e._v(" "),a("li",[a("code",[e._v("value")]),e._v(": A "),a("code",[e._v("Tensor")]),e._v(". 0-D (scalar). Value to fill the returned tensor. @compatibility(numpy) Equivalent to np.full @end_compatibility")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A "),a("code",[e._v("Tensor")]),e._v(". Has the same type as "),a("code",[e._v("value")]),e._v(".")])])}),[],!1,null,null,null);t.default=s.exports}}]);