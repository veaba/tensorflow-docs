(window.webpackJsonp=window.webpackJsonp||[]).push([[639],{827:function(e,s,t){"use strict";t.r(s);var i=t(0),r=Object(i.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Computes embeddings for the given ids and weights.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.compat.v1.nn.embedding_lookup_sparse(\n    params,\n    sp_ids,\n    sp_weights,\n    partition_strategy='mod',\n    name=None,\n    combiner=None,\n    max_norm=None\n)\n")])])]),t("p",[e._v("This op assumes that there is at least one id for each row in the dense tensor represented by sp_ids (i.e. there are no rows with empty features), and that all the indices of sp_ids are in canonical row-major order.")]),e._v(" "),t("p",[e._v("It also assumes that all id values lie in the range [0, p0), where p0 is the sum of the size of params along dimension 0.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("params")]),e._v(": A single tensor representing the complete embedding tensor, or a list of P tensors all of same shape except for the first dimension, representing sharded embedding tensors. Alternatively, a "),t("code",[e._v("PartitionedVariable")]),e._v(", created by partitioning along dimension 0. Each element must be appropriately sized for the given "),t("code",[e._v("partition_strategy")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("sp_ids")]),e._v(": N x M "),t("code",[e._v("SparseTensor")]),e._v(" of int64 ids where N is typically batch size and M is arbitrary.")]),e._v(" "),t("li",[t("code",[e._v("sp_weights")]),e._v(": either a "),t("code",[e._v("SparseTensor")]),e._v(" of float / double weights, or "),t("code",[e._v("None")]),e._v(" to indicate all weights should be taken to be 1. If specified, "),t("code",[e._v("sp_weights")]),e._v(" must have exactly the same shape and indices as "),t("code",[e._v("sp_ids")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("partition_strategy")]),e._v(": A string specifying the partitioning strategy, relevant if len("),t("code",[e._v("params")]),e._v(") > 1. Currently "),t("code",[e._v('"div"')]),e._v(" and "),t("code",[e._v('"mod"')]),e._v(" are supported. Default is "),t("code",[e._v('"mod"')]),e._v(". See "),t("code",[e._v("tf.nn.embedding_lookup")]),e._v(" for more details.")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": Optional "),t("code",[e._v("name")]),e._v(" for the op.")]),e._v(" "),t("li",[t("code",[e._v("combiner")]),e._v(': A string specifying the reduction op. Currently "mean", "sqrtn" and "sum" are supported. "sum" computes the weighted sum of the embedding results for each row. "mean" is the weighted sum divided by the total weight. "sqrtn" is the weighted sum divided by the square root of the sum of the squares of the weights.')]),e._v(" "),t("li",[t("code",[e._v("max_norm")]),e._v(": If not "),t("code",[e._v("None")]),e._v(", each embedding is clipped if its l2-norm is larger than this value, before combining.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A dense tensor representing the combined embeddings for the sparse ids. For each row in the dense tensor represented by sp_ids, the op looks up the embeddings for all ids in that row, multiplies them by the corresponding weight, and combines these embeddings as specified.")]),e._v(" "),t("p",[e._v("In other words, if")]),e._v(" "),t("p",[e._v("shape(combined params) = [p0, p1, ..., pm]")]),e._v(" "),t("p",[e._v("and")]),e._v(" "),t("p",[e._v("shape(sp_ids) = shape(sp_weights) = [d0, d1, ..., dn]")]),e._v(" "),t("p",[e._v("then")]),e._v(" "),t("p",[e._v("shape(output) = [d0, d1, ..., dn-1, p1, ..., pm].")]),e._v(" "),t("p",[e._v("For instance, if params is a 10x20 matrix, and sp_ids / sp_weights are")]),e._v(" "),t("p",[e._v('with combiner="mean", then the output will be a 3x20 matrix where')]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("TypeError")]),e._v(": If "),t("code",[e._v("sp_ids")]),e._v(" is not a "),t("code",[e._v("SparseTensor")]),e._v(", or if "),t("code",[e._v("sp_weights")]),e._v(" is neither "),t("code",[e._v("None")]),e._v(" nor "),t("code",[e._v("SparseTensor")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("ValueError")]),e._v(": If "),t("code",[e._v("combiner")]),e._v(' is not one of {"mean", "sqrtn", "sum"}.')])])])}),[],!1,null,null,null);s.default=r.exports}}]);