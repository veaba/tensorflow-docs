(window.webpackJsonp=window.webpackJsonp||[]).push([[339],{526:function(t,r,a){"use strict";a.r(r);var e=a(0),o=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Base TFDecorator class and utility functions for working with decorators.")]),t._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[t._v("#")]),t._v(" Aliases:")]),t._v(" "),a("ul",[a("li",[t._v("Module "),a("code",[t._v("tf.compat.v1.app.flags.tf_decorator")])])]),t._v(" "),a("p",[t._v("There are two ways to create decorators that TensorFlow can introspect into. This is important for documentation generation purposes, so that function signatures aren't obscured by the (*args, **kwds) signature that decorators often provide.")]),t._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[t._v("#")]),t._v(" Example:")]),t._v(" "),a("p",[t._v("def print_hello_before_calling(target): def wrapper(*args, *kwargs): print('hello') return target(args, **kwargs) return tf_decorator.make_decorator(target, wrapper)")]),t._v(" "),a("h4",{attrs:{id:"example-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-2","aria-hidden":"true"}},[t._v("#")]),t._v(" Example:")]),t._v(" "),a("p",[t._v("class CallCounter(tf_decorator.TFDecorator): def init(self, target): super(CallCounter, self).init('count_calls', target) self.call_count = 0")]),t._v(" "),a("p",[t._v("def call(self, *args, *kwargs): self.call_count += 1 return super(CallCounter, self).decorated_target(args, **kwargs)")]),t._v(" "),a("p",[t._v("def count_calls(target): return CallCounter(target)")]),t._v(" "),a("h2",{attrs:{id:"modules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#modules","aria-hidden":"true"}},[t._v("#")]),t._v(" Modules")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/flags/tf_decorator/tf_stack",target:"_blank",rel:"noopener noreferrer"}},[t._v("tf_stack"),a("OutboundLink")],1),t._v(" module: Functions used to extract and analyze stacks. Faster than Python libs.")]),t._v(" "),a("h2",{attrs:{id:"classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#classes","aria-hidden":"true"}},[t._v("#")]),t._v(" Classes")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/flags/tf_decorator/TFDecorator",target:"_blank",rel:"noopener noreferrer"}},[t._v("class TFDecorator"),a("OutboundLink")],1),t._v(": Base class for all TensorFlow decorators.")]),t._v(" "),a("h2",{attrs:{id:"functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions","aria-hidden":"true"}},[t._v("#")]),t._v(" Functions")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/flags/tf_decorator/make_decorator",target:"_blank",rel:"noopener noreferrer"}},[t._v("make_decorator(...)"),a("OutboundLink")],1),t._v(": Make a decorator from a wrapper and a target.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/flags/tf_decorator/rewrap",target:"_blank",rel:"noopener noreferrer"}},[t._v("rewrap(...)"),a("OutboundLink")],1),t._v(": Injects a new target into a function built by make_decorator.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/flags/tf_decorator/unwrap",target:"_blank",rel:"noopener noreferrer"}},[t._v("unwrap(...)"),a("OutboundLink")],1),t._v(": Unwraps an object into a list of TFDecorators and a final target.")])])}),[],!1,null,null,null);r.default=o.exports}}]);