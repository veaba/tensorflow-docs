(window.webpackJsonp=window.webpackJsonp||[]).push([[2615],{2806:function(e,t,a){"use strict";a.r(t);var o=a(0),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Repeat "),a("code",[e._v("body")]),e._v(" while the "),a("code",[e._v("cond")]),e._v("ition "),a("code",[e._v("cond")]),e._v(" is true.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v2.while_loop")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.while_loop(\n    cond,\n    body,\n    loop_vars,\n    shape_invariants=None,\n    parallel_iterations=10,\n    back_prop=True,\n    swap_memory=False,\n    maximum_iterations=None,\n    name=None\n)\n")])])]),a("p",[a("code",[e._v("cond")]),e._v(" is a callable returning a boolean scalar tensor. "),a("code",[e._v("body")]),e._v(" is a callable returning a (possibly nested) tuple, namedtuple or list of tensors of the same arity (length and structure) and types as "),a("code",[e._v("loop_vars")]),e._v(". "),a("code",[e._v("loop_vars")]),e._v(" is a (possibly nested) tuple, namedtuple or list of tensors that is passed to both "),a("code",[e._v("cond")]),e._v(" and "),a("code",[e._v("body")]),e._v(". "),a("code",[e._v("cond")]),e._v(" and "),a("code",[e._v("body")]),e._v(" both take as many arguments as there are "),a("code",[e._v("loop_vars")]),e._v(".\nIn addition to regular Tensors or IndexedSlices, the body may accept and return TensorArray objects. The flows of the TensorArray objects will be appropriately forwarded between loops and during gradient calculations.\nNote that "),a("code",[e._v("while_loop")]),e._v(" calls "),a("code",[e._v("cond")]),e._v(" and "),a("code",[e._v("body")]),e._v(" exactly once (inside the call to "),a("code",[e._v("while_loop")]),e._v(", and not at all during "),a("code",[e._v("Session.run")]),e._v("()). "),a("code",[e._v("while_loop")]),e._v(" stitches together the graph fragments created during the "),a("code",[e._v("cond")]),e._v(" and "),a("code",[e._v("body")]),e._v(" calls with some additional graph nodes to create the graph flow that repeats "),a("code",[e._v("body")]),e._v(" until "),a("code",[e._v("cond")]),e._v(" returns false.\n"),a("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/while_loop",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.while_loop()"),a("OutboundLink")],1),e._v("For correctness,  strictly enforces shape invariants for the loop variables. A shape invariant is a (possibly partial) shape that is unchanged across the iterations of the loop. An error will be raised if the shape of a loop variable after an iteration is determined to be more general than or incompatible with its shape invariant. For example, a shape of [11, None] is more general than a shape of [11, 17], and [11, 21] is not compatible with [11, 17]. By default (if the argument shape_invariants is not specified), it is assumed that the initial shape of each tensor in loop_vars is the same in every iteration. The shape_invariants argument allows the caller to specify a less specific shape invariant for each loop variable, which is needed if the shape varies between iterations. The tf.Tensor.set_shape function may also be used in the body function to indicate that the output loop variable has a particular shape. The shape invariant for SparseTensor and IndexedSlices are treated specially as follows:")]),e._v(" "),a("p",[e._v("a) If a loop variable is a SparseTensor, the shape invariant must be TensorShape([r]) where r is the rank of the dense tensor represented by the sparse tensor. It means the shapes of the three tensors of the SparseTensor are ([None], [None, r], [r]). NOTE: The shape invariant here is the shape of the SparseTensor.dense_shape property. It must be the shape of a vector.\nb) If a loop variable is an IndexedSlices, the shape invariant must be a shape invariant of the values tensor of the IndexedSlices. It means the shapes of the three tensors of the IndexedSlices are (shape, [shape[0]], [shape.ndims]).\n"),a("code",[e._v("while_loop")]),e._v(" implements non-strict semantics, enabling multiple iterations to run in parallel. The maximum number of parallel iterations can be controlled by "),a("code",[e._v("parallel_iterations")]),e._v(", which gives users some control over memory consumption and execution order. For correct programs, "),a("code",[e._v("while_loop")]),e._v(" should return the same result for any "),a("code",[e._v("parallel_iterations")]),e._v(" > 0.\nFor training, TensorFlow stores the tensors that are produced in the forward inference and are needed in back propagation. These tensors are a main source of memory consumption and often cause OOM errors when training on GPUs. When the flag swap_memory is true, we swap out these tensors from GPU to CPU. This for example allows us to train RNN models with very long sequences and large batches.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("cond")]),e._v(": A callable that represents the termination "),a("code",[e._v("cond")]),e._v("ition of the loop.")]),e._v(" "),a("li",[a("code",[e._v("body")]),e._v(": A callable that represents the loop "),a("code",[e._v("body")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("loop_vars")]),e._v(": A (possibly nested) tuple, namedtuple or list of numpy array, "),a("code",[e._v("Tensor")]),e._v(", and "),a("code",[e._v("Tensor")]),e._v("Array objects.")]),e._v(" "),a("li",[a("code",[e._v("shape_invariants")]),e._v(": The shape invariants for the loop variables.")]),e._v(" "),a("li",[a("code",[e._v("parallel_iterations")]),e._v(": The number of iterations allowed to run in parallel. It must be a positive integer.")]),e._v(" "),a("li",[a("code",[e._v("back_prop")]),e._v(": Whether backprop is enabled for this while loop.")]),e._v(" "),a("li",[a("code",[e._v("swap_memory")]),e._v(": Whether GPU-CPU memory swap is enabled for this loop.")]),e._v(" "),a("li",[a("code",[e._v("maximum_iterations")]),e._v(": Optional maximum number of iterations of the while loop to run. If provided, the "),a("code",[e._v("cond")]),e._v(" output is AND-ed with an additional "),a("code",[e._v("cond")]),e._v("ition ensuring the number of iterations executed is no greater than "),a("code",[e._v("maximum_iterations")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": Optional "),a("code",[e._v("name")]),e._v(" prefix for the returned tensors.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The output tensors for the loop variables after the loop. The return value has the same structure as "),a("code",[e._v("loop_vars")]),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TypeError")]),e._v(": if "),a("code",[e._v("cond")]),e._v(" or "),a("code",[e._v("body")]),e._v(" is not callable.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": if "),a("code",[e._v("loop_vars")]),e._v(" is empty.")])]),e._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" i = tf.constant(0)\nc = lambda i: tf.less(i, 10)\nb = lambda i: tf.add(i, 1)\nr = tf.while_loop(c, b, [i])\n")])])]),a("p",[e._v("Example with nesting and a namedtuple:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" import collections\nPair = collections.namedtuple('Pair', 'j, k')\nijk_0 = (tf.constant(0), Pair(tf.constant(1), tf.constant(2)))\nc = lambda i, p: i < 10\nb = lambda i, p: (i + 1, Pair((p.j + p.k), (p.j - p.k)))\nijk_final = tf.while_loop(c, b, ijk_0)\n")])])]),a("p",[e._v("Example using shape_invariants:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" i0 = tf.constant(0)\nm0 = tf.ones([2, 2])\nc = lambda i, m: i < 10\nb = lambda i, m: [i+1, tf.concat([m, m], axis=0)]\ntf.while_loop(\n    c, b, loop_vars=[i0, m0],\n    shape_invariants=[i0.get_shape(), tf.TensorShape([None, 2])])\n")])])]),a("p",[e._v("E"),a("code",[e._v("x")]),e._v("ample wh"),a("code",[e._v("i")]),e._v("ch demonstrates non-str"),a("code",[e._v("i")]),e._v("ct semant"),a("code",[e._v("i")]),e._v("cs: In the follow"),a("code",[e._v("i")]),e._v("ng e"),a("code",[e._v("x")]),e._v("ample, the f"),a("code",[e._v("i")]),e._v("nal value of the counter "),a("code",[e._v("i")]),e._v(" does not depend on "),a("code",[e._v("x")]),e._v(". So the "),a("code",[e._v("while_loop")]),e._v(" can "),a("code",[e._v("i")]),e._v("ncrement the counter parallel to updates of "),a("code",[e._v("x")]),e._v(". However, because the loop counter at one loop "),a("code",[e._v("i")]),e._v("terat"),a("code",[e._v("i")]),e._v("on depends on the value at the prev"),a("code",[e._v("i")]),e._v("ous "),a("code",[e._v("i")]),e._v("terat"),a("code",[e._v("i")]),e._v("on, the loop counter "),a("code",[e._v("i")]),e._v("tself cannot be "),a("code",[e._v("i")]),e._v("ncremented "),a("code",[e._v("i")]),e._v("n parallel. Hence "),a("code",[e._v("i")]),e._v("f we just want the f"),a("code",[e._v("i")]),e._v("nal value of the counter (wh"),a("code",[e._v("i")]),e._v("ch we pr"),a("code",[e._v("i")]),e._v("nt on the l"),a("code",[e._v("i")]),e._v("ne pr"),a("code",[e._v("i")]),e._v("nt(sess.run("),a("code",[e._v("i")]),e._v("))), then "),a("code",[e._v("x")]),e._v(" w"),a("code",[e._v("i")]),e._v("ll never be "),a("code",[e._v("i")]),e._v("ncremented, but the counter w"),a("code",[e._v("i")]),e._v("ll be updated on a s"),a("code",[e._v("i")]),e._v("ngle thread. Conversely, "),a("code",[e._v("i")]),e._v("f we want the value of the output (wh"),a("code",[e._v("i")]),e._v("ch we pr"),a("code",[e._v("i")]),e._v("nt on the l"),a("code",[e._v("i")]),e._v("ne pr"),a("code",[e._v("i")]),e._v("nt(sess.run(out).shape)), then the counter may be "),a("code",[e._v("i")]),e._v("ncremented on "),a("code",[e._v("i")]),e._v("ts own thread, wh"),a("code",[e._v("i")]),e._v("le "),a("code",[e._v("x")]),e._v(" can be "),a("code",[e._v("i")]),e._v("ncremented "),a("code",[e._v("i")]),e._v("n parallel on a separate thread. In the e"),a("code",[e._v("x")]),e._v("treme case, "),a("code",[e._v("i")]),e._v("t "),a("code",[e._v("i")]),e._v("s conce"),a("code",[e._v("i")]),e._v("vable that the thread "),a("code",[e._v("i")]),e._v("ncrement"),a("code",[e._v("i")]),e._v("ng the counter runs unt"),a("code",[e._v("i")]),e._v("l complet"),a("code",[e._v("i")]),e._v("on before "),a("code",[e._v("x")]),e._v(" "),a("code",[e._v("i")]),e._v("s "),a("code",[e._v("i")]),e._v("ncremented even a s"),a("code",[e._v("i")]),e._v("ngle t"),a("code",[e._v("i")]),e._v("me. The only th"),a("code",[e._v("i")]),e._v("ng that can never happen "),a("code",[e._v("i")]),e._v("s that the thread updat"),a("code",[e._v("i")]),e._v("ng "),a("code",[e._v("x")]),e._v(" can never get ahead of the counter thread because the thread "),a("code",[e._v("i")]),e._v("ncrement"),a("code",[e._v("i")]),e._v("ng "),a("code",[e._v("x")]),e._v(" depends on the value of the counter.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' import tensorflow as tf\n\nn = 10000\nx = tf.constant(list(range(n)))\nc = lambda i, x: i < n\nb = lambda i, x: (tf.compat.v1.Print(i + 1, [i]), tf.compat.v1.Print(x + 1,\n[i], "x:"))\ni, out = tf.while_loop(c, b, (0, x))\nwith tf.compat.v1.Session() as sess:\n    print(sess.run(i))  # prints [0] ... [9999]\n\n    # The following line may increment the counter and x in parallel.\n    # The counter thread may get ahead of the other thread, but not the\n    # other way around. So you may see things like\n    # [9996] x:[9987]\n    # meaning that the counter thread is on iteration 9996,\n    # while the other thread is on iteration 9987\n    print(sess.run(out).shape)\n')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);