(window.webpackJsonp=window.webpackJsonp||[]).push([[2519],{2710:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Defined in generated file: "),a("code",[e._v("python/ops/gen_data_flow_ops.py")]),e._v("\nInterleave the values from the "),a("code",[e._v("data")]),e._v(" tensors into a single tensor.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.dynamic_stitch")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.dynamic_stitch")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.dynamic_stitch(\n    indices,\n    data,\n    name=None\n)\n")])])]),a("p",[e._v("Builds a merged tensor such that")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("     merged[indices[m][i, ..., j], ...] = data[m][i, ..., j, ...]\n")])])]),a("p",[e._v("For example, if each "),a("code",[e._v("indices[m]")]),e._v(" is scalar or vector, we have")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("     # Scalar indices:\n    merged[indices[m], ...] = data[m][...]\n\n    # Vector indices:\n    merged[indices[m][i], ...] = data[m][i, ...]\n")])])]),a("p",[e._v("Each "),a("code",[e._v("data[i].shape")]),e._v(" must start w"),a("code",[e._v("i")]),e._v("th the correspond"),a("code",[e._v("i")]),e._v("ng "),a("code",[e._v("indices[i].shape")]),e._v(", and the rest of "),a("code",[e._v("data[i].shape")]),e._v(" must be "),a("code",[e._v("constant")]),e._v(" w.r.t. "),a("code",[e._v("i")]),e._v(". That "),a("code",[e._v("i")]),e._v("s, we must have "),a("code",[e._v("data[i].shape")]),e._v(" = "),a("code",[e._v("indices[i].shape")]),e._v(" + "),a("code",[e._v("constant")]),e._v(". In terms of th"),a("code",[e._v("i")]),e._v("s "),a("code",[e._v("constant")]),e._v(", the output shape "),a("code",[e._v("i")]),e._v("s")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" merged.shape = [max(indices)] + constant\n")])])]),a("p",[e._v("Values are merged in order, so if an index appears in both "),a("code",[e._v("indices[m][i]")]),e._v(" and "),a("code",[e._v("indices[n][j]")]),e._v(" for (m,i) < (n,j) the slice `` will appear in the merged result. If you do not need this guarantee, ParallelDynamicStitch might perform better on some devices.")]),e._v(" "),a("h4",{attrs:{id:"for-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("     indices[0] = 6\n    indices[1] = [4, 1]\n    indices[2] = [[5, 2], [0, 3]]\n    data[0] = [61, 62]\n    data[1] = [[41, 42], [11, 12]]\n    data[2] = [[[51, 52], [21, 22]], [[1, 2], [31, 32]]]\n    merged = [[1, 2], [11, 12], [21, 22], [31, 32], [41, 42],\n              [51, 52], [61, 62]]\n")])])]),a("p",[e._v("This method can be used to merge partitions created by "),a("code",[e._v("dynamic_partition")]),e._v(" as illustrated on the following example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("     # Apply function (increments x_i) on elements for which a certain condition\n    # apply (x_i != -1 in this example).\n    x=tf.constant([0.1, -1., 5.2, 4.3, -1., 7.4])\n    condition_mask=tf.not_equal(x,tf.constant(-1.))\n    partitioned_data = tf.dynamic_partition(\n        x, tf.cast(condition_mask, tf.int32) , 2)\n    partitioned_data[1] = partitioned_data[1] + 1.0\n    condition_indices = tf.dynamic_partition(\n        tf.range(tf.shape(x)[0]), tf.cast(condition_mask, tf.int32) , 2)\n    x = tf.dynamic_stitch(condition_indices, partitioned_data)\n    # Here x=[1.1, -1., 6.2, 5.3, -1, 8.4], the -1. values remain\n    # unchanged.\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("indices")]),e._v(": A list of at least 1 "),a("code",[e._v("Tensor")]),e._v(" objects with type "),a("code",[e._v("int32")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("data")]),e._v(": A list with the same length as "),a("code",[e._v("indices")]),e._v(" of "),a("code",[e._v("Tensor")]),e._v(" objects with the same type.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A "),a("code",[e._v("Tensor")]),e._v(". Has the same type as "),a("code",[e._v("data")]),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);