(window.webpackJsonp=window.webpackJsonp||[]).push([[2300],{2488:function(e,t,a){"use strict";a.r(t);var o=a(0),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Outputs random values from a truncated normal distribution.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.random.truncated_normal")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v1.truncated_normal")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.random.truncated_normal")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.random.truncated_normal(\n    shape,\n    mean=0.0,\n    stddev=1.0,\n    dtype=tf.dtypes.float32,\n    seed=None,\n    name=None\n)\n")])])]),a("h3",{attrs:{id:"used-in-the-guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("R")]),e._v("a"),a("code",[e._v("g")]),e._v("g"),a("code",[e._v("e")]),e._v("d"),a("code"),e._v("t"),a("code",[e._v("e")]),e._v("n"),a("code",[e._v("s")]),e._v("o"),a("code",[e._v("r")]),e._v("s``")])]),e._v(" "),a("p",[e._v("The generated values follow a normal distribution with specified mean and standard deviation, except that values whose magnitude is more than 2 standard deviations from the mean are dropped and re-picked.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("shape")]),e._v(": A 1-D integer Tensor or Python array. The "),a("code",[e._v("shape")]),e._v(" of the output tensor.")]),e._v(" "),a("li",[a("code",[e._v("mean")]),e._v(": A 0-D Tensor or Python value of type "),a("code",[e._v("dtype")]),e._v(". The "),a("code",[e._v("mean")]),e._v(" of the truncated normal distribution.")]),e._v(" "),a("li",[a("code",[e._v("stddev")]),e._v(": A 0-D Tensor or Python value of type "),a("code",[e._v("dtype")]),e._v(". The standard deviation of the normal distribution, before truncation.")]),e._v(" "),a("li",[a("code",[e._v("dtype")]),e._v(": The type of the output.")]),e._v(" "),a("li",[a("code",[e._v("seed")]),e._v(": A Python integer. Used to create a random "),a("code",[e._v("seed")]),e._v(" for the distribution. See "),a("code",[e._v("tf.compat.v1.set_random_seed")]),e._v(" for behavior.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A tensor of the specified shape filled with random truncated normal values.")])])}),[],!1,null,null,null);t.default=r.exports}}]);