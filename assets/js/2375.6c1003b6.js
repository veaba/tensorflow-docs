(window.webpackJsonp=window.webpackJsonp||[]).push([[2375],{2563:function(e,t,s){"use strict";s.r(t);var a=s(0),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Split elements of input based on sep into a RaggedTensor.")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("tf.compat.v2.strings.split")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.strings.split(\n    input,\n    sep=None,\n    maxsplit=-1,\n    name=None\n)\n")])])]),s("h3",{attrs:{id:"used-in-the-guide"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("t")]),e._v("f"),s("code",[e._v(".")]),e._v("d"),s("code",[e._v("a")]),e._v("t"),s("code",[e._v("a")]),e._v(":"),s("code"),e._v("B"),s("code",[e._v("u")]),e._v("i"),s("code",[e._v("l")]),e._v("d"),s("code"),e._v("T"),s("code",[e._v("e")]),e._v("n"),s("code",[e._v("s")]),e._v("o"),s("code",[e._v("r")]),e._v("F"),s("code",[e._v("l")]),e._v("o"),s("code",[e._v("w")]),e._v(" "),s("code",[e._v("i")]),e._v("n"),s("code",[e._v("p")]),e._v("u"),s("code",[e._v("t")]),e._v(" "),s("code",[e._v("p")]),e._v("i"),s("code",[e._v("p")]),e._v("e"),s("code",[e._v("l")]),e._v("i"),s("code",[e._v("n")]),e._v("e"),s("code",[e._v("s")])])]),e._v(" "),s("h3",{attrs:{id:"used-in-the-tutorials"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("L")]),e._v("o"),s("code",[e._v("a")]),e._v("d"),s("code"),e._v("i"),s("code",[e._v("m")]),e._v("a"),s("code",[e._v("g")]),e._v("e"),s("code",[e._v("s")])])]),e._v(" "),s("p",[e._v("Let N be the size of input (typically N will be the batch size). Split each element of input based on sep and return a SparseTensor or RaggedTensor containing the split tokens. Empty tokens are ignored.")]),e._v(" "),s("h4",{attrs:{id:"example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.strings.split('hello world')\n<Tensor ['hello', 'world']>\ntf.strings.split(['hello world', 'a b c'])\n<tf.RaggedTensor [['hello', 'world'], ['a', 'b', 'c']]>\n")])])]),s("p",[e._v('If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings. For example, input of "1<>2<><>3" and sep of "<>" returns ["1", "2", "", "3"]. If sep is None or an empty string, consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace.')]),e._v(" "),s("p",[e._v("Note that the above mentioned behavior matches python's str.split.")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("input")]),e._v(": A string "),s("code",[e._v("Tensor")]),e._v(" of rank "),s("code",[e._v("N")]),e._v(", the strings to split. If rank("),s("code",[e._v("input")]),e._v(") is not known statically, then it is assumed to be "),s("code",[e._v("1")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("sep")]),e._v(": "),s("code",[e._v("0-D")]),e._v(" string "),s("code",[e._v("Tensor")]),e._v(", the delimiter string.")]),e._v(" "),s("li",[s("code",[e._v("maxsplit")]),e._v(": An "),s("code",[e._v("int")]),e._v(". If "),s("code",[e._v("maxsplit")]),e._v(" > 0, limit of the split of the result.")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(": A "),s("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),s("h4",{attrs:{id:"raises"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ValueError")]),e._v(": If sep is not a string.")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A RaggedTensor of rank N+1, the strings split according to the delimiter.")])])}),[],!1,null,null,null);t.default=i.exports}}]);