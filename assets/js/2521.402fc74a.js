(window.webpackJsonp=window.webpackJsonp||[]).push([[2521],{2712:function(e,t,i){"use strict";i.r(t);var a=i(0),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("p",[e._v("A generalized contraction between tensors of arbitrary dimension.")]),e._v(" "),i("h3",{attrs:{id:"aliases"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("tf.compat.v1.einsum")])]),e._v(" "),i("li",[i("code",[e._v("tf.compat.v1.linalg.einsum")])]),e._v(" "),i("li",[i("code",[e._v("tf.compat.v2.einsum")])]),e._v(" "),i("li",[i("code",[e._v("tf.compat.v2.linalg.einsum")])]),e._v(" "),i("li",[i("code",[e._v("tf.linalg.einsum")])])]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v(" tf.einsum(\n    equation,\n    *inputs,\n    **kwargs\n)\n")])])]),i("h3",{attrs:{id:"used-in-the-guide"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("R")]),e._v("e"),i("code",[e._v("c")]),e._v("u"),i("code",[e._v("r")]),e._v("r"),i("code",[e._v("e")]),e._v("n"),i("code",[e._v("t")]),e._v(" "),i("code",[e._v("N")]),e._v("e"),i("code",[e._v("u")]),e._v("r"),i("code",[e._v("a")]),e._v("l"),i("code"),e._v("N"),i("code",[e._v("e")]),e._v("t"),i("code",[e._v("w")]),e._v("o"),i("code",[e._v("r")]),e._v("k"),i("code",[e._v("s")]),e._v(" "),i("code",[e._v("(")]),e._v("R"),i("code",[e._v("N")]),e._v("N"),i("code",[e._v(")")]),e._v(" "),i("code",[e._v("w")]),e._v("i"),i("code",[e._v("t")]),e._v("h"),i("code"),e._v("K"),i("code",[e._v("e")]),e._v("r"),i("code",[e._v("a")]),e._v("s``")])]),e._v(" "),i("h3",{attrs:{id:"used-in-the-tutorials"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("N")]),e._v("e"),i("code",[e._v("u")]),e._v("r"),i("code",[e._v("a")]),e._v("l"),i("code"),e._v("s"),i("code",[e._v("t")]),e._v("y"),i("code",[e._v("l")]),e._v("e"),i("code"),e._v("t"),i("code",[e._v("r")]),e._v("a"),i("code",[e._v("n")]),e._v("s"),i("code",[e._v("f")]),e._v("e"),i("code",[e._v("r")]),e._v("\nThis function returns a tensor whose elements are defined by "),i("code",[e._v("equation")]),e._v(", which is written in a shorthand form inspired by the Einstein summation convention. As an example, consider multiplying two matrices A and B to form a matrix C. The elements of C are given by:")])]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("   C[i,k] = sum_j A[i,j] * B[j,k]\n")])])]),i("p",[e._v("The corresponding "),i("code",[e._v("equation")]),e._v(" is:")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("   ij,jk->ik\n")])])]),i("p",[e._v("In general, the "),i("code",[e._v("equation")]),e._v(" is obtained from the more familiar element-wise "),i("code",[e._v("equation")]),e._v(' by 1. removing variable names, brackets, and commas, 2. replacing "*" with ",", 3. dropping summation signs, and 4. moving the output to the right, and replacing "=" with "->".\nMany common operations can be expressed in this way. For example:')]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v(" # Matrix multiplication\n>>> einsum('ij,jk->ik', m0, m1)  # output[i,k] = sum_j m0[i,j] * m1[j, k]\n\n# Dot product\n>>> einsum('i,i->', u, v)  # output = sum_i u[i]*v[i]\n\n# Outer product\n>>> einsum('i,j->ij', u, v)  # output[i,j] = u[i]*v[j]\n\n# Transpose\n>>> einsum('ij->ji', m)  # output[j,i] = m[i,j]\n\n# Trace\n>>> einsum('ii', m)  # output[j,i] = trace(m) = sum_i m[i, i]\n\n# Batch matrix multiplication\n>>> einsum('aij,ajk->aik', s, t)  # out[a,i,k] = sum_j s[a,i,j] * t[a, j, k]\n")])])]),i("p",[e._v("To enable and control broadcasting, use an ellipsis. For example, to do batch matrix multiplication, you could use:")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v(" einsum('...ij,...jk->...ik', u, v)\n")])])]),i("p",[e._v("This function behaves like "),i("code",[e._v("numpy.einsum")]),e._v(", but does not support:")]),e._v(" "),i("ul",[i("li",[e._v("Subscripts where an axis appears more than once for a single input (e.g. "),i("code",[e._v("ijj,k->ik")]),e._v(") unless it is a trace (e.g. "),i("code",[e._v("ijji")]),e._v(").")])]),e._v(" "),i("h4",{attrs:{id:"args"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("equation")]),e._v(": a "),i("code",[e._v("str")]),e._v(" describing the contraction, in the same format as "),i("code",[e._v("numpy.einsum")]),e._v(".")])]),e._v(" "),i("h4",{attrs:{id:"returns"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),i("p",[e._v("The contracted "),i("code",[e._v("Tensor")]),e._v(", with shape determined by "),i("code",[e._v("equation")]),e._v(".")]),e._v(" "),i("h4",{attrs:{id:"raises"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("ValueError")]),e._v(": If\nthe format of "),i("code",[e._v("equation")]),e._v(" is incorrect,\nthe number of inputs implied by "),i("code",[e._v("equation")]),e._v(" does not match len(inputs),\nan axis appears in the output subscripts but not in any of the inputs,\nthe number of dimensions of an input differs from the number of indices in its subscript, or\nthe input shapes are inconsistent along a particular axis.")]),e._v(" "),i("li",[e._v("the format of "),i("code",[e._v("equation")]),e._v(" is incorrect,")]),e._v(" "),i("li",[e._v("the number of inputs implied by "),i("code",[e._v("equation")]),e._v(" does not match len(inputs),")]),e._v(" "),i("li",[e._v("an axis appears in the output subscripts but not in any of the inputs,")]),e._v(" "),i("li",[e._v("the number of dimensions of an input differs from the number of indices in its subscript, or")]),e._v(" "),i("li",[e._v("the input shapes are inconsistent along a particular axis.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);