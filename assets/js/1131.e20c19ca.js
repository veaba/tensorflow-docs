(window.webpackJsonp=window.webpackJsonp||[]).push([[1131],{1320:function(e,a,t){"use strict";t.r(a);var r=t(0),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("A transformation that parses Example protos into a dict of tensors.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.data.experimental.parse_example_dataset")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.data.experimental.parse_example_dataset")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.data.experimental.parse_example_dataset(\n    features,\n    num_parallel_calls=1\n)\n")])])]),t("p",[e._v("Parses a number of serialized Example protos given in serialized. We refer to serialized as a batch with batch_size many entries of individual Example protos.\n"),t("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/io/parse_example",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.io.parse_example"),t("OutboundLink")],1),e._v("This op parses serialized examples into a dictionary mapping keys to Tensor and SparseTensor objects. features is a dict from keys to VarLenFeature, SparseFeature, and FixedLenFeature objects. Each VarLenFeature and SparseFeature is mapped to a SparseTensor, and each FixedLenFeature is mapped to a Tensor. See  for more details about feature dictionaries.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("features")]),e._v(": A "),t("code",[e._v("dict")]),e._v(" mapping feature keys to "),t("code",[e._v("FixedLenFeature")]),e._v(", "),t("code",[e._v("VarLenFeature")]),e._v(", and "),t("code",[e._v("SparseFeature")]),e._v(" values.")]),e._v(" "),t("li",[t("code",[e._v("num_parallel_calls")]),e._v(": (Optional.) A "),t("code",[e._v("tf.int32")]),e._v(" scalar "),t("code",[e._v("tf.Tensor")]),e._v(", representing the number of parsing processes to call in parallel.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/data/Dataset#apply",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.data.Dataset.apply"),t("OutboundLink")],1),e._v("A dataset transformation function, which can be passed to .")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": if features argument is None.")])])])}),[],!1,null,null,null);a.default=s.exports}}]);