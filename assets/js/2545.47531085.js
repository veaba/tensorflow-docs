(window.webpackJsonp=window.webpackJsonp||[]).push([[2545],{2736:function(e,t,n){"use strict";n.r(t);var a=n(0),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("A context manager that lifts ops out of control-flow scopes and function-building graphs.")]),e._v(" "),n("h3",{attrs:{id:"aliases"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("tf.compat.v1.init_scope")])]),e._v(" "),n("li",[n("code",[e._v("tf.compat.v2.init_scope")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.init_scope()\n")])])]),n("p",[e._v("There is often a need to lift variable initialization ops out of control-flow scopes, function-building graphs, and gradient tapes. Entering an "),n("code",[e._v("init_scope")]),e._v(" is a mechanism for satisfying these desiderata. In particular, entering an "),n("code",[e._v("init_scope")]),e._v(" has three effects:\n"),n("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/cond",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.cond"),n("OutboundLink")],1),e._v("(1) All control dependencies are cleared the moment the scope is entered; this is equivalent to entering the context manager returned from control_dependencies(None), which has the side-effect of exiting control-flow scopes like  and tf.while_loop.")]),e._v(" "),n("p",[e._v("(2) All operations that are created while the scope is active are lifted into the lowest context on the "),n("code",[e._v("context_stack")]),e._v(" that is not building a graph function. Here, a context is defined as either a graph or an eager context. Every context switch, i.e., every installation of a graph as the default graph and every switch into eager mode, is logged in a thread-local stack called "),n("code",[e._v("context_switches")]),e._v("; the log entry for a context switch is popped from the stack when the context is exited. Entering an "),n("code",[e._v("init_scope")]),e._v(" is equivalent to crawling up "),n("code",[e._v("context_switches")]),e._v(", finding the first context that is not building a graph function, and entering it. A caveat is that if graph mode is enabled but the default graph stack is empty, then entering an "),n("code",[e._v("init_scope")]),e._v(" will simply install a fresh graph as the default one.\n(3) The gradient tape is paused while the scope is active.\nWhen eager execution is enabled, code inside an init_scope block runs with eager execution enabled even when defining graph functions via tf.contrib.eager.defun. For example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.compat.v1.enable_eager_execution()\n\n@tf.contrib.eager.defun\ndef func():\n  # A defun-decorated function constructs TensorFlow graphs,\n  # it does not execute eagerly.\n  assert not tf.executing_eagerly()\n  with tf.init_scope():\n    # Initialization runs with eager execution enabled\n    assert tf.executing_eagerly()\n")])])]),n("h4",{attrs:{id:"raises"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("RuntimeError")]),e._v(": if graph state is incompatible with this initialization.")])])])}),[],!1,null,null,null);t.default=i.exports}}]);