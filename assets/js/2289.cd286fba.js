(window.webpackJsonp=window.webpackJsonp||[]).push([[2289],{2477:function(e,a,t){"use strict";t.r(a);var s=t(0),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Draws shape samples from each of the given Gamma distribution(s).")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.random.gamma")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v1.random_gamma")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.random.gamma")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.random.gamma(\n    shape,\n    alpha,\n    beta=None,\n    dtype=tf.dtypes.float32,\n    seed=None,\n    name=None\n)\n")])])]),t("p",[e._v("alpha is the shape parameter describing the distribution(s), and beta is the inverse scale parameter(s).")]),e._v(" "),t("p",[e._v("The samples are differentiable w.r.t. alpha and beta. The derivatives are computed using the approach described in the paper\n"),t("a",{attrs:{href:"https://arxiv.org/abs/1805.08498",target:"_blank",rel:"noopener noreferrer"}},[e._v("Michael Figurnov, Shakir Mohamed, Andriy Mnih. Implicit Reparameterization Gradients, 2018"),t("OutboundLink")],1)]),e._v(" "),t("h4",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" samples = tf.random.gamma([10], [0.5, 1.5])\n# samples has shape [10, 2], where each slice [:, 0] and [:, 1] represents\n# the samples drawn from each distribution\n\nsamples = tf.random.gamma([7, 5], [0.5, 1.5])\n# samples has shape [7, 5, 2], where each slice [:, :, 0] and [:, :, 1]\n# represents the 7x5 samples drawn from each of the two distributions\n\nalpha = tf.constant([[1.],[3.],[5.]])\nbeta = tf.constant([[3., 4.]])\nsamples = tf.random.gamma([30], alpha=alpha, beta=beta)\n# samples has shape [30, 3, 2], with 30 samples each of 3x2 distributions.\n\nloss = tf.reduce_mean(tf.square(samples))\ndloss_dalpha, dloss_dbeta = tf.gradients(loss, [alpha, beta])\n# unbiased stochastic derivatives of the loss function\nalpha.shape == dloss_dalpha.shape  # True\nbeta.shape == dloss_dbeta.shape  # True\n")])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("shape")]),e._v(": A 1-D integer Tensor or Python array. The "),t("code",[e._v("shape")]),e._v(" of the output samples to be drawn per alpha/beta-parameterized distribution.")]),e._v(" "),t("li",[t("code",[e._v("alpha")]),e._v(": A Tensor or Python value or N-D array of type "),t("code",[e._v("dtype")]),e._v(". "),t("code",[e._v("alpha")]),e._v(" provides the "),t("code",[e._v("shape")]),e._v(" parameter(s) describing the gamma distribution(s) to sample. Must be broadcastable with "),t("code",[e._v("beta")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("beta")]),e._v(": A Tensor or Python value or N-D array of type "),t("code",[e._v("dtype")]),e._v(". Defaults to 1. "),t("code",[e._v("beta")]),e._v(" provides the inverse scale parameter(s) of the gamma distribution(s) to sample. Must be broadcastable with "),t("code",[e._v("alpha")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("dtype")]),e._v(": The type of "),t("code",[e._v("alpha")]),e._v(", "),t("code",[e._v("beta")]),e._v(", and the output: "),t("code",[e._v("float16")]),e._v(", "),t("code",[e._v("float32")]),e._v(", or "),t("code",[e._v("float64")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("seed")]),e._v(": A Python integer. Used to create a random "),t("code",[e._v("seed")]),e._v(" for the distributions. See "),t("code",[e._v("tf.compat.v1.set_random_seed")]),e._v(" for behavior.")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": Optional "),t("code",[e._v("name")]),e._v(" for the operation.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("samples")]),e._v(": a "),t("code",[e._v("Tensor")]),e._v(" of shape tf.concat([shape, tf.shape(alpha + beta)], axis=0) with values of type "),t("code",[e._v("dtype")]),e._v(".")])])])}),[],!1,null,null,null);a.default=r.exports}}]);