(window.webpackJsonp=window.webpackJsonp||[]).push([[327],{515:function(e,t,a){"use strict";a.r(t);var l=a(0),s=Object(l.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Declares that the current module will not define any more key flags.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.app.flags.disclaim_key_flags")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.compat.v1.flags.disclaim_key_flags()\n")])])]),a("p",[e._v("Normally, the module that calls the DEFINE_xxx functions claims the flag to be its key flag. This is undesirable for modules that define additional DEFINE_yyy functions with its own flag parsers and serializers, since that module will accidentally claim flags defined by DEFINE_yyy as its key flags. After calling this function, the module disclaims flag definitions thereafter, so the key flags will be correctly attributed to the caller of DEFINE_yyy.")]),e._v(" "),a("p",[e._v("After calling this function, the module will not be able to define any more flags. This function will affect all FlagValues objects.")])])}),[],!1,null,null,null);t.default=s.exports}}]);