(window.webpackJsonp=window.webpackJsonp||[]).push([[600],{788:function(e,t,s){"use strict";s.r(t);var a=s(0),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Computes recall@k of the predictions with respect to sparse labels.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.compat.v1.metrics.recall_at_k(\n    labels,\n    predictions,\n    k,\n    class_id=None,\n    weights=None,\n    metrics_collections=None,\n    updates_collections=None,\n    name=None\n)\n")])])]),s("p",[e._v("If class_id is specified, we calculate recall by considering only the entries in the batch for which class_id is in the label, and computing the fraction of them for which class_id is in the top-k predictions. If class_id is not specified, we'll calculate recall as how often on average a class among the labels of a batch entry is in the top-k predictions.")]),e._v(" "),s("p",[e._v("sparse_recall_at_k creates two local variables, true_positive_at_"),s("k",[e._v(" and false_negative_at_"),s("k",[e._v(", that are used to compute the recall_at_k frequency. This frequency is ultimately returned as recall_at_"),s("k",[e._v(": an idempotent operation that simply divides true_positive_at_"),s("k",[e._v(" by total (true_positive_at_"),s("k",[e._v(" + false_negative_at_"),s("k",[e._v(").")])],1)],1)],1)],1)],1)],1),e._v(" "),s("p",[e._v("For estimation of the metric over a stream of data, the function creates an update_op operation that updates these variables and returns the recall_at_"),s("k",[e._v(". Internally, a top_k operation computes a Tensor indicating the top k predictions. Set operations applied to top_k and labels calculate the true positives and false negatives weighted by weights. Then update_op increments true_positive_at_"),s("k",[e._v(" and false_negative_at_"),s("k",[e._v(" using these values.")])],1)],1)],1),e._v(" "),s("p",[e._v("If weights is None, weights default to 1. Use weights of 0 to mask values.")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("labels")]),e._v(": "),s("code",[e._v("int64")]),e._v(" "),s("code",[e._v("Tensor")]),e._v(" or "),s("code",[e._v("SparseTensor")]),e._v(" with shape [D1, ... DN, num_"),s("code",[e._v("labels")]),e._v("] or [D1, ... DN], where the latter implies num_"),s("code",[e._v("labels")]),e._v("=1. N >= 1 and num_"),s("code",[e._v("labels")]),e._v(" is the number of target classes for the associated prediction. Commonly, N=1 and "),s("code",[e._v("labels")]),e._v(" has shape [batch_size, num_"),s("code",[e._v("labels")]),e._v("]. [D1, ... DN] must match "),s("code",[e._v("predictions")]),e._v(". Values should be in range [0, num_classes), where num_classes is the last dimension of "),s("code",[e._v("predictions")]),e._v(". Values outside this range always count towards "),s("code",[e._v("false_negative_at_<k>")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("predictions")]),e._v(": Float "),s("code",[e._v("Tensor")]),e._v(" with shape [D1, ... DN, num_classes] where N >= 1. Commonly, N=1 and "),s("code",[e._v("predictions")]),e._v(" has shape [batch size, num_classes]. The final dimension contains the logit values for each class. [D1, ... DN] must match "),s("code",[e._v("labels")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("k")]),e._v(": Integer, "),s("code",[e._v("k")]),e._v(" for @"),s("code",[e._v("k")]),e._v(" metric.")]),e._v(" "),s("li",[s("code",[e._v("class_id")]),e._v(": Integer class ID for which we want binary metrics. This should be in range [0, num_classes), where num_classes is the last dimension of "),s("code",[e._v("predictions")]),e._v(". If "),s("code",[e._v("class_id")]),e._v(" is outside this range, the method returns NAN.")]),e._v(" "),s("li",[s("code",[e._v("weights")]),e._v(": "),s("code",[e._v("Tensor")]),e._v(" whose ran"),s("code",[e._v("k")]),e._v(" is either 0, or n-"),s("code",[e._v("1")]),e._v(", where n is the ran"),s("code",[e._v("k")]),e._v(" of "),s("code",[e._v("labels")]),e._v(". If the latter, it must be broadcastable to "),s("code",[e._v("labels")]),e._v(" (i.e., all dimensions must be either "),s("code",[e._v("1")]),e._v(", or the same as the corresponding "),s("code",[e._v("labels")]),e._v(" dimension).")]),e._v(" "),s("li",[s("code",[e._v("metrics_collections")]),e._v(": An optional list of collections that values should be added to.")]),e._v(" "),s("li",[s("code",[e._v("updates_collections")]),e._v(": An optional list of collections that updates should be added to.")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(": Name of new update operation, and "),s("code",[e._v("name")]),e._v("space for other dependent ops.")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("recall")]),e._v(": Scalar "),s("code",[e._v("float64")]),e._v(" "),s("code",[e._v("Tensor")]),e._v(" with the value of "),s("code",[e._v("true_positives")]),e._v(" divided by the sum of "),s("code",[e._v("true_positives")]),e._v(" and "),s("code",[e._v("false_negatives")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("update_op")]),e._v(": "),s("code",[e._v("Operation")]),e._v(" that increments "),s("code",[e._v("true_positives")]),e._v(" and "),s("code",[e._v("false_negatives")]),e._v(" variables appropriately, and whose value matches "),s("code",[e._v("recall")]),e._v(".")])]),e._v(" "),s("h4",{attrs:{id:"raises"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ValueError")]),e._v(": If "),s("code",[e._v("weights")]),e._v(" is not "),s("code",[e._v("None")]),e._v(" and its shape doesn't match "),s("code",[e._v("predictions")]),e._v(", or if either "),s("code",[e._v("metrics_collections")]),e._v(" or "),s("code",[e._v("updates_collections")]),e._v(" are not a list or tuple.")]),e._v(" "),s("li",[s("code",[e._v("RuntimeError")]),e._v(": If eager execution is enabled.")])])])}),[],!1,null,null,null);t.default=o.exports}}]);