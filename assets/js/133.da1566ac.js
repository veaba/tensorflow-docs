(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{321:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Counts the number of occurrences of each value in an integer array.")]),e._v(" "),n("h3",{attrs:{id:"aliases"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("tf.compat.v1.math.bincount")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.compat.v1.bincount(\n    arr,\n    weights=None,\n    minlength=None,\n    maxlength=None,\n    dtype=tf.dtypes.int32\n)\n")])])]),n("p",[e._v("If minlength and maxlength are not given, returns a vector with length tf.reduce_max(arr) + 1 if arr is non-empty, and length 0 otherwise. If weights are non-None, then index i of the output stores the sum of the value in weights at each index where the corresponding value in arr is i.")]),e._v(" "),n("h4",{attrs:{id:"args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("arr")]),e._v(": An int32 tensor of non-negative values.")]),e._v(" "),n("li",[n("code",[e._v("weights")]),e._v(": If non-None, must be the same shape as "),n("code",[e._v("arr")]),e._v(". For each value in "),n("code",[e._v("arr")]),e._v(", the bin will be incremented by the corresponding weight instead of 1.")]),e._v(" "),n("li",[n("code",[e._v("minlength")]),e._v(": If given, ensures the output has length at least "),n("code",[e._v("minlength")]),e._v(", padding with zeros at the end if necessary.")]),e._v(" "),n("li",[n("code",[e._v("maxlength")]),e._v(": If given, skips values in "),n("code",[e._v("arr")]),e._v(" that are equal or greater than "),n("code",[e._v("maxlength")]),e._v(", ensuring that the output has length at most "),n("code",[e._v("maxlength")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("dtype")]),e._v(": If "),n("code",[e._v("weights")]),e._v(" is None, determines the type of the output bins.")])]),e._v(" "),n("h4",{attrs:{id:"returns"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),n("p",[e._v("A vector with the same dtype as weights or the given dtype. The bin values.")])])}),[],!1,null,null,null);t.default=r.exports}}]);