(window.webpackJsonp=window.webpackJsonp||[]).push([[1576],{1767:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Apply 2D conv with un-shared weights.")]),t._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[t._v("#")]),t._v(" Aliases:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("tf.compat.v1.keras.backend.local_conv2d")])]),t._v(" "),a("li",[a("code",[t._v("tf.compat.v2.keras.backend.local_conv2d")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" tf.keras.backend.local_conv2d(\n    inputs,\n    kernel,\n    kernel_size,\n    strides,\n    output_shape,\n    data_format=None\n)\n")])])]),a("h4",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[t._v("#")]),t._v(" Arguments:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("inputs")]),t._v(": 4D tensor with shape: (batch_size, filters, new_rows, new_cols) if data_format='channels_first' or 4D tensor with shape: (batch_size, new_rows, new_cols, filters) if data_format='channels_last'.")]),t._v(" "),a("li",[a("code",[t._v("kernel")]),t._v(": the unshared weight for convolution, with shape (output_items, feature_dim, filters).")]),t._v(" "),a("li",[a("code",[t._v("kernel")]),t._v("_size: a tuple of 2 integers, specifying the width and height of the 2D convolution window.")]),t._v(" "),a("li",[a("code",[t._v("strides")]),t._v(": a tuple of 2 integers, specifying the "),a("code",[t._v("strides")]),t._v(" of the convolution along the width and height.")]),t._v(" "),a("li",[a("code",[t._v("output_shape")]),t._v(": a tuple with (output_row, output_col).")]),t._v(" "),a("li",[a("code",[t._v("data_format")]),t._v(": the data format, channels_first or channels_last.")])]),t._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns:")]),t._v(" "),a("p",[t._v("A 4D tensor with shape: (batch_size, filters, new_rows, new_cols) if data_format='channels_first' or 4D tensor with shape: (batch_size, new_rows, new_cols, filters) if data_format='channels_last'.")])])}),[],!1,null,null,null);e.default=n.exports}}]);