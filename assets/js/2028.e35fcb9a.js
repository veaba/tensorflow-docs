(window.webpackJsonp=window.webpackJsonp||[]).push([[2028],{2219:function(e,v,_){"use strict";_.r(v);var o=_(0),d=Object(o.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("p",[e._v("Computes the singular value decompositions of one or more matrices.")]),e._v(" "),_("h3",{attrs:{id:"aliases"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("tf.compat.v1.linalg.svd")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v1.svd")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v2.linalg.svd")])])]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" tf.linalg.svd(\n    tensor,\n    full_matrices=False,\n    compute_uv=True,\n    name=None\n)\n")])])]),_("p",[e._v("Computes the SVD of each inner matrix in tensor such that tensor[..., :, :] = u[..., :, :] * diag(s[..., :, :]) * transpose(conj(v[..., :, :]))")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" # a is a tensor.\n# s is a tensor of singular values.\n# u is a tensor of left singular vectors.\n# v is a tensor of right singular vectors.\ns, u, v = svd(a)\ns = svd(a, compute_uv=False)\n")])])]),_("h4",{attrs:{id:"args"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("tensor")]),e._v(":"),_("code",[e._v("``Tensor``")]),e._v("of"),_("code"),e._v("shape"),_("code"),e._v("["),_("code",[e._v(".``.``.``,`` ``M``,`` ``N")]),e._v("]"),_("code",[e._v(".``")]),e._v("Let"),_("code",[e._v("``P``")]),e._v("be"),_("code"),e._v("the"),_("code"),e._v("minimum"),_("code"),e._v("of"),_("code",[e._v("``M``")]),e._v("and"),_("code",[e._v("``N``.")])]),e._v(" "),_("li",[_("code",[e._v("full_matrices")]),e._v(":"),_("code"),e._v("If"),_("code"),e._v("tr"),_("code",[e._v("u")]),e._v("e"),_("code",[e._v(",``")]),e._v("comp"),_("code",[e._v("u")]),e._v("te"),_("code"),e._v("f"),_("code",[e._v("u")]),e._v("ll-sized"),_("code",[e._v("``u``")]),e._v("and"),_("code",[e._v("``v``.``")]),e._v("If"),_("code"),e._v("false"),_("code"),e._v("(the"),_("code"),e._v("defa"),_("code",[e._v("u")]),e._v("lt)"),_("code",[e._v(",``")]),e._v("comp"),_("code",[e._v("u")]),e._v("te"),_("code"),e._v("only"),_("code"),e._v("the"),_("code"),e._v("leading"),_("code",[e._v("``P``")]),e._v("sing"),_("code",[e._v("u")]),e._v("lar"),_("code",[e._v("``v")]),e._v("ectors"),_("code",[e._v(".``")]),e._v("Ignored"),_("code"),e._v("if"),_("code",[e._v("``compute_uv``")]),e._v("is"),_("code",[e._v("``False``.")])]),e._v(" "),_("li",[_("code",[e._v("compute_uv")]),e._v(":"),_("code"),e._v("If"),_("code",[e._v("``True``")]),e._v("then"),_("code"),e._v("left"),_("code"),e._v("and"),_("code"),e._v("right"),_("code"),e._v("sing"),_("code",[e._v("u")]),e._v("lar"),_("code",[e._v("``v")]),e._v("ectors"),_("code"),e._v("will"),_("code"),e._v("be"),_("code"),e._v("comp"),_("code",[e._v("u")]),e._v("ted"),_("code"),e._v("and"),_("code"),e._v("ret"),_("code",[e._v("u")]),e._v("rned"),_("code"),e._v("in"),_("code",[e._v("``u``")]),e._v("and"),_("code",[e._v("``v``,``")]),e._v("respecti"),_("code",[e._v("v")]),e._v("ely"),_("code",[e._v(".``")]),e._v("Otherwise"),_("code",[e._v(",``")]),e._v("only"),_("code"),e._v("the"),_("code"),e._v("sing"),_("code",[e._v("u")]),e._v("lar"),_("code",[e._v("``v")]),e._v("al"),_("code",[e._v("u")]),e._v("es"),_("code"),e._v("will"),_("code"),e._v("be"),_("code"),e._v("comp"),_("code",[e._v("u")]),e._v("ted"),_("code",[e._v(",``")]),e._v("which"),_("code"),e._v("can"),_("code"),e._v("be"),_("code"),e._v("significantly"),_("code"),e._v("faster"),_("code",[e._v(".")])]),e._v(" "),_("li",[_("code",[e._v("name")]),e._v(":"),_("code"),e._v("string"),_("code",[e._v(",``")]),e._v("optional"),_("code",[e._v("``name``")]),e._v("of"),_("code"),e._v("the"),_("code"),e._v("operation"),_("code",[e._v(".")])])]),e._v(" "),_("h4",{attrs:{id:"returns"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("s")]),e._v(":"),_("code"),e._v("Singular"),_("code"),e._v("value"),_("code",[e._v("s``.``")]),e._v("Shape"),_("code"),e._v("i"),_("code",[e._v("s``")]),e._v("["),_("code",[e._v(".``.``.``,`` ``P")]),e._v("]"),_("code",[e._v(".``")]),e._v("The"),_("code"),e._v("value"),_("code",[e._v("s``")]),e._v("are"),_("code",[e._v("``s")]),e._v("orted"),_("code"),e._v("in"),_("code"),e._v("rever"),_("code",[e._v("s")]),e._v("e"),_("code"),e._v("order"),_("code"),e._v("of"),_("code"),e._v("magnitude"),_("code",[e._v(",`` ``s")]),e._v("o"),_("code",[e._v("``s")]),e._v("["),_("code",[e._v(".``.``.``,``")]),e._v("0]"),_("code"),e._v("i"),_("code",[e._v("s``")]),e._v("the"),_("code"),e._v("large"),_("code",[e._v("s")]),e._v("t"),_("code"),e._v("value"),_("code",[e._v(",`` ``s")]),e._v("["),_("code",[e._v(".``.``.``,``")]),e._v("1]"),_("code"),e._v("i"),_("code",[e._v("s``")]),e._v("the"),_("code",[e._v("``s")]),e._v("econd"),_("code"),e._v("large"),_("code",[e._v("s")]),e._v("t"),_("code",[e._v(",``")]),e._v("etc"),_("code",[e._v(".")])]),e._v(" "),_("li",[_("code",[e._v("u")]),e._v(":"),_("code"),e._v("Left"),_("code",[e._v("``s")]),e._v("ing"),_("code",[e._v("u")]),e._v("lar"),_("code"),e._v("vector"),_("code",[e._v("s``.``")]),e._v("If"),_("code",[e._v("``full_matrices``")]),e._v("i"),_("code",[e._v("s`` ``False``")]),e._v("(defa"),_("code",[e._v("u")]),e._v("lt)"),_("code"),e._v("then"),_("code",[e._v("``s")]),e._v("hape"),_("code"),e._v("i"),_("code",[e._v("s``")]),e._v("["),_("code",[e._v(".``.``.``,`` ``M``,`` ``P")]),e._v("];"),_("code"),e._v("if"),_("code",[e._v("``full_matrices``")]),e._v("i"),_("code",[e._v("s`` ``True``")]),e._v("then"),_("code",[e._v("``s")]),e._v("hape"),_("code"),e._v("i"),_("code",[e._v("s``")]),e._v("["),_("code",[e._v(".``.``.``,`` ``M``,`` ``M")]),e._v("]"),_("code",[e._v(".``")]),e._v("Not"),_("code"),e._v("ret"),_("code",[e._v("u")]),e._v("rned"),_("code"),e._v("if"),_("code",[e._v("``compute_uv``")]),e._v("i"),_("code",[e._v("s`` ``False``.")])]),e._v(" "),_("li",[_("code",[e._v("v")]),e._v(":"),_("code"),e._v("Right"),_("code",[e._v("``s")]),e._v("ing"),_("code",[e._v("u")]),e._v("lar"),_("code",[e._v("``v")]),e._v("ector"),_("code",[e._v("s``.``")]),e._v("If"),_("code",[e._v("``full_matrices``")]),e._v("i"),_("code",[e._v("s`` ``False``")]),e._v("(defa"),_("code",[e._v("u")]),e._v("lt)"),_("code"),e._v("then"),_("code",[e._v("``s")]),e._v("hape"),_("code"),e._v("i"),_("code",[e._v("s``")]),e._v("["),_("code",[e._v(".``.``.``,`` ``N``,`` ``P")]),e._v("]"),_("code",[e._v(".``")]),e._v("If"),_("code",[e._v("``full_matrices``")]),e._v("i"),_("code",[e._v("s`` ``True``")]),e._v("then"),_("code",[e._v("``s")]),e._v("hape"),_("code"),e._v("i"),_("code",[e._v("s``")]),e._v("["),_("code",[e._v(".``.``.``,`` ``N``,`` ``N")]),e._v("]"),_("code",[e._v(".`` ``N")]),e._v("ot"),_("code"),e._v("ret"),_("code",[e._v("u")]),e._v("rned"),_("code"),e._v("if"),_("code",[e._v("``compute_uv``")]),e._v("i"),_("code",[e._v("s`` ``False``.")])])]),e._v(" "),_("h4",{attrs:{id:"numpy-compatibility"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#numpy-compatibility","aria-hidden":"true"}},[e._v("#")]),e._v(" Numpy Compatibility")]),e._v(" "),_("p",[e._v("Mostly equivalent to numpy.linalg.svd, except that * The order of output arguments here is s, u, v when compute_uv is True, as opposed to u, s, v for numpy.linalg.svd. * full_matrices is False by default as opposed to True for numpy.linalg.svd. * tf.linalg.svd uses the standard definition of the SVD\n, such that the left singular vectors of a are the columns of u, while the right singular vectors of a are the columns of v. On the other hand, numpy.linalg.svd returns the adjoint\nas the third output argument.")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" import tensorflow as tf\nimport numpy as np\ns, u, v = tf.linalg.svd(a)\ntf_a_approx = tf.matmul(u, tf.matmul(tf.linalg.diag(s), v, adjoint_b=True))\nu, s, v_adj = np.linalg.svd(a, full_matrices=False)\nnp_a_approx = np.dot(u, np.dot(np.diag(s), v_adj))\n# tf_a_approx and np_a_approx should be numerically close.\n")])])])])}),[],!1,null,null,null);v.default=d.exports}}]);