(window.webpackJsonp=window.webpackJsonp||[]).push([[2049],{2237:function(e,t,a){"use strict";a.r(t);var v=a(0),_=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"class-textfileinitializer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-textfileinitializer","aria-hidden":"true"}},[e._v("#")]),e._v(" Class TextFileInitializer")]),e._v(" "),a("p",[e._v("Table initializers from a text file.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[e._v("Class "),a("code",[e._v("tf.compat.v1.lookup.TextFileInitializer")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.compat.v2.lookup.TextFileInitializer")])])]),e._v(" "),a("p",[e._v("This initializer assigns one entry in the table for each line in the file.")]),e._v(" "),a("p",[e._v("The key and value type of the table to initialize is given by key_dtype and value_dtype.")]),e._v(" "),a("p",[e._v("The key and value content to get from each line is specified by the key_index and value_index.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TextFileIndex.LINE_NUMBER")]),e._v(" means use the line number starting from zero, expects data type int64.")]),e._v(" "),a("li",[a("code",[e._v("TextFileIndex.WHOLE_LINE")]),e._v(" means use the whole line content, expects data type string.")]),e._v(" "),a("li",[e._v("A value "),a("code",[e._v(">=0")]),e._v(" means use the index (starting at zero) of the split line based on "),a("code",[e._v("delimiter")]),e._v(".")])]),e._v(" "),a("p",[e._v("For example if we have a file with the following content:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" emerson 10\nlake 20\npalmer 30\n")])])]),a("p",[e._v("The following snippet initializes a table with the first column as keys and second column as values:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("emerson -> 10")])]),e._v(" "),a("li",[a("code",[e._v("lake -> 20")])]),e._v(" "),a("li",[a("code",[e._v("palmer -> 30")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' table = tf.lookup.StaticHashTable(tf.lookup.TextFileInitializer(\n    "test.txt", tf.string, 0, tf.int64, 1, delimiter=" "), -1)\n...\ntable.init.run()\n')])])]),a("p",[e._v("Similarly to initialize the whole line as keys and the line number as values.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("emerson 10 -> 0")])]),e._v(" "),a("li",[a("code",[e._v("lake 20 -> 1")])]),e._v(" "),a("li",[a("code",[e._v("palmer 30 -> 2")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' table = tf.lookup.StaticHashTable(tf.lookup.TextFileInitializer(\n    "test.txt", tf.string, tf.lookup.TextFileIndex.WHOLE_LINE,\n    tf.int64, tf.lookup.TextFileIndex.LINE_NUMBER, delimiter=" "), -1)\n...\ntable.init.run()\n')])])]),a("h2",{attrs:{id:"init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("init")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/lookup_ops.py#L552-L632",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __init__(\n    filename,\n    key_dtype,\n    key_index,\n    value_dtype,\n    value_index,\n    vocab_size=None,\n    delimiter='\\t',\n    name=None\n)\n")])])]),a("p",[e._v("Constructs a table initializer object to populate from a text file.")]),e._v(" "),a("p",[e._v("It generates one key-value pair per line. The type of table key and value are specified by key_dtype and value_dtype, respectively. Similarly the content of the key and value are specified by the key_index and value_index.")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("T")]),e._v("e"),a("code",[e._v("x")]),e._v("t"),a("code",[e._v("F")]),e._v("i"),a("code",[e._v("l")]),e._v("e"),a("code",[e._v("I")]),e._v("n"),a("code",[e._v("d")]),e._v("e"),a("code",[e._v("x")]),e._v("."),a("code",[e._v("L")]),e._v("I"),a("code",[e._v("N")]),e._v("E"),a("code",[e._v("_")]),e._v("N"),a("code",[e._v("U")]),e._v("M"),a("code",[e._v("B")]),e._v("E"),a("code",[e._v("R")]),e._v(" "),a("code",[e._v("m")]),e._v("e"),a("code",[e._v("a")]),e._v("n"),a("code",[e._v("s")]),e._v(" "),a("code",[e._v("u")]),e._v("s"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("t")]),e._v("h"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("l")]),e._v("i"),a("code",[e._v("n")]),e._v("e"),a("code"),e._v("n"),a("code",[e._v("u")]),e._v("m"),a("code",[e._v("b")]),e._v("e"),a("code",[e._v("r")]),e._v(" "),a("code",[e._v("s")]),e._v("t"),a("code",[e._v("a")]),e._v("r"),a("code",[e._v("t")]),e._v("i"),a("code",[e._v("n")]),e._v("g"),a("code"),e._v("f"),a("code",[e._v("r")]),e._v("o"),a("code",[e._v("m")]),e._v(" "),a("code",[e._v("z")]),e._v("e"),a("code",[e._v("r")]),e._v("o"),a("code",[e._v(",")]),e._v(" "),a("code",[e._v("e")]),e._v("x"),a("code",[e._v("p")]),e._v("e"),a("code",[e._v("c")]),e._v("t"),a("code",[e._v("s")]),e._v(" "),a("code",[e._v("d")]),e._v("a"),a("code",[e._v("t")]),e._v("a"),a("code"),e._v("t"),a("code",[e._v("y")]),e._v("p"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("i")]),e._v("n"),a("code",[e._v("t")]),e._v("6"),a("code",[e._v("4")]),e._v(".``")]),e._v(" "),a("li",[a("code",[e._v("T")]),e._v("e"),a("code",[e._v("x")]),e._v("t"),a("code",[e._v("F")]),e._v("i"),a("code",[e._v("l")]),e._v("e"),a("code",[e._v("I")]),e._v("n"),a("code",[e._v("d")]),e._v("e"),a("code",[e._v("x")]),e._v("."),a("code",[e._v("W")]),e._v("H"),a("code",[e._v("O")]),e._v("L"),a("code",[e._v("E")]),e._v("_"),a("code",[e._v("L")]),e._v("I"),a("code",[e._v("N")]),e._v("E"),a("code"),e._v("m"),a("code",[e._v("e")]),e._v("a"),a("code",[e._v("n")]),e._v("s"),a("code"),e._v("u"),a("code",[e._v("s")]),e._v("e"),a("code"),e._v("t"),a("code",[e._v("h")]),e._v("e"),a("code"),e._v("w"),a("code",[e._v("h")]),e._v("o"),a("code",[e._v("l")]),e._v("e"),a("code"),e._v("l"),a("code",[e._v("i")]),e._v("n"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("c")]),e._v("o"),a("code",[e._v("n")]),e._v("t"),a("code",[e._v("e")]),e._v("n"),a("code",[e._v("t")]),e._v(","),a("code"),e._v("e"),a("code",[e._v("x")]),e._v("p"),a("code",[e._v("e")]),e._v("c"),a("code",[e._v("t")]),e._v("s"),a("code"),e._v("d"),a("code",[e._v("a")]),e._v("t"),a("code",[e._v("a")]),e._v(" "),a("code",[e._v("t")]),e._v("y"),a("code",[e._v("p")]),e._v("e"),a("code"),e._v("s"),a("code",[e._v("t")]),e._v("r"),a("code",[e._v("i")]),e._v("n"),a("code",[e._v("g")]),e._v(".``")]),e._v(" "),a("li",[e._v("A value >=0 means use the index (starting at zero) of the split line based on "),a("code",[e._v("delimiter")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("filename")]),e._v(": The "),a("code",[e._v("filename")]),e._v(" of the text file to be used for initialization. The path must be accessible from wherever the graph is initialized (eg. trainer or eval workers). The "),a("code",[e._v("filename")]),e._v(" may be a scalar "),a("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("key_dtype")]),e._v(": The "),a("code",[e._v("key")]),e._v(" data type.")]),e._v(" "),a("li",[a("code",[e._v("key")]),e._v("_index: the index that represents information of a line to get the table '"),a("code",[e._v("key")]),e._v("' values from.")]),e._v(" "),a("li",[a("code",[e._v("value_dtype")]),e._v(": The "),a("code",[e._v("value")]),e._v(" data type.")]),e._v(" "),a("li",[a("code",[e._v("value")]),e._v("_index: the index that represents information of a line to get the table '"),a("code",[e._v("value")]),e._v("' "),a("code",[e._v("value")]),e._v("s from.'")]),e._v(" "),a("li",[a("code",[e._v("vocab_size")]),e._v(": The number of elements in the file, if known.")]),e._v(" "),a("li",[a("code",[e._v("delimiter")]),e._v(": The "),a("code",[e._v("delimiter")]),e._v(" to separate fields in a line.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": when the filename is empty, or when the table key and value data types do not match the expected data types.")])]),e._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),a("h3",{attrs:{id:"key-dtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-dtype","aria-hidden":"true"}},[e._v("#")]),e._v(" key_dtype")]),e._v(" "),a("p",[e._v("The expected table key dtype.")]),e._v(" "),a("h3",{attrs:{id:"value-dtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#value-dtype","aria-hidden":"true"}},[e._v("#")]),e._v(" value_dtype")]),e._v(" "),a("p",[e._v("The expected table value dtype.")]),e._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),a("h3",{attrs:{id:"initialize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialize","aria-hidden":"true"}},[e._v("#")]),e._v(" initialize")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/lookup_ops.py#L634-L660",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" initialize(table)\n")])])]),a("p",[e._v("Initializes the table from a text file.")]),e._v(" "),a("h4",{attrs:{id:"args-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("table")]),e._v(": The "),a("code",[e._v("table")]),e._v(" to be initialized.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The operation that initializes the table.")]),e._v(" "),a("h4",{attrs:{id:"raises-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TypeError")]),e._v(": when the keys and values data types do not match the table key and value data types.")])])])}),[],!1,null,null,null);t.default=_.exports}}]);