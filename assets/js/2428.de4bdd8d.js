(window.webpackJsonp=window.webpackJsonp||[]).push([[2428],{2616:function(e,a,t){"use strict";t.r(a);var i=t(0),r=Object(i.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Returns whether TensorFlow can access a GPU.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.test.is_gpu_available")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.test.is_gpu_available")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.test.is_gpu_available(\n    cuda_only=False,\n    min_cuda_compute_capability=None\n)\n")])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("cuda_only")]),e._v(": limit the search to CUDA GPUs.")]),e._v(" "),t("li",[t("code",[e._v("min_cuda_compute_capability")]),e._v(": a (major,minor) pair that indicates the minimum CUDA compute capability required, or None if no requirement.")])]),e._v(" "),t("p",[e._v('Note that the keyword arg name "cuda_only" is misleading (since routine will return true when a GPU device is available irrespective of whether TF was built with CUDA support or ROCm support. However no changes here because')]),e._v(" "),t("p",[e._v('++ Changing the name "cuda_only" to something more generic would break backward compatibility')]),e._v(" "),t("p",[e._v('++ Adding an equivalent "rocm_only" would require the implementation check the build type. This in turn would require doing the same for CUDA and thus potentially break backward compatibility')]),e._v(" "),t("p",[e._v('++ Adding a new "cuda_or_rocm_only" would not break backward compatibility, but would require most (if not all) callers to update the call to use "cuda_or_rocm_only" instead of "cuda_only"')]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("True if a GPU device of the requested kind is available.")])])}),[],!1,null,null,null);a.default=r.exports}}]);