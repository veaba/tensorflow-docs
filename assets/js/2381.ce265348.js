(window.webpackJsonp=window.webpackJsonp||[]).push([[2381],{2569:function(e,t,a){"use strict";a.r(t);var o=a(0),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Converts each string in the input Tensor to the specified numeric type.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v2.strings.to_number")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.strings.to_number(\n    input,\n    out_type=tf.dtypes.float32,\n    name=None\n)\n")])])]),a("h3",{attrs:{id:"used-in-the-guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("U")]),e._v("s"),a("code",[e._v("i")]),e._v("n"),a("code",[e._v("g")]),e._v(" "),a("code",[e._v("t")]),e._v("h"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("S")]),e._v("a"),a("code",[e._v("v")]),e._v("e"),a("code",[e._v("d")]),e._v("M"),a("code",[e._v("o")]),e._v("d"),a("code",[e._v("e")]),e._v("l"),a("code"),e._v("f"),a("code",[e._v("o")]),e._v("r"),a("code",[e._v("m")]),e._v("a"),a("code",[e._v("t")])])]),e._v(" "),a("p",[e._v("(Note that int32 overflow results in an error while float overflow results in a rounded value.)")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("input")]),e._v(": A "),a("code",[e._v("Tensor")]),e._v(" of type "),a("code",[e._v("string")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("out_type")]),e._v(": An optional "),a("code",[e._v("tf.DType")]),e._v(" from: "),a("code",[e._v("tf.float32, tf.float64, tf.int32, tf.int64")]),e._v(". Defaults to "),a("code",[e._v("tf.float32")]),e._v(". The numeric type to interpret each "),a("code",[e._v("string")]),e._v(" in "),a("code",[e._v("string")]),e._v("_tensor as.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A Tensor of type out_type.")])])}),[],!1,null,null,null);t.default=r.exports}}]);