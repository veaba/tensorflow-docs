(window.webpackJsonp=window.webpackJsonp||[]).push([[1941],{2132:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"class-timeseriesgenerator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-timeseriesgenerator","aria-hidden":"true"}},[e._v("#")]),e._v(" Class TimeseriesGenerator")]),e._v(" "),a("p",[e._v("Utility class for generating batches of temporal data.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/keras/utils/Sequence",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sequence"),a("OutboundLink")],1),e._v("Inherits From:")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[e._v("Class "),a("code",[e._v("tf.compat.v1.keras.preprocessing.sequence.TimeseriesGenerator")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.compat.v2.keras.preprocessing.sequence.TimeseriesGenerator")])])]),e._v(" "),a("p",[e._v("This class takes in a sequence of data-points gathered at equal intervals, along with time series parameters such as stride, length of history, etc., to produce batches for training/validation.")]),e._v(" "),a("h1",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" data: Indexable generator (such as list or Numpy array)\n    containing consecutive data points (timesteps).\n    The data should be at 2D, and axis 0 is expected\n    to be the time dimension.\ntargets: Targets corresponding to timesteps in `data`.\n    It should have same length as `data`.\nlength: Length of the output sequences (in number of timesteps).\nsampling_rate: Period between successive individual timesteps\n    within sequences. For rate `r`, timesteps\n    `data[i]`, `data[i-r]`, ... `data[i - length]`\n    are used for create a sample sequence.\nstride: Period between successive output sequences.\n    For stride `s`, consecutive output samples would\n    be centered around `data[i]`, `data[i+s]`, `data[i+2*s]`, etc.\nstart_index: Data points earlier than `start_index` will not be used\n    in the output sequences. This is useful to reserve part of the\n    data for test or validation.\nend_index: Data points later than `end_index` will not be used\n    in the output sequences. This is useful to reserve part of the\n    data for test or validation.\nshuffle: Whether to shuffle output samples,\n    or instead draw them in chronological order.\nreverse: Boolean: if `true`, timesteps in each output sample will be\n    in reverse chronological order.\nbatch_size: Number of timeseries samples in each batch\n    (except maybe the last one).\n")])])]),a("h1",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" A [Sequence](/utils/#sequence) instance.\n")])])]),a("h1",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" from keras.preprocessing.sequence import TimeseriesGenerator\nimport numpy as np\ndata = np.array([[i] for i in range(50)])\ntargets = np.array([[i] for i in range(50)])\ndata_gen = TimeseriesGenerator(data, targets,\n                               length=10, sampling_rate=2,\n                               batch_size=2)\nassert len(data_gen) == 20\nbatch_0 = data_gen[0]\nx, y = batch_0\nassert np.array_equal(x,\n                      np.array([[[0], [2], [4], [6], [8]],\n                                [[1], [3], [5], [7], [9]]]))\nassert np.array_equal(y,\n                      np.array([[10], [11]]))\n")])])]),a("h2",{attrs:{id:"init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("init")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __init__(\n    data,\n    targets,\n    length,\n    sampling_rate=1,\n    stride=1,\n    start_index=0,\n    end_index=None,\n    shuffle=False,\n    reverse=False,\n    batch_size=128\n)\n")])])]),a("p",[e._v("Initialize self. See help(type(self)) for accurate signature.")]),e._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),a("h3",{attrs:{id:"getitem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getitem","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("getitem")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __getitem__(index)\n")])])]),a("h3",{attrs:{id:"iter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iter","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("iter")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/utils/data_utils.py#L403-L406",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __iter__()\n")])])]),a("p",[e._v("Create a generator that iterate over the Sequence.")]),e._v(" "),a("h3",{attrs:{id:"len"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#len","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("len")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __len__()\n")])])]),a("h3",{attrs:{id:"get-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-config","aria-hidden":"true"}},[e._v("#")]),e._v(" get_config")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_config()\n")])])]),a("p",[e._v("Returns the TimeseriesGenerator configuration as Python dictionary.")]),e._v(" "),a("h1",{attrs:{id:"returns-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" A Python dictionary with the TimeseriesGenerator configuration.\n")])])]),a("h3",{attrs:{id:"on-epoch-end"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#on-epoch-end","aria-hidden":"true"}},[e._v("#")]),e._v(" on_epoch_end")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/utils/data_utils.py#L398-L401",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" on_epoch_end()\n")])])]),a("p",[e._v("Method called at the end of every epoch.")]),e._v(" "),a("h3",{attrs:{id:"to-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to-json","aria-hidden":"true"}},[e._v("#")]),e._v(" to_json")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" to_json(**kwargs)\n")])])]),a("p",[e._v("Returns a JSON string containing the timeseries generator configuration. To load a generator from a JSON string, use keras.preprocessing.sequence.timeseries_generator_from_json(json_string).")]),e._v(" "),a("h1",{attrs:{id:"arguments-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" **kwargs: Additional keyword arguments\n    to be passed to `json.dumps()`.\n")])])]),a("h1",{attrs:{id:"returns-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" A JSON string containing the tokenizer configuration.\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);