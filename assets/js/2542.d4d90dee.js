(window.webpackJsonp=window.webpackJsonp||[]).push([[2542],{2733:function(e,a,s){"use strict";s.r(a);var t=s(0),n=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Bins the given values for use in a histogram.")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("tf.compat.v1.histogram_fixed_width_bins")])]),e._v(" "),s("li",[s("code",[e._v("tf.compat.v2.histogram_fixed_width_bins")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.histogram_fixed_width_bins(\n    values,\n    value_range,\n    nbins=100,\n    dtype=tf.dtypes.int32,\n    name=None\n)\n")])])]),s("p",[e._v("Given the tensor "),s("code",[e._v("values")]),e._v(", this operation returns a rank 1 "),s("code",[e._v("Tensor")]),e._v(" representing the indices of a histogram into which each element of "),s("code",[e._v("values")]),e._v(" would be binned. The bins are equal width and determined by the arguments "),s("code",[e._v("value_range")]),e._v(" and "),s("code",[e._v("nbins")]),e._v(".")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("values")]),e._v(": Numeric "),s("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("value_range")]),e._v(": Shape [2] "),s("code",[e._v("Tensor")]),e._v(" of same "),s("code",[e._v("dtype")]),e._v(" as "),s("code",[e._v("values")]),e._v(". "),s("code",[e._v("values")]),e._v(" <= "),s("code",[e._v("value_range")]),e._v("[0] will be mapped to hist[0], "),s("code",[e._v("values")]),e._v(" >= "),s("code",[e._v("value_range")]),e._v("[1] will be mapped to hist[-1].")]),e._v(" "),s("li",[s("code",[e._v("nbins")]),e._v(": Scalar "),s("code",[e._v("int32 Tensor")]),e._v(". Number of histogram bins.")]),e._v(" "),s("li",[s("code",[e._v("dtype")]),e._v(": "),s("code",[e._v("dtype")]),e._v(" for returned histogram.")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(": A "),s("code",[e._v("name")]),e._v(" for this operation (defaults to 'histogram_fixed_width').")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A "),s("code",[e._v("Tensor")]),e._v(" holding the indices of the binned "),s("code",[e._v("values")]),e._v(" whose shape matches "),s("code",[e._v("values")]),e._v(".")]),e._v(" "),s("h4",{attrs:{id:"raises"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("TypeError")]),e._v(": If any unsupported dtype is provided.")]),e._v(" "),s("li",[s("code",[e._v("tf.errors.InvalidArgumentError")]),e._v(": If value_range does not satisfy value_range[0] < value_range[1].")])]),e._v(" "),s("h4",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" # Bins will be:  (-inf, 1), [1, 2), [2, 3), [3, 4), [4, inf)\nnbins = 5\nvalue_range = [0.0, 5.0]\nnew_values = [-1.0, 0.0, 1.5, 2.0, 5.0, 15]\n\nwith tf.compat.v1.get_default_session() as sess:\n  indices = tf.histogram_fixed_width_bins(new_values, value_range, nbins=5)\n  variables.global_variables_initializer().run()\n  sess.run(indices) # [0, 0, 1, 2, 4, 4]\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);