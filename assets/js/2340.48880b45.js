(window.webpackJsonp=window.webpackJsonp||[]).push([[2340],{2528:function(e,t,n){"use strict";n.r(t);var s=n(0),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Generates hashed sparse cross from a list of sparse and dense tensors.")]),e._v(" "),n("h3",{attrs:{id:"aliases"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("tf.compat.v1.sparse.cross_hashed")])]),e._v(" "),n("li",[n("code",[e._v("tf.compat.v2.sparse.cross_hashed")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.sparse.cross_hashed(\n    inputs,\n    num_buckets=0,\n    hash_key=None,\n    name=None\n)\n")])])]),n("p",[e._v("For example, if the inputs are")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' * inputs[0]: SparseTensor with shape = [2, 2]\n  [0, 0]: "a"\n  [1, 0]: "b"\n  [1, 1]: "c"\n* inputs[1]: SparseTensor with shape = [2, 1]\n  [0, 0]: "d"\n  [1, 0]: "e"\n* inputs[2]: Tensor [["f"], ["g"]]\n')])])]),n("p",[e._v("then the output will be:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' shape = [2, 2]\n[0, 0]: FingerprintCat64(\n            Fingerprint64("f"), FingerprintCat64(\n                Fingerprint64("d"), Fingerprint64("a")))\n[1, 0]: FingerprintCat64(\n            Fingerprint64("g"), FingerprintCat64(\n                Fingerprint64("e"), Fingerprint64("b")))\n[1, 1]: FingerprintCat64(\n            Fingerprint64("g"), FingerprintCat64(\n                Fingerprint64("e"), Fingerprint64("c")))\n')])])]),n("h4",{attrs:{id:"args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("inputs")]),e._v(": An iterable of "),n("code",[e._v("Tensor")]),e._v(" or "),n("code",[e._v("SparseTensor")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("num_buckets")]),e._v(": An "),n("code",[e._v("int")]),e._v(" that is "),n("code",[e._v(">= 0")]),e._v(". output = hashed_value%"),n("code",[e._v("num_buckets")]),e._v(" if "),n("code",[e._v("num_buckets")]),e._v(" > 0 else hashed_value.")]),e._v(" "),n("li",[n("code",[e._v("hash_key")]),e._v(": Integer "),n("code",[e._v("hash_key")]),e._v(" that will be used by the "),n("code",[e._v("FingerprintCat64")]),e._v(" function. If not given, will use a default key.")]),e._v(" "),n("li",[n("code",[e._v("name")]),e._v(": Optional "),n("code",[e._v("name")]),e._v(" for the op.")])]),e._v(" "),n("h4",{attrs:{id:"returns"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),n("p",[e._v("A SparseTensor of type int64.")])])}),[],!1,null,null,null);t.default=a.exports}}]);