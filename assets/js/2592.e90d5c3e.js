(window.webpackJsonp=window.webpackJsonp||[]).push([[2592],{2783:function(e,s,_){"use strict";_.r(s);var t=_(0),v=Object(t.a)({},(function(){var e=this,s=e.$createElement,_=e._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("p",[e._v("Splits a tensor into sub tensors.")]),e._v(" "),_("h3",{attrs:{id:"aliases"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("tf.compat.v1.split")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v2.split")])])]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" tf.split(\n    value,\n    num_or_size_splits,\n    axis=0,\n    num=None,\n    name='split'\n)\n")])])]),_("h3",{attrs:{id:"used-in-the-guide"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("M")]),e._v("a"),_("code",[e._v("s")]),e._v("k"),_("code",[e._v("i")]),e._v("n"),_("code",[e._v("g")]),e._v(" "),_("code",[e._v("a")]),e._v("n"),_("code",[e._v("d")]),e._v(" "),_("code",[e._v("p")]),e._v("a"),_("code",[e._v("d")]),e._v("d"),_("code",[e._v("i")]),e._v("n"),_("code",[e._v("g")]),e._v(" "),_("code",[e._v("w")]),e._v("i"),_("code",[e._v("t")]),e._v("h"),_("code"),e._v("K"),_("code",[e._v("e")]),e._v("r"),_("code",[e._v("a")]),e._v("s``")])]),e._v(" "),_("h3",{attrs:{id:"used-in-the-tutorials"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("C")]),e._v("o"),_("code",[e._v("n")]),e._v("v"),_("code",[e._v("o")]),e._v("l"),_("code",[e._v("u")]),e._v("t"),_("code",[e._v("i")]),e._v("o"),_("code",[e._v("n")]),e._v("a"),_("code",[e._v("l")]),e._v(" "),_("code",[e._v("V")]),e._v("a"),_("code",[e._v("r")]),e._v("i"),_("code",[e._v("a")]),e._v("t"),_("code",[e._v("i")]),e._v("o"),_("code",[e._v("n")]),e._v("a"),_("code",[e._v("l")]),e._v(" "),_("code",[e._v("A")]),e._v("u"),_("code",[e._v("t")]),e._v("o"),_("code",[e._v("e")]),e._v("n"),_("code",[e._v("c")]),e._v("o"),_("code",[e._v("d")]),e._v("e"),_("code",[e._v("r")]),e._v("\nIf "),_("code",[e._v("num_or_size_splits")]),e._v(" is an integer, then "),_("code",[e._v("value")]),e._v(" is split along dimension "),_("code",[e._v("axis")]),e._v(" into "),_("code",[e._v("num_split")]),e._v(" smaller tensors. This requires that "),_("code",[e._v("num_split")]),e._v(" evenly divides "),_("code",[e._v("value")]),e._v(".shape["),_("code",[e._v("axis")]),e._v("].\nIf "),_("code",[e._v("num_or_size_splits")]),e._v(" "),_("code",[e._v("i")]),e._v("s a 1-D Tensor (or l"),_("code",[e._v("i")]),e._v("st), we call "),_("code",[e._v("i")]),e._v("t "),_("code",[e._v("size_splits")]),e._v(" and "),_("code",[e._v("value")]),e._v(" "),_("code",[e._v("i")]),e._v("s spl"),_("code",[e._v("i")]),e._v("t "),_("code",[e._v("i")]),e._v("nto len("),_("code",[e._v("size_splits")]),e._v(") elements. The shape of the "),_("code",[e._v("i")]),e._v("-th element has the same s"),_("code",[e._v("i")]),e._v("ze as the "),_("code",[e._v("value")]),e._v(" except along d"),_("code",[e._v("i")]),e._v("mens"),_("code",[e._v("i")]),e._v("on "),_("code",[e._v("axis")]),e._v(" where the s"),_("code",[e._v("i")]),e._v("ze "),_("code",[e._v("i")]),e._v("s "),_("code",[e._v("size_splits")]),e._v("["),_("code",[e._v("i")]),e._v("].")])]),e._v(" "),_("h4",{attrs:{id:"for-example"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" # 'value' is a tensor with shape [5, 30]\n# Split 'value' into 3 tensors with sizes [4, 15, 11] along dimension 1\nsplit0, split1, split2 = tf.split(value, [4, 15, 11], 1)\ntf.shape(split0)  # [5, 4]\ntf.shape(split1)  # [5, 15]\ntf.shape(split2)  # [5, 11]\n# Split 'value' into 3 tensors along dimension 1\nsplit0, split1, split2 = tf.split(value, num_or_size_splits=3, axis=1)\ntf.shape(split0)  # [5, 10]\n")])])]),_("h4",{attrs:{id:"args"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("value")]),e._v(": The "),_("code",[e._v("Tensor")]),e._v(" to split.")]),e._v(" "),_("li",[_("code",[e._v("num_or_size_splits")]),e._v(": Either an integer indicating the number of splits along split_dim or a 1-D integer "),_("code",[e._v("Tensor")]),e._v(" or Python list containing the sizes of each output tensor along split_dim. If a scalar then it must evenly divide "),_("code",[e._v("value")]),e._v(".shape[axis]; otherwise the sum of sizes along the split dimension must match that of the "),_("code",[e._v("value")]),e._v(".")])]),e._v(" "),_("h4",{attrs:{id:"returns"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),_("p",[e._v("if "),_("code",[e._v("num_or_size_splits")]),e._v(" is a scalar returns "),_("code",[e._v("num_or_size_splits")]),e._v(" "),_("code",[e._v("Tensor")]),e._v(" objects; if "),_("code",[e._v("num_or_size_splits")]),e._v(" is a 1-D "),_("code",[e._v("Tensor")]),e._v(" returns "),_("code",[e._v("num_or_size_splits")]),e._v(".get_shape[0] "),_("code",[e._v("Tensor")]),e._v(" objects resulting from splitting "),_("code",[e._v("value")]),e._v(".")]),e._v(" "),_("h4",{attrs:{id:"raises"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("ValueError")]),e._v(": If "),_("code",[e._v("num")]),e._v(" is unspecified and cannot be inferred.")])])])}),[],!1,null,null,null);s.default=v.exports}}]);