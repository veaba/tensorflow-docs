(window.webpackJsonp=window.webpackJsonp||[]).push([[2500],{2691:function(e,_,v){"use strict";v.r(_);var o=v(0),c=Object(o.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("BatchToSpace for N-D tensors of type T.")]),e._v(" "),v("h3",{attrs:{id:"aliases"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("tf.compat.v2.batch_to_space")])])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v(" tf.batch_to_space(\n    input,\n    block_shape,\n    crops,\n    name=None\n)\n")])])]),v("p",[e._v('This operation reshapes the "batch" dimension 0 into '),v("code",[e._v("M + 1")]),e._v(" dimensions of shape "),v("code",[e._v("block_shape + [batch]")]),e._v(", interleaves these blocks back into the grid defined by the spatial dimensions "),v("code",[e._v("[1, ..., M]")]),e._v(", to obtain a result with the same rank as the input. The spatial dimensions of this intermediate result are then optionally cropped according to "),v("code",[e._v("crops")]),e._v(" to produce the output. This is the reverse of SpaceToBatch. See below for a precise description.")]),e._v(" "),v("h4",{attrs:{id:"args"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("input")]),e._v(": A "),v("code",[e._v("Tensor")]),e._v(". N-D with shape "),v("code",[e._v("input")]),e._v("_shape = [batch] + spatial_shape + remaining_shape, where spatial_shape has M dimensions.")]),e._v(" "),v("li",[v("code",[e._v("block_shape")]),e._v(": A "),v("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),v("code",[e._v("int32")]),e._v(", "),v("code",[e._v("int64")]),e._v(". 1-D with shape "),v("code",[e._v("[M]")]),e._v(", all values must be >= 1. For backwards compatibility with TF 1.0, this parameter may be an int, in which case it is converted to numpy.array(["),v("code",[e._v("block_shape")]),e._v(", "),v("code",[e._v("block_shape")]),e._v("], dtype=numpy."),v("code",[e._v("int64")]),e._v(").")]),e._v(" "),v("li",[v("code",[e._v("crops")]),e._v(": A "),v("code",[e._v("Tensor")]),e._v(". Must be one of the follow"),v("code",[e._v("i")]),e._v("ng types: "),v("code",[e._v("int32")]),e._v(", "),v("code",[e._v("int64")]),e._v(". 2-D w"),v("code",[e._v("i")]),e._v("th shape "),v("code",[e._v("[M, 2]")]),e._v(", all values must be >= 0. "),v("code",[e._v("crops")]),e._v("["),v("code",[e._v("i")]),e._v("] = [crop_start, crop_end] spec"),v("code",[e._v("i")]),e._v("f"),v("code",[e._v("i")]),e._v("es the amount to crop from "),v("code",[e._v("input")]),e._v(" d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("on "),v("code",[e._v("i + 1")]),e._v(", wh"),v("code",[e._v("i")]),e._v("ch corresponds to spat"),v("code",[e._v("i")]),e._v("al d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("on "),v("code",[e._v("i")]),e._v(". It "),v("code",[e._v("i")]),e._v("s requ"),v("code",[e._v("i")]),e._v("red that crop_start["),v("code",[e._v("i")]),e._v("] + crop_end["),v("code",[e._v("i")]),e._v("] <= "),v("code",[e._v("block_shape")]),e._v("["),v("code",[e._v("i")]),e._v("] * "),v("code",[e._v("input")]),e._v("_shape["),v("code",[e._v("i + 1")]),e._v("]. Th"),v("code",[e._v("i")]),e._v("s operat"),v("code",[e._v("i")]),e._v("on "),v("code",[e._v("i")]),e._v("s equ"),v("code",[e._v("i")]),e._v("valent to the follow"),v("code",[e._v("i")]),e._v("ng steps:\nReshape "),v("code",[e._v("input")]),e._v(" to "),v("code",[e._v("reshaped")]),e._v(" of shape: ["),v("code",[e._v("block_shape")]),e._v("[0], ..., "),v("code",[e._v("block_shape")]),e._v("[M-1], batch / prod("),v("code",[e._v("block_shape")]),e._v("), "),v("code",[e._v("input")]),e._v("_shape[1], ..., "),v("code",[e._v("input")]),e._v("_shape[N-1]] 2. Permute d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("ons of "),v("code",[e._v("reshaped")]),e._v(" to produce "),v("code",[e._v("permuted")]),e._v(" of shape [batch / prod("),v("code",[e._v("block_shape")]),e._v("), "),v("code",[e._v("input")]),e._v("_shape[1], "),v("code",[e._v("block_shape")]),e._v("[0], ..., "),v("code",[e._v("input")]),e._v("_shape"),v("code",[e._v("[M]")]),e._v(", "),v("code",[e._v("block_shape")]),e._v("[M-1], "),v("code",[e._v("input")]),e._v("_shape[M+1], ..., "),v("code",[e._v("input")]),v("em",[e._v("shape[N-1]] 3. Reshape "),v("code",[e._v("permuted")]),e._v(" to produce "),v("code",[e._v("reshaped")])]),v("code",[e._v("permuted")]),e._v(" of shape [batch / prod("),v("code",[e._v("block_shape")]),e._v("), "),v("code",[e._v("input")]),e._v("_shape[1] * "),v("code",[e._v("block_shape")]),e._v("[0], ..., "),v("code",[e._v("input")]),e._v("_shape"),v("code",[e._v("[M]")]),e._v(" * "),v("code",[e._v("block_shape")]),e._v("[M-1], "),v("code",[e._v("input")]),e._v("_shape[M+1], ..., "),v("code",[e._v("input")]),v("em",[e._v("shape[N-1]] 4. Crop the start and end of d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("ons "),v("code",[e._v("[1, ..., M]")]),e._v(" of "),v("code",[e._v("reshaped")])]),v("code",[e._v("permuted")]),e._v(" accord"),v("code",[e._v("i")]),e._v("ng to "),v("code",[e._v("crops")]),e._v(" to produce the output of shape: [batch / prod("),v("code",[e._v("block_shape")]),e._v("), "),v("code",[e._v("input")]),e._v("_shape[1] * "),v("code",[e._v("block_shape")]),e._v("[0] - "),v("code",[e._v("crops")]),e._v("[0,0] - "),v("code",[e._v("crops")]),e._v("[0,1], ..., "),v("code",[e._v("input")]),e._v("_shape"),v("code",[e._v("[M]")]),e._v(" * "),v("code",[e._v("block_shape")]),e._v("[M-1] - "),v("code",[e._v("crops")]),e._v("[M-1,0] - "),v("code",[e._v("crops")]),e._v("[M-1,1], "),v("code",[e._v("input")]),e._v("_shape[M+1], ..., "),v("code",[e._v("input")]),e._v("_shape[N-1]] Some examples: (1) For the follow"),v("code",[e._v("i")]),e._v("ng "),v("code",[e._v("input")]),e._v(" of shape "),v("code",[e._v("[4, 1, 1, 1]")]),e._v(", "),v("code",[e._v("block_shape")]),e._v(" = [2, 2], and "),v("code",[e._v("crops")]),e._v(" = [[0, 0], [0, 0]]: "),v("code",[e._v("[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]")]),e._v(" The output tensor has shape "),v("code",[e._v("[1, 2, 2, 1]")]),e._v(" and value: "),v("code",[e._v("x = [[[[1], [2]], [[3], [4]]]]")]),e._v(" (2) For the follow"),v("code",[e._v("i")]),e._v("ng "),v("code",[e._v("input")]),e._v(" of shape "),v("code",[e._v("[4, 1, 1, 3]")]),e._v(", "),v("code",[e._v("block_shape")]),e._v(" = [2, 2], and "),v("code",[e._v("crops")]),e._v(" = [[0, 0], [0, 0]]: "),v("code",[e._v("[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]")]),e._v(" The output tensor has shape "),v("code",[e._v("[1, 2, 2, 3]")]),e._v(" and value: "),v("code",[e._v("x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]")]),e._v(" (3) For the follow"),v("code",[e._v("i")]),e._v("ng "),v("code",[e._v("input")]),e._v(" of shape "),v("code",[e._v("[4, 2, 2, 1]")]),e._v(", "),v("code",[e._v("block_shape")]),e._v(" = [2, 2], and "),v("code",[e._v("crops")]),e._v(" = [[0, 0], [0, 0]]: "),v("code",[e._v("x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]")]),e._v(" The output tensor has shape "),v("code",[e._v("[1, 4, 4, 1]")]),e._v(" and value: "),v("code",[e._v("x = [[[1], [2], [3], [4]], [[5], [6], [7], [8]], [[9], [10], [11], [12]], [[13], [14], [15], [16]]]")]),e._v(" (4) For the follow"),v("code",[e._v("i")]),e._v("ng "),v("code",[e._v("input")]),e._v(" of shape "),v("code",[e._v("[8, 1, 3, 1]")]),e._v(", "),v("code",[e._v("block_shape")]),e._v(" = [2, 2], and "),v("code",[e._v("crops")]),e._v(" = [[0, 0], [2, 0]]: "),v("code",[e._v("x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]")]),e._v(" The output tensor has shape "),v("code",[e._v("[2, 2, 4, 1]")]),e._v(" and value: ``")]),e._v(" "),v("li",[e._v("Reshape "),v("code",[e._v("input")]),e._v(" to "),v("code",[e._v("reshaped")]),e._v(" of shape: ["),v("code",[e._v("block_shape")]),e._v("[0], ..., "),v("code",[e._v("block_shape")]),e._v("[M-1], batch / prod("),v("code",[e._v("block_shape")]),e._v("), "),v("code",[e._v("input")]),e._v("_shape[1], ..., "),v("code",[e._v("input")]),e._v("_shape[N-1]] 2. Permute d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("ons of "),v("code",[e._v("reshaped")]),e._v(" to produce "),v("code",[e._v("permuted")]),e._v(" of shape [batch / prod("),v("code",[e._v("block_shape")]),e._v("), "),v("code",[e._v("input")]),e._v("_shape[1], "),v("code",[e._v("block_shape")]),e._v("[0], ..., "),v("code",[e._v("input")]),e._v("_shape"),v("code",[e._v("[M]")]),e._v(", "),v("code",[e._v("block_shape")]),e._v("[M-1], "),v("code",[e._v("input")]),e._v("_shape[M+1], ..., "),v("code",[e._v("input")]),v("em",[e._v("shape[N-1]] 3. Reshape "),v("code",[e._v("permuted")]),e._v(" to produce "),v("code",[e._v("reshaped")])]),v("code",[e._v("permuted")]),e._v(" of shape [batch / prod("),v("code",[e._v("block_shape")]),e._v("), "),v("code",[e._v("input")]),e._v("_shape[1] * "),v("code",[e._v("block_shape")]),e._v("[0], ..., "),v("code",[e._v("input")]),e._v("_shape"),v("code",[e._v("[M]")]),e._v(" * "),v("code",[e._v("block_shape")]),e._v("[M-1], "),v("code",[e._v("input")]),e._v("_shape[M+1], ..., "),v("code",[e._v("input")]),v("em",[e._v("shape[N-1]] 4. Crop the start and end of d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("ons "),v("code",[e._v("[1, ..., M]")]),e._v(" of "),v("code",[e._v("reshaped")])]),v("code",[e._v("permuted")]),e._v(" accord"),v("code",[e._v("i")]),e._v("ng to "),v("code",[e._v("crops")]),e._v(" to produce the output of shape: [batch / prod("),v("code",[e._v("block_shape")]),e._v("), "),v("code",[e._v("input")]),e._v("_shape[1] * "),v("code",[e._v("block_shape")]),e._v("[0] - "),v("code",[e._v("crops")]),e._v("[0,0] - "),v("code",[e._v("crops")]),e._v("[0,1], ..., "),v("code",[e._v("input")]),e._v("_shape"),v("code",[e._v("[M]")]),e._v(" * "),v("code",[e._v("block_shape")]),e._v("[M-1] - "),v("code",[e._v("crops")]),e._v("[M-1,0] - "),v("code",[e._v("crops")]),e._v("[M-1,1], "),v("code",[e._v("input")]),e._v("_shape[M+1], ..., "),v("code",[e._v("input")]),e._v("_shape[N-1]] Some examples: (1) For the follow"),v("code",[e._v("i")]),e._v("ng "),v("code",[e._v("input")]),e._v(" of shape "),v("code",[e._v("[4, 1, 1, 1]")]),e._v(", "),v("code",[e._v("block_shape")]),e._v(" = [2, 2], and "),v("code",[e._v("crops")]),e._v(" = [[0, 0], [0, 0]]: "),v("code",[e._v("[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]")]),e._v(" The output tensor has shape "),v("code",[e._v("[1, 2, 2, 1]")]),e._v(" and value: "),v("code",[e._v("x = [[[[1], [2]], [[3], [4]]]]")]),e._v(" (2) For the follow"),v("code",[e._v("i")]),e._v("ng "),v("code",[e._v("input")]),e._v(" of shape "),v("code",[e._v("[4, 1, 1, 3]")]),e._v(", "),v("code",[e._v("block_shape")]),e._v(" = [2, 2], and "),v("code",[e._v("crops")]),e._v(" = [[0, 0], [0, 0]]: "),v("code",[e._v("[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]")]),e._v(" The output tensor has shape "),v("code",[e._v("[1, 2, 2, 3]")]),e._v(" and value: "),v("code",[e._v("x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]")]),e._v(" (3) For the follow"),v("code",[e._v("i")]),e._v("ng "),v("code",[e._v("input")]),e._v(" of shape "),v("code",[e._v("[4, 2, 2, 1]")]),e._v(", "),v("code",[e._v("block_shape")]),e._v(" = [2, 2], and "),v("code",[e._v("crops")]),e._v(" = [[0, 0], [0, 0]]: "),v("code",[e._v("x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]")]),e._v(" The output tensor has shape "),v("code",[e._v("[1, 4, 4, 1]")]),e._v(" and value: "),v("code",[e._v("x = [[[1], [2], [3], [4]], [[5], [6], [7], [8]], [[9], [10], [11], [12]], [[13], [14], [15], [16]]]")]),e._v(" (4) For the follow"),v("code",[e._v("i")]),e._v("ng "),v("code",[e._v("input")]),e._v(" of shape "),v("code",[e._v("[8, 1, 3, 1]")]),e._v(", "),v("code",[e._v("block_shape")]),e._v(" = [2, 2], and "),v("code",[e._v("crops")]),e._v(" = [[0, 0], [2, 0]]: "),v("code",[e._v("x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]")]),e._v(" The output tensor has shape "),v("code",[e._v("[2, 2, 4, 1]")]),e._v(" and value: "),v("code",[e._v("x = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]]], [[[9], [10], [11], [12]], [[13], [14], [15], [16]]]]")])]),e._v(" "),v("li",[v("code",[e._v(": A")]),e._v(" for the operat"),v("code",[e._v("i")]),e._v("on (opt"),v("code",[e._v("i")]),e._v("onal).")])]),e._v(" "),v("h4",{attrs:{id:"returns"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),v("p",[e._v("A "),v("code",[e._v("Tensor")]),e._v(". Has the same type as "),v("code",[e._v("input")]),e._v(".")])])}),[],!1,null,null,null);_.default=c.exports}}]);