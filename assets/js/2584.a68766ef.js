(window.webpackJsonp=window.webpackJsonp||[]).push([[2584],{2775:function(e,a,s){"use strict";s.r(a);var t=s(0),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Returns a mask tensor representing the first N positions of each cell.")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("tf.compat.v1.sequence_mask")])]),e._v(" "),s("li",[s("code",[e._v("tf.compat.v2.sequence_mask")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.sequence_mask(\n    lengths,\n    maxlen=None,\n    dtype=tf.dtypes.bool,\n    name=None\n)\n")])])]),s("p",[e._v("If "),s("code",[e._v("lengths")]),e._v(" has shape "),s("code",[e._v("[d_1, d_2, ..., d_n]")]),e._v(" the resulting tensor "),s("code",[e._v("mask")]),e._v(" has "),s("code",[e._v("dtype")]),e._v(" "),s("code",[e._v("dtype")]),e._v(" and shape "),s("code",[e._v("[d_1, d_2, ..., d_n, maxlen]")]),e._v(", with")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" mask[i_1, i_2, ..., i_n, j] = (j < lengths[i_1, i_2, ..., i_n])\n")])])]),s("h4",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.sequence_mask([1, 3, 2], 5)  # [[True, False, False, False, False],\n                                #  [True, True, True, False, False],\n                                #  [True, True, False, False, False]]\n\ntf.sequence_mask([[1, 3],[2,0]])  # [[[True, False, False],\n                                  #   [True, True, True]],\n                                  #  [[True, True, False],\n                                  #   [False, False, False]]]\n")])])]),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("lengths")]),e._v(": integer tensor, all its values <= maxlen.")]),e._v(" "),s("li",[s("code",[e._v("maxlen")]),e._v(": scalar integer tensor, size of last dimension of returned tensor. Default is the maximum value in "),s("code",[e._v("lengths")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("dtype")]),e._v(": output type of the resulting tensor.")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(": "),s("code",[e._v("name")]),e._v(" of the op.")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A mask tensor of shape lengths.shape + (maxlen,), cast to specified dtype.")]),e._v(" "),s("h4",{attrs:{id:"raises"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ValueError")]),e._v(": if "),s("code",[e._v("maxlen")]),e._v(" is not a scalar.")])])])}),[],!1,null,null,null);a.default=r.exports}}]);