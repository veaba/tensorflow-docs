(window.webpackJsonp=window.webpackJsonp||[]).push([[1988],{2178:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"class-linearoperatorcirculant3d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-linearoperatorcirculant3d","aria-hidden":"true"}},[e._v("#")]),e._v(" Class LinearOperatorCirculant3D")]),e._v(" "),a("p",[e._v("LinearOperator acting like a nested block circulant matrix.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[e._v("Class "),a("code",[e._v("tf.compat.v1.linalg.LinearOperatorCirculant3D")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.compat.v2.linalg.LinearOperatorCirculant3D")])])]),e._v(" "),a("p",[e._v("This operator acts like a block circulant matrix A with shape [B1,...,Bb, N, N] for some b >= 0. The first b indices index a batch member. For every batch index (i1,...,ib), A[i1,...,ib, : :] is an N x N matrix. This matrix A is not materialized, but for purposes of broadcasting this shape will be relevant.")]),e._v(" "),a("h4",{attrs:{id:"description-in-terms-of-block-circulant-matrices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-in-terms-of-block-circulant-matrices","aria-hidden":"true"}},[e._v("#")]),e._v(" Description in terms of block circulant matrices")]),e._v(" "),a("p",[e._v("If A is nested block circulant, with block sizes N0, N1, N2 (N0 * N1 * N2 = N): A has a block structure, composed of N0 x N0 blocks, with each block an N1 x N1 block circulant matrix.")]),e._v(" "),a("p",[e._v("For example, with W, X, Y, Z each block circulant,")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" A = |W Z Y X|\n    |X W Z Y|\n    |Y X W Z|\n    |Z Y X W|\n")])])]),a("p",[e._v("Note that A itself will not in general be circulant.")]),e._v(" "),a("h4",{attrs:{id:"description-in-terms-of-the-frequency-spectrum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description-in-terms-of-the-frequency-spectrum","aria-hidden":"true"}},[e._v("#")]),e._v(" Description in terms of the frequency spectrum")]),e._v(" "),a("p",[e._v("There is an equivalent description in terms of the [batch] spectrum H and Fourier transforms. Here we consider A.shape = [N, N] and ignore batch dimensions.")]),e._v(" "),a("p",[e._v("If H.shape = [N0, N1, N2], (N0 * N1 * N2 = N): Loosely speaking, matrix multiplication is equal to the action of a Fourier multiplier: A u = IDFT3[ H DFT3[u] ]. Precisely speaking, given [N, R] matrix u, let DFT3[u] be the [N0, N1, N2, R] Tensor defined by re-shaping u to [N0, N1, N2, R] and taking a three dimensional DFT across the first three dimensions. Let IDFT3 be the inverse of DFT3. Matrix multiplication may be expressed columnwise:")]),e._v(" "),a("p",[e._v("(A u)_r = IDFT3[ H * (DFT3[u])_r ]")]),e._v(" "),a("h4",{attrs:{id:"operator-properties-deduced-from-the-spectrum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operator-properties-deduced-from-the-spectrum","aria-hidden":"true"}},[e._v("#")]),e._v(" Operator properties deduced from the spectrum.")]),e._v(" "),a("ul",[a("li",[e._v("This operator is positive definite if and only if "),a("code",[e._v("Real{H} > 0")]),e._v(".")])]),e._v(" "),a("p",[e._v("A general property of Fourier transforms is the correspondence between Hermitian functions and real valued transforms.")]),e._v(" "),a("p",[e._v("Suppose H.shape = [B1,...,Bb, N0, N1, N2], we say that H is a Hermitian spectrum if, with % meaning modulus division,")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" H[..., n0 % N0, n1 % N1, n2 % N2]\n  = ComplexConjugate[ H[..., (-n0) % N0, (-n1) % N1, (-n2) % N2] ].\n")])])]),a("ul",[a("li",[e._v("This operator corresponds to a real matrix if and only if "),a("code",[e._v("H")]),e._v(" is "),a("code",[e._v("H")]),e._v("ermitian.")]),e._v(" "),a("li",[e._v("This operator is self-adjoint if and only if "),a("code",[e._v("H")]),e._v(" is real.")])]),e._v(" "),a("p",[e._v('See e.g. "Discrete-Time Signal Processing", Oppenheim and Schafer.')]),e._v(" "),a("h3",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("p",[e._v("See LinearOperatorCirculant and LinearOperatorCirculant2D for examples.")]),e._v(" "),a("h4",{attrs:{id:"performance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#performance","aria-hidden":"true"}},[e._v("#")]),e._v(" Performance")]),e._v(" "),a("p",[e._v("Suppose operator is a LinearOperatorCirculant of shape [N, N], and x.shape = [N, R]. Then")]),e._v(" "),a("ul",[a("li",[e._v("operator.matmul(x) is O(R"),a("em",[e._v("N")]),e._v("Log[N])")]),e._v(" "),a("li",[e._v("operator.solve(x) is O(R"),a("em",[e._v("N")]),e._v("Log[N])")]),e._v(" "),a("li",[a("code",[e._v("operator.determinant")]),e._v("() involves a size "),a("code",[e._v("N")]),e._v(" "),a("code",[e._v("reduce_prod")]),e._v(".")])]),e._v(" "),a("p",[e._v("If instead operator and x have shape [B1,...,Bb, N, N] and [B1,...,Bb, N, R], every operation increases in complexity by B1*...*Bb.")]),e._v(" "),a("h4",{attrs:{id:"matrix-property-hints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matrix-property-hints","aria-hidden":"true"}},[e._v("#")]),e._v(" Matrix property hints")]),e._v(" "),a("p",[e._v("This LinearOperator is initialized with boolean flags of the form is_X, for X = non_singular, self_adjoint, positive_definite, square. These have the following meaning * If is_X == True, callers should expect the operator to have the property X. This is a promise that should be fulfilled, but is not a runtime assert. For example, finite floating point precision may result in these promises being violated. * If is_X == False, callers should expect the operator to not have X. * If is_X == None (the default), callers should have no expectation either way.")]),e._v(" "),a("h2",{attrs:{id:"init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("init")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator_circulant.py#L1010-L1063",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __init__(\n    spectrum,\n    input_output_dtype=tf.dtypes.complex64,\n    is_non_singular=None,\n    is_self_adjoint=None,\n    is_positive_definite=None,\n    is_square=True,\n    name='LinearOperatorCirculant3D'\n)\n")])])]),a("p",[e._v("Initialize an LinearOperatorCirculant.")]),e._v(" "),a("p",[e._v("This LinearOperator is initialized to have shape [B1,...,Bb, N, N] by providing spectrum, a [B1,...,Bb, N0, N1, N2] Tensor with N0"),a("em",[e._v("N1")]),e._v("N2 = N.")]),e._v(" "),a("p",[e._v("If input_output_dtype = DTYPE:")]),e._v(" "),a("ul",[a("li",[e._v("Arguments to methods such as "),a("code",[e._v("matmul")]),e._v(" or "),a("code",[e._v("solve")]),e._v(" must be "),a("code",[e._v("DTYPE")]),e._v(".")]),e._v(" "),a("li",[e._v("Values returned by all methods, such as "),a("code",[e._v("matmul")]),e._v(" or "),a("code",[e._v("determinant")]),e._v(" will be cast to "),a("code",[e._v("DTYPE")]),e._v(".")])]),e._v(" "),a("p",[e._v("Note that if the spectrum is not Hermitian, then this operator corresponds to a complex matrix with non-zero imaginary part. In this case, setting input_output_dtype to a real type will forcibly cast the output to be real, resulting in incorrect results!")]),e._v(" "),a("p",[e._v("If on the other hand the spectrum is Hermitian, then this operator corresponds to a real-valued matrix, and setting input_output_dtype to a real type is fine.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("spectrum")]),e._v(":"),a("code"),e._v("Shape"),a("code"),e._v("["),a("code",[e._v("B``1``,``.``.``.``,``B``b``,`` ``N")]),e._v("]"),a("code",[e._v("``Tensor``.``")]),e._v("Allowed"),a("code"),e._v("dtypes:"),a("code",[e._v("``float16``,`` ``float32``,`` ``float64``,`` ``complex64``,`` ``complex128``.``")]),e._v("Type"),a("code"),e._v("can"),a("code",[e._v("``b")]),e._v("e"),a("code"),e._v("different"),a("code"),e._v("than"),a("code",[e._v("``input_output_dtype")])]),e._v(" "),a("li",[a("code",[e._v("input_output_dtype")]),e._v(":"),a("code",[e._v("``dtype``")]),e._v("for"),a("code"),e._v("input/output"),a("code",[e._v(".")])]),e._v(" "),a("li",[a("code",[e._v("is_non_singular")]),e._v(":"),a("code"),e._v("Expect"),a("code"),e._v("that"),a("code"),e._v("this"),a("code"),e._v("operator"),a("code"),e._v("is"),a("code"),e._v("non-singular"),a("code",[e._v(".")])]),e._v(" "),a("li",[a("code",[e._v("is_self_adjoint")]),e._v(":"),a("code"),e._v("Expect"),a("code"),e._v("that"),a("code"),e._v("this"),a("code"),e._v("operator"),a("code"),e._v("is"),a("code"),e._v("equal"),a("code"),e._v("to"),a("code"),e._v("its"),a("code"),e._v("hermitian"),a("code"),e._v("transpose"),a("code",[e._v(".``")]),e._v("If"),a("code",[e._v("``spectrum``")]),e._v("is"),a("code"),e._v("real"),a("code",[e._v(",``")]),e._v("this"),a("code"),e._v("will"),a("code"),e._v("always"),a("code",[e._v("``b")]),e._v("e"),a("code"),e._v("true"),a("code",[e._v(".")])]),e._v(" "),a("li",[a("code",[e._v("is_positive_definite")]),e._v(":"),a("code"),e._v("Expect"),a("code"),e._v("that"),a("code"),e._v("this"),a("code"),e._v("operator"),a("code"),e._v("is"),a("code"),e._v("positive"),a("code"),e._v("definite"),a("code",[e._v(",``")]),e._v("meaning"),a("code"),e._v("the"),a("code"),e._v("real"),a("code"),e._v("part"),a("code"),e._v("of"),a("code"),e._v("all"),a("code"),e._v("eigenvalues"),a("code"),e._v("is"),a("code"),e._v("positive"),a("code",[e._v(".``")]),e._v("We"),a("code"),e._v("do"),a("code"),e._v("not"),a("code"),e._v("require"),a("code"),e._v("the"),a("code"),e._v("operator"),a("code"),e._v("to"),a("code",[e._v("``b")]),e._v("e"),a("code"),e._v("self-adjoint"),a("code"),e._v("to"),a("code",[e._v("``b")]),e._v("e"),a("code"),e._v("positive-definite"),a("code",[e._v(".``")]),e._v("See:"),a("code"),e._v("https://en"),a("code",[e._v(".")]),e._v("wikipedia"),a("code",[e._v(".")]),e._v("org/wiki/Positive-definite_matrix"),a("code"),e._v("#Extension_for_non_symmetric_matrices")]),e._v(" "),a("li",[a("code",[e._v("is_square")]),e._v(":"),a("code"),e._v("Expect"),a("code"),e._v("that"),a("code"),e._v("this"),a("code"),e._v("operator"),a("code"),e._v("acts"),a("code"),e._v("like"),a("code"),e._v("square"),a("code"),e._v("["),a("code",[e._v("b")]),e._v("atch]"),a("code"),e._v("matrices"),a("code",[e._v(".")])]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(":"),a("code"),e._v("A"),a("code",[e._v("``name``")]),e._v("to"),a("code"),e._v("prepend"),a("code"),e._v("to"),a("code"),e._v("all"),a("code"),e._v("ops"),a("code"),e._v("created"),a("code",[e._v("``b")]),e._v("y"),a("code"),e._v("this"),a("code"),e._v("class"),a("code",[e._v(".")])])]),e._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),a("h3",{attrs:{id:"h"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#h","aria-hidden":"true"}},[e._v("#")]),e._v(" H")]),e._v(" "),a("p",[e._v("Returns the adjoint of the current LinearOperator.")]),e._v(" "),a("p",[e._v("Given A representing this LinearOperator, return A*. Note that calling self.adjoint() and self.H are equivalent.")]),e._v(" "),a("h4",{attrs:{id:"args-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("LinearOperator which represents the adjoint of this LinearOperator.")]),e._v(" "),a("h3",{attrs:{id:"batch-shape"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#batch-shape","aria-hidden":"true"}},[e._v("#")]),e._v(" batch_shape")]),e._v(" "),a("p",[e._v("TensorShape of batch dimensions of this LinearOperator.")]),e._v(" "),a("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns TensorShape([B1,...,Bb]), equivalent to A.get_shape()[:-2]")]),e._v(" "),a("h4",{attrs:{id:"returns-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("TensorShape, statically determined, may be undefined.")]),e._v(" "),a("h3",{attrs:{id:"block-depth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-depth","aria-hidden":"true"}},[e._v("#")]),e._v(" block_depth")]),e._v(" "),a("p",[e._v("Depth of recursively defined circulant blocks defining this Operator.")]),e._v(" "),a("p",[e._v("With A the dense representation of this Operator,")]),e._v(" "),a("p",[e._v("block_depth = 1 means A is symmetric circulant. For example,")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" A = |w z y x|\n    |x w z y|\n    |y x w z|\n    |z y x w|\n")])])]),a("p",[e._v("block_depth = 2 means A is block symmetric circulant with symemtric circulant blocks. For example, with W, X, Y, Z symmetric circulant,")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" A = |W Z Y X|\n    |X W Z Y|\n    |Y X W Z|\n    |Z Y X W|\n")])])]),a("p",[e._v("block_depth = 3 means A is block symmetric circulant with block symmetric circulant blocks.")]),e._v(" "),a("h4",{attrs:{id:"returns-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Python integer.")]),e._v(" "),a("h3",{attrs:{id:"block-shape"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-shape","aria-hidden":"true"}},[e._v("#")]),e._v(" block_shape")]),e._v(" "),a("h3",{attrs:{id:"domain-dimension"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#domain-dimension","aria-hidden":"true"}},[e._v("#")]),e._v(" domain_dimension")]),e._v(" "),a("p",[e._v("Dimension (in the sense of vector spaces) of the domain of this operator.")]),e._v(" "),a("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns N.")]),e._v(" "),a("h4",{attrs:{id:"returns-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Dimension object.")]),e._v(" "),a("h3",{attrs:{id:"dtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dtype","aria-hidden":"true"}},[e._v("#")]),e._v(" dtype")]),e._v(" "),a("p",[e._v("The DType of Tensors handled by this LinearOperator.")]),e._v(" "),a("h3",{attrs:{id:"graph-parents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graph-parents","aria-hidden":"true"}},[e._v("#")]),e._v(" graph_parents")]),e._v(" "),a("p",[e._v("List of graph dependencies of this LinearOperator.")]),e._v(" "),a("h3",{attrs:{id:"is-non-singular"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-non-singular","aria-hidden":"true"}},[e._v("#")]),e._v(" is_non_singular")]),e._v(" "),a("h3",{attrs:{id:"is-positive-definite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-positive-definite","aria-hidden":"true"}},[e._v("#")]),e._v(" is_positive_definite")]),e._v(" "),a("h3",{attrs:{id:"is-self-adjoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-self-adjoint","aria-hidden":"true"}},[e._v("#")]),e._v(" is_self_adjoint")]),e._v(" "),a("h3",{attrs:{id:"is-square"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-square","aria-hidden":"true"}},[e._v("#")]),e._v(" is_square")]),e._v(" "),a("p",[e._v("Return True/False depending on if this operator is square.")]),e._v(" "),a("h3",{attrs:{id:"range-dimension"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#range-dimension","aria-hidden":"true"}},[e._v("#")]),e._v(" range_dimension")]),e._v(" "),a("p",[e._v("Dimension (in the sense of vector spaces) of the range of this operator.")]),e._v(" "),a("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns M.")]),e._v(" "),a("h4",{attrs:{id:"returns-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Dimension object.")]),e._v(" "),a("h3",{attrs:{id:"shape"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shape","aria-hidden":"true"}},[e._v("#")]),e._v(" shape")]),e._v(" "),a("p",[e._v("TensorShape of this LinearOperator.")]),e._v(" "),a("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns TensorShape([B1,...,Bb, M, N]), equivalent to A.get_shape().")]),e._v(" "),a("h4",{attrs:{id:"returns-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("TensorShape, statically determined, may be undefined.")]),e._v(" "),a("h3",{attrs:{id:"spectrum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spectrum","aria-hidden":"true"}},[e._v("#")]),e._v(" spectrum")]),e._v(" "),a("h3",{attrs:{id:"tensor-rank"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tensor-rank","aria-hidden":"true"}},[e._v("#")]),e._v(" tensor_rank")]),e._v(" "),a("p",[e._v("Rank (in the sense of tensors) of matrix corresponding to this operator.")]),e._v(" "),a("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns b + 2.")]),e._v(" "),a("h4",{attrs:{id:"args-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Python integer, or None if the tensor rank is undefined.")]),e._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),a("h3",{attrs:{id:"add-to-tensor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-to-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" add_to_tensor")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L1014-L1027",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" add_to_tensor(\n    x,\n    name='add_to_tensor'\n)\n")])])]),a("p",[e._v("Add matrix represented by this operator to x. Equivalent to A + x.")]),e._v(" "),a("h4",{attrs:{id:"args-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("x")]),e._v(": "),a("code",[e._v("Tensor")]),e._v(" with same "),a("code",[e._v("dtype")]),e._v(" and shape broadcastable to "),a("code",[e._v("self.shape")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" to give this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A Tensor with broadcast shape and same dtype as self.")]),e._v(" "),a("h3",{attrs:{id:"adjoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adjoint","aria-hidden":"true"}},[e._v("#")]),e._v(" adjoint")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L870-L885",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" adjoint(name='adjoint')\n")])])]),a("p",[e._v("Returns the adjoint of the current LinearOperator.")]),e._v(" "),a("p",[e._v("Given A representing this LinearOperator, return A*. Note that calling self.adjoint() and self.H are equivalent.")]),e._v(" "),a("h4",{attrs:{id:"args-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("LinearOperator which represents the adjoint of this LinearOperator.")]),e._v(" "),a("h3",{attrs:{id:"assert-hermitian-spectrum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assert-hermitian-spectrum","aria-hidden":"true"}},[e._v("#")]),e._v(" assert_hermitian_spectrum")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator_circulant.py#L328-L348",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" assert_hermitian_spectrum(name='assert_hermitian_spectrum')\n")])])]),a("p",[e._v("Returns an Op that asserts this operator has Hermitian spectrum.")]),e._v(" "),a("p",[e._v("This operator corresponds to a real-valued matrix if and only if its spectrum is Hermitian.")]),e._v(" "),a("h4",{attrs:{id:"args-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" to give this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-10","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("An Op that asserts this operator has Hermitian spectrum.")]),e._v(" "),a("h3",{attrs:{id:"assert-non-singular"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assert-non-singular","aria-hidden":"true"}},[e._v("#")]),e._v(" assert_non_singular")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L484-L502",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" assert_non_singular(name='assert_non_singular')\n")])])]),a("p",[e._v("Returns an Op that asserts this operator is non singular.")]),e._v(" "),a("p",[e._v("This operator is considered non-singular if")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" ConditionNumber < max{100, range_dimension, domain_dimension} * eps,\neps := np.finfo(self.dtype.as_numpy_dtype).eps\n")])])]),a("h4",{attrs:{id:"args-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A string "),a("code",[e._v("name")]),e._v(" to prepend to created ops.")])]),e._v(" "),a("h4",{attrs:{id:"returns-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-11","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("An Assert Op, that, when run, will raise an InvalidArgumentError if the operator is singular.")]),e._v(" "),a("h3",{attrs:{id:"assert-positive-definite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assert-positive-definite","aria-hidden":"true"}},[e._v("#")]),e._v(" assert_positive_definite")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L520-L535",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" assert_positive_definite(name='assert_positive_definite')\n")])])]),a("p",[e._v("Returns an Op that asserts this operator is positive definite.")]),e._v(" "),a("p",[e._v("Here, positive definite means that the quadratic form x^H A x has positive real part for all nonzero x. Note that we do not require the operator to be self-adjoint to be positive definite.")]),e._v(" "),a("h4",{attrs:{id:"args-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" to give this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-12","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("An Assert Op, that, when run, will raise an InvalidArgumentError if the operator is not positive definite.")]),e._v(" "),a("h3",{attrs:{id:"assert-self-adjoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assert-self-adjoint","aria-hidden":"true"}},[e._v("#")]),e._v(" assert_self_adjoint")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L547-L561",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" assert_self_adjoint(name='assert_self_adjoint')\n")])])]),a("p",[e._v("Returns an Op that asserts this operator is self-adjoint.")]),e._v(" "),a("p",[e._v("Here we check that this operator is exactly equal to its hermitian transpose.")]),e._v(" "),a("h4",{attrs:{id:"args-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A string "),a("code",[e._v("name")]),e._v(" to prepend to created ops.")])]),e._v(" "),a("h4",{attrs:{id:"returns-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-13","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("An Assert Op, that, when run, will raise an InvalidArgumentError if the operator is not self-adjoint.")]),e._v(" "),a("h3",{attrs:{id:"batch-shape-tensor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#batch-shape-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" batch_shape_tensor")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L318-L338",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" batch_shape_tensor(name='batch_shape_tensor')\n")])])]),a("p",[e._v("Shape of batch dimensions of this operator, determined at runtime.")]),e._v(" "),a("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns a Tensor holding [B1,...,Bb].")]),e._v(" "),a("h4",{attrs:{id:"args-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-10","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-14","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("int32 Tensor")]),e._v(" "),a("h3",{attrs:{id:"block-shape-tensor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#block-shape-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" block_shape_tensor")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator_circulant.py#L180-L182",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" block_shape_tensor()\n")])])]),a("p",[e._v("Shape of the block dimensions of self.spectrum.")]),e._v(" "),a("h3",{attrs:{id:"cholesky"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cholesky","aria-hidden":"true"}},[e._v("#")]),e._v(" cholesky")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L915-L938",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" cholesky(name='cholesky')\n")])])]),a("p",[e._v("Returns a Cholesky factor as a LinearOperator.")]),e._v(" "),a("p",[e._v("Given A representing this LinearOperator, if A is positive definite self-adjoint, return L, where A = L L^T, i.e. the cholesky decomposition.")]),e._v(" "),a("h4",{attrs:{id:"args-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-11","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-15","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("LinearOperator which represents the lower triangular matrix in the Cholesky decomposition.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": When the "),a("code",[e._v("LinearOperator")]),e._v(" is not hinted to be positive definite and self adjoint.")])]),e._v(" "),a("h3",{attrs:{id:"convolution-kernel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#convolution-kernel","aria-hidden":"true"}},[e._v("#")]),e._v(" convolution_kernel")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator_circulant.py#L284-L298",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" convolution_kernel(name='convolution_kernel')\n")])])]),a("p",[e._v("Convolution kernel corresponding to self.spectrum.")]),e._v(" "),a("p",[e._v("The D dimensional DFT of this kernel is the frequency domain spectrum of this operator.")]),e._v(" "),a("h4",{attrs:{id:"args-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-12","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" to give this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-16","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Tensor with dtype self.dtype.")]),e._v(" "),a("h3",{attrs:{id:"determinant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#determinant","aria-hidden":"true"}},[e._v("#")]),e._v(" determinant")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L677-L694",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" determinant(name='det')\n")])])]),a("p",[e._v("Determinant for every batch member.")]),e._v(" "),a("h4",{attrs:{id:"args-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-13","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-17","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Tensor with shape self.batch_shape and same dtype as self.")]),e._v(" "),a("h4",{attrs:{id:"raises-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("NotImplementedError")]),e._v(": If "),a("code",[e._v("self.is_square")]),e._v(" is "),a("code",[e._v("False")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"diag-part"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diag-part","aria-hidden":"true"}},[e._v("#")]),e._v(" diag_part")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L965-L991",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" diag_part(name='diag_part')\n")])])]),a("p",[e._v("Efficiently get the [batch] diagonal part of this operator.")]),e._v(" "),a("p",[e._v("If this operator has shape [B1,...,Bb, M, N], this returns a Tensor diagonal, of shape [B1,...,Bb, min(M, N)], where diagonal[b1,...,bb, i] = self.to_dense()[b1,...,bb, i, i].")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" my_operator = LinearOperatorDiag([1., 2.])\n\n# Efficiently get the diagonal\nmy_operator.diag_part()\n==> [1., 2.]\n\n# Equivalent, but inefficient method\ntf.linalg.diag_part(my_operator.to_dense())\n==> [1., 2.]\n")])])]),a("h4",{attrs:{id:"args-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-14","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-18","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("diag_part")]),e._v(": A "),a("code",[e._v("Tensor")]),e._v(" of same "),a("code",[e._v("dtype")]),e._v(" as self.")])]),e._v(" "),a("h3",{attrs:{id:"domain-dimension-tensor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#domain-dimension-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" domain_dimension_tensor")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L393-L414",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" domain_dimension_tensor(name='domain_dimension_tensor')\n")])])]),a("p",[e._v("Dimension (in the sense of vector spaces) of the domain of this operator.")]),e._v(" "),a("p",[e._v("Determined at runtime.")]),e._v(" "),a("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns N.")]),e._v(" "),a("h4",{attrs:{id:"args-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-15","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-19","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("int32 Tensor")]),e._v(" "),a("h3",{attrs:{id:"inverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inverse","aria-hidden":"true"}},[e._v("#")]),e._v(" inverse")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L890-L913",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" inverse(name='inverse')\n")])])]),a("p",[e._v("Returns the Inverse of this LinearOperator.")]),e._v(" "),a("p",[e._v("Given A representing this LinearOperator, return a LinearOperator representing A^-1.")]),e._v(" "),a("h4",{attrs:{id:"args-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-16","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" scope to use for ops added by this method.")])]),e._v(" "),a("h4",{attrs:{id:"returns-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-20","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("LinearOperator representing inverse of this matrix.")]),e._v(" "),a("h4",{attrs:{id:"raises-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": When the "),a("code",[e._v("LinearOperator")]),e._v(" is not hinted to be "),a("code",[e._v("non_singular")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"log-abs-determinant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#log-abs-determinant","aria-hidden":"true"}},[e._v("#")]),e._v(" log_abs_determinant")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L706-L723",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" log_abs_determinant(name='log_abs_det')\n")])])]),a("p",[e._v("Log absolute value of determinant for every batch member.")]),e._v(" "),a("h4",{attrs:{id:"args-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-17","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-21","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Tensor with shape self.batch_shape and same dtype as self.")]),e._v(" "),a("h4",{attrs:{id:"raises-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("NotImplementedError")]),e._v(": If "),a("code",[e._v("self.is_square")]),e._v(" is "),a("code",[e._v("False")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"matmul"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matmul","aria-hidden":"true"}},[e._v("#")]),e._v(" matmul")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L574-L627",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" matmul(\n    x,\n    adjoint=False,\n    adjoint_arg=False,\n    name='matmul'\n)\n")])])]),a("p",[e._v("Transform [batch] matrix x with left multiplication: x --\x3e Ax.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" # Make an operator acting like batch matrix A.  Assume A.shape = [..., M, N]\noperator = LinearOperator(...)\noperator.shape = [..., M, N]\n\nX = ... # shape [..., N, R], batch matrix, R > 0.\n\nY = operator.matmul(X)\nY.shape\n==> [..., M, R]\n\nY[..., :, r] = sum_j A[..., :, j] X[j, r]\n")])])]),a("h4",{attrs:{id:"args-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-18","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("x")]),e._v(": "),a("code",[e._v("LinearOperator")]),e._v(" or "),a("code",[e._v("Tensor")]),e._v(" with compatible shape and same "),a("code",[e._v("dtype")]),e._v(" as "),a("code",[e._v("self")]),e._v(". See class docstring for definition of compatibility.")]),e._v(" "),a("li",[a("code",[e._v("adjoint")]),e._v(": Python "),a("code",[e._v("bool")]),e._v(". If "),a("code",[e._v("True")]),e._v(", left multiply by the "),a("code",[e._v("adjoint")]),e._v(": A^H "),a("code",[e._v("x")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("adjoint")]),e._v("_arg: Python "),a("code",[e._v("bool")]),e._v(". If "),a("code",[e._v("True")]),e._v(", compute A "),a("code",[e._v("x")]),e._v("^H where "),a("code",[e._v("x")]),e._v("^H is the hermitian transpose (transposition and comple"),a("code",[e._v("x")]),e._v(" conjugation).")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-22","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A LinearOperator or Tensor with shape [..., M, R] and same dtype as self.")]),e._v(" "),a("h3",{attrs:{id:"matvec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matvec","aria-hidden":"true"}},[e._v("#")]),e._v(" matvec")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L634-L667",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" matvec(\n    x,\n    adjoint=False,\n    name='matvec'\n)\n")])])]),a("p",[e._v("Transform [batch] vector x with left multiplication: x --\x3e Ax.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" # Make an operator acting like batch matric A.  Assume A.shape = [..., M, N]\noperator = LinearOperator(...)\n\nX = ... # shape [..., N], batch vector\n\nY = operator.matvec(X)\nY.shape\n==> [..., M]\n\nY[..., :] = sum_j A[..., :, j] X[..., j]\n")])])]),a("h4",{attrs:{id:"args-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-19","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("x")]),e._v(": "),a("code",[e._v("Tensor")]),e._v(" with compatible shape and same "),a("code",[e._v("dtype")]),e._v(" as "),a("code",[e._v("self")]),e._v(". "),a("code",[e._v("x")]),e._v(" is treated as a [batch] vector meaning for every set of leading dimensions, the last dimension defines a vector. See class docstring for definition of compatibility.")]),e._v(" "),a("li",[a("code",[e._v("adjoint")]),e._v(": Python "),a("code",[e._v("bool")]),e._v(". If "),a("code",[e._v("True")]),e._v(", left multiply by the "),a("code",[e._v("adjoint")]),e._v(": A^H "),a("code",[e._v("x")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-23","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A Tensor with shape [..., M] and same dtype as self.")]),e._v(" "),a("h3",{attrs:{id:"range-dimension-tensor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#range-dimension-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" range_dimension_tensor")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L432-L453",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" range_dimension_tensor(name='range_dimension_tensor')\n")])])]),a("p",[e._v("Dimension (in the sense of vector spaces) of the range of this operator.")]),e._v(" "),a("p",[e._v("Determined at runtime.")]),e._v(" "),a("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns M.")]),e._v(" "),a("h4",{attrs:{id:"args-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-20","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-24","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("int32 Tensor")]),e._v(" "),a("h3",{attrs:{id:"shape-tensor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shape-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" shape_tensor")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L284-L302",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" shape_tensor(name='shape_tensor')\n")])])]),a("p",[e._v("Shape of this LinearOperator, determined at runtime.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/shape",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.shape(A)"),a("OutboundLink")],1),e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns a Tensor holding [B1,...,Bb, M, N], equivalent to .")]),e._v(" "),a("h4",{attrs:{id:"args-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-21","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-25","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("int32 Tensor")]),e._v(" "),a("h3",{attrs:{id:"solve"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solve","aria-hidden":"true"}},[e._v("#")]),e._v(" solve")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L740-L813",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" solve(\n    rhs,\n    adjoint=False,\n    adjoint_arg=False,\n    name='solve'\n)\n")])])]),a("p",[e._v("Solve (exact or approx) R (batch) systems of equations: A X = rhs.")]),e._v(" "),a("p",[e._v("The returned Tensor will be close to an exact solution if A is well conditioned. Otherwise closeness will vary. See class docstring for details.")]),e._v(" "),a("h4",{attrs:{id:"examples-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" # Make an operator acting like batch matrix A.  Assume A.shape = [..., M, N]\noperator = LinearOperator(...)\noperator.shape = [..., M, N]\n\n# Solve R > 0 linear systems for every member of the batch.\nRHS = ... # shape [..., M, R]\n\nX = operator.solve(RHS)\n# X[..., :, r] is the solution to the r'th linear system\n# sum_j A[..., :, j] X[..., j, r] = RHS[..., :, r]\n\noperator.matmul(X)\n==> RHS\n")])])]),a("h4",{attrs:{id:"args-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-22","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("rhs")]),e._v(": "),a("code",[e._v("Tensor")]),e._v(" with same "),a("code",[e._v("dtype")]),e._v(" as this operator and compatible shape. "),a("code",[e._v("rhs")]),e._v(" is treated like a [batch] matrix meaning for every set of leading dimensions, the last two dimensions defines a matrix. See class docstring for definition of compatibility.")]),e._v(" "),a("li",[a("code",[e._v("adjoint")]),e._v(": Python "),a("code",[e._v("bool")]),e._v(". If "),a("code",[e._v("True")]),e._v(", solve the system involving the "),a("code",[e._v("adjoint")]),e._v(" of this "),a("code",[e._v("LinearOperator")]),e._v(": A^H X = "),a("code",[e._v("rhs")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("adjoint")]),e._v("_arg: Python "),a("code",[e._v("bool")]),e._v(". If "),a("code",[e._v("True")]),e._v(", solve A X = "),a("code",[e._v("rhs")]),e._v("^H where "),a("code",[e._v("rhs")]),e._v("^H is the hermitian transpose (transposition and complex conjugation).")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" scope to use for ops added by this method.")])]),e._v(" "),a("h4",{attrs:{id:"returns-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-26","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Tensor with shape [...,N, R] and same dtype as rhs.")]),e._v(" "),a("h4",{attrs:{id:"raises-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("NotImplementedError")]),e._v(": If "),a("code",[e._v("self.is_non_singular")]),e._v(" or "),a("code",[e._v("is_square")]),e._v(" is False.")])]),e._v(" "),a("h3",{attrs:{id:"solvevec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solvevec","aria-hidden":"true"}},[e._v("#")]),e._v(" solvevec")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L821-L868",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" solvevec(\n    rhs,\n    adjoint=False,\n    name='solve'\n)\n")])])]),a("p",[e._v("Solve single equation with best effort: A X = rhs.")]),e._v(" "),a("p",[e._v("The returned Tensor will be close to an exact solution if A is well conditioned. Otherwise closeness will vary. See class docstring for details.")]),e._v(" "),a("h4",{attrs:{id:"examples-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" # Make an operator acting like batch matrix A.  Assume A.shape = [..., M, N]\noperator = LinearOperator(...)\noperator.shape = [..., M, N]\n\n# Solve one linear system for every member of the batch.\nRHS = ... # shape [..., M]\n\nX = operator.solvevec(RHS)\n# X is the solution to the linear system\n# sum_j A[..., :, j] X[..., j] = RHS[..., :]\n\noperator.matvec(X)\n==> RHS\n")])])]),a("h4",{attrs:{id:"args-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-23","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("rhs")]),e._v(": "),a("code",[e._v("Tensor")]),e._v(" with same "),a("code",[e._v("dtype")]),e._v(" as this operator. "),a("code",[e._v("rhs")]),e._v(" is treated like a [batch] vector meaning for every set of leading dimensions, the last dimension defines a vector. See class docstring for definition of compatibility regarding batch dimensions.")]),e._v(" "),a("li",[a("code",[e._v("adjoint")]),e._v(": Python "),a("code",[e._v("bool")]),e._v(". If "),a("code",[e._v("True")]),e._v(", solve the system involving the "),a("code",[e._v("adjoint")]),e._v(" of this "),a("code",[e._v("LinearOperator")]),e._v(": A^H X = "),a("code",[e._v("rhs")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" scope to use for ops added by this method.")])]),e._v(" "),a("h4",{attrs:{id:"returns-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-27","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Tensor with shape [...,N] and same dtype as rhs.")]),e._v(" "),a("h4",{attrs:{id:"raises-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("NotImplementedError")]),e._v(": If "),a("code",[e._v("self.is_non_singular")]),e._v(" or "),a("code",[e._v("is_square")]),e._v(" is False.")])]),e._v(" "),a("h3",{attrs:{id:"tensor-rank-tensor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tensor-rank-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" tensor_rank_tensor")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L357-L375",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tensor_rank_tensor(name='tensor_rank_tensor')\n")])])]),a("p",[e._v("Rank (in the sense of tensors) of matrix corresponding to this operator.")]),e._v(" "),a("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns b + 2.")]),e._v(" "),a("h4",{attrs:{id:"args-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-24","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-28","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("int32 Tensor, determined at runtime.")]),e._v(" "),a("h3",{attrs:{id:"to-dense"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to-dense","aria-hidden":"true"}},[e._v("#")]),e._v(" to_dense")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L956-L959",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" to_dense(name='to_dense')\n")])])]),a("p",[e._v("Return a dense (batch) matrix representing this operator.")]),e._v(" "),a("h3",{attrs:{id:"trace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trace","aria-hidden":"true"}},[e._v("#")]),e._v(" trace")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L996-L1008",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" trace(name='trace')\n")])])]),a("p",[e._v("Trace of the linear operator, equal to sum of self.diag_part().")]),e._v(" "),a("p",[e._v("If the operator is square, this is also the sum of the eigenvalues.")]),e._v(" "),a("h4",{attrs:{id:"args-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-25","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for this "),a("code",[e._v("Op")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-29"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-29","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Shape [B1,...,Bb] Tensor of same dtype as self.")])])}),[],!1,null,null,null);t.default=s.exports}}]);