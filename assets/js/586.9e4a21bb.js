(window.webpackJsonp=window.webpackJsonp||[]).push([[586],{774:function(e,t,a){"use strict";a.r(t);var o=a(0),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Computes the (weighted) mean of the given values.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.compat.v1.metrics.mean(\n    values,\n    weights=None,\n    metrics_collections=None,\n    updates_collections=None,\n    name=None\n)\n")])])]),a("p",[e._v("The mean function creates two local variables, total and count that are used to compute the average of values. This average is ultimately returned as mean which is an idempotent operation that simply divides total by count.")]),e._v(" "),a("p",[e._v("For estimation of the metric over a stream of data, the function creates an update_op operation that updates these variables and returns the mean. update_op increments total with the reduced sum of the product of values and weights, and it increments count with the reduced sum of weights.")]),e._v(" "),a("p",[e._v("If weights is None, weights default to 1. Use weights of 0 to mask values.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("values")]),e._v(": A "),a("code",[e._v("Tensor")]),e._v(" of arbitrary dimensions.")]),e._v(" "),a("li",[a("code",[e._v("weights")]),e._v(": Optional "),a("code",[e._v("Tensor")]),e._v(" whose rank is either 0, or the same rank as "),a("code",[e._v("values")]),e._v(", and must be broadcastable to "),a("code",[e._v("values")]),e._v(" (i.e., all dimensions must be either "),a("code",[e._v("1")]),e._v(", or the same as the corresponding "),a("code",[e._v("values")]),e._v(" dimension).")]),e._v(" "),a("li",[a("code",[e._v("metrics_collections")]),e._v(": An optional list of collections that "),a("code",[e._v("mean")]),e._v(" should be added to.")]),e._v(" "),a("li",[a("code",[e._v("updates_collections")]),e._v(": An optional list of collections that "),a("code",[e._v("update_op")]),e._v(" should be added to.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": An optional variable_scope "),a("code",[e._v("name")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("mean")]),e._v(": A "),a("code",[e._v("Tensor")]),e._v(" representing the current "),a("code",[e._v("mean")]),e._v(", the value of "),a("code",[e._v("total")]),e._v(" divided by "),a("code",[e._v("count")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("update_op")]),e._v(": An operation that increments the "),a("code",[e._v("total")]),e._v(" and "),a("code",[e._v("count")]),e._v(" variables appropriately and whose value matches "),a("code",[e._v("mean")]),e._v("_value.")])]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If "),a("code",[e._v("weights")]),e._v(" is not "),a("code",[e._v("None")]),e._v(" and its shape doesn't match "),a("code",[e._v("values")]),e._v(", or if either "),a("code",[e._v("metrics_collections")]),e._v(" or "),a("code",[e._v("updates_collections")]),e._v(" are not a list or tuple.")]),e._v(" "),a("li",[a("code",[e._v("RuntimeError")]),e._v(": If eager execution is enabled.")])])])}),[],!1,null,null,null);t.default=s.exports}}]);