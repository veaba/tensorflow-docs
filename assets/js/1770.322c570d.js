(window.webpackJsonp=window.webpackJsonp||[]).push([[1770],{1961:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"class-layer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-layer","aria-hidden":"true"}},[e._v("#")]),e._v(" Class Layer")]),e._v(" "),a("p",[e._v("Base layer class.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/Module",target:"_blank",rel:"noopener noreferrer"}},[e._v("Module"),a("OutboundLink")],1),e._v("Inherits From:")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[e._v("Class "),a("code",[e._v("tf.compat.v1.keras.layers.Layer")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.compat.v2.keras.layers.Layer")])])]),e._v(" "),a("p",[e._v("This is the class from which all layers inherit.")]),e._v(" "),a("p",[e._v("A layer is a class implementing common neural networks operations, such as convolution, batch norm, etc. These operations require managing weights, losses, updates, and inter-layer connectivity.")]),e._v(" "),a("p",[e._v("Users will just instantiate a layer and then treat it as a callable.")]),e._v(" "),a("p",[e._v("We recommend that descendants of Layer implement the following methods:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("__init__")]),e._v("(): Save configuration in member variables")]),e._v(" "),a("li",[a("code",[e._v("build")]),e._v("(): Called once from "),a("code",[e._v("__call__")]),e._v(", when we know the shapes of inputs and "),a("code",[e._v("dtype")]),e._v(". Should have the calls to "),a("code",[e._v("add_weight")]),e._v("(), and then call the super's "),a("code",[e._v("build")]),e._v("() (which sets "),a("code",[e._v("self.built = True")]),e._v(", which is nice in case the user wants to call "),a("code",[e._v("build")]),e._v("() manually before the first "),a("code",[e._v("__call__")]),e._v(").")]),e._v(" "),a("li",[a("code",[e._v("call")]),e._v("(): Called in "),a("code",[e._v("__call__")]),e._v(" after making sure "),a("code",[e._v("build")]),e._v("() has been "),a("code",[e._v("call")]),e._v("ed once. Should actually perform the logic of applying the layer to the input tensors (which should be passed in as the first argument).")])]),e._v(" "),a("h4",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("trainable")]),e._v(": Boolean, whether the layer's variables should be "),a("code",[e._v("trainable")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": String "),a("code",[e._v("name")]),e._v(" of the layer.")]),e._v(" "),a("li",[a("code",[e._v("dtype")]),e._v(": The "),a("code",[e._v("dtype")]),e._v(" of the layer's computations and weights (default of "),a("code",[e._v("None")]),e._v(" means use "),a("code",[e._v("tf.keras.backend.floatx")]),e._v(" in TensorFlow 2, or the type of the first input in TensorFlow 1).")]),e._v(" "),a("li",[a("code",[e._v("dynamic")]),e._v(": Set this to "),a("code",[e._v("True")]),e._v(" if your layer should only be run eagerly, and should not be used to generate a static computation graph. This would be the case for a Tree-RNN or a recursive network, for example, or generally for any layer that manipulates tensors using Python control flow. If "),a("code",[e._v("False")]),e._v(", we assume that the layer can safely be used to generate a static computation graph.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/keras/mixed_precision/experimental/Policy",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.keras.mixed_precision.experimental.Policy"),a("OutboundLink")],1),e._v("Read-only properties: name: The name of the layer (string). dtype: The dtype of the layer's computations and weights. If mixed precision is used with a , this is instead just the dtype of the layer's weights, as the computations are done in a different dtype. updates: List of update ops of this layer. losses: List of losses added by this layer. trainable_weights: List of variables to be included in backprop. non_trainable_weights: List of variables that should not be included in backprop. weights: The concatenation of the lists trainable_weights and non_trainable_weights (in this order).")])]),e._v(" "),a("h4",{attrs:{id:"mutable-properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutable-properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Mutable properties:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("trainable")]),e._v(": Whether the layer should be trained (boolean).")]),e._v(" "),a("li",[a("code",[e._v("input_spec")]),e._v(": Optional (list of) "),a("code",[e._v("InputSpec")]),e._v(" object(s) specifying the constraints on inputs that can be accepted by the layer.")])]),e._v(" "),a("h3",{attrs:{id:"dtypes-and-casting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dtypes-and-casting","aria-hidden":"true"}},[e._v("#")]),e._v(" Dtypes and casting")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/keras/layers/Layer#dtype",target:"_blank",rel:"noopener noreferrer"}},[e._v("Layer.dtype"),a("OutboundLink")],1),e._v("Each layer has a dtype, which is typically the dtype of the layer's computations and variables. A layer's dtype can be queried via the  property. The dtype is specified with the dtype constructor argument. In TensorFlow 2, the dtype defaults to tf.keras.backend.floatx() if no dtype is passed. floatx() itself defaults to \"float32\". Additionally, layers will cast their inputs to the layer's dtype in TensorFlow 2. For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" x = tf.ones((4, 4, 4, 4), dtype='float64')\nlayer = tf.keras.layers.Conv2D(filters=4, kernel_size=2)\nprint(layer.dtype)  # float32\n\n# `layer` casts it's inputs to layer.dtype, which is float32, and does\n# computations in float32.\ny = layer(x)\n")])])]),a("p",[e._v("Currently, only tensors in the first argument to the layer's call method are casted. For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' class MyLayer(tf.keras.layers.Layer):\n  # Bug! `b` will not be casted.\n  def call(self, a, b):\n    return a + 1., b + 1.\n\na = tf.constant(1., dtype="float32")\nb = tf.constant(1., dtype="float32")\n\nlayer = MyLayer(dtype="float64")\nx, y = layer(a, b)\nprint(x.dtype)  # float64\nprint(y.dtype)  # float32. Not casted since `b` was not passed to first input\n')])])]),a("p",[e._v("It is recommended to accept tensors only in the first argument. This way, all tensors are casted to the layer's dtype. MyLayer should therefore be written as:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' class MyLayer(tf.keras.layers.Layer):\n  # Now, all tensor inputs will be casted.\n  def call(self, inputs):\n    a, b = inputs\n    return a + 1., b + 1.\n\na = tf.constant(1., dtype="float32")\nb = tf.constant(1., dtype="float32")\n\nlayer = MyLayer(dtype="float64")\nx, y = layer((a, b))\nprint(x.dtype)  # float64\nprint(y.dtype)  # float64.\n')])])]),a("p",[e._v("In a future minor release, tensors in other arguments may be casted as well.")]),e._v(" "),a("p",[e._v("Currently, other arguments are not automatically casted for technical reasons, but this may change in a future minor release.")]),e._v(" "),a("p",[e._v("A layer subclass can prevent its inputs from being autocasted by passing autocast=False to the layer constructor. For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" class MyLayer(tf.keras.layers.Layer):\n\n  def __init__(self, **kwargs):\n    kwargs['autocast']=False\n    super(MyLayer, self).__init__(**kwargs)\n\n  def call(self, inp):\n    return inp\n\nx = tf.ones((4, 4, 4, 4), dtype='float64')\nlayer = MyLayer()\nprint(layer.dtype)  # float32.\ny = layer(x)  # MyLayer will not cast inputs to it's dtype of float32\nprint(y.dtype)  # float64\n")])])]),a("h4",{attrs:{id:"running-models-in-float64-in-tensorflow-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-models-in-float64-in-tensorflow-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Running models in float64 in TensorFlow 2")]),e._v(" "),a("p",[e._v("If you want to run a Model in float64, you can set floatx to be float64 by calling tf.keras.backend.set_floatx('float64'). This will cause all layers to default to float64 instead of float32:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.keras.backend.set_floatx('float64')\nlayer1 = tf.keras.layers.Dense(4)\nlayer2 = tf.keras.layers.Dense(4)\n\nx = tf.ones((4, 4))\ny = layer2(layer1(x))  # Both layers run in float64\n")])])]),a("p",[e._v("Alternatively, you can pass dtype='float64' to each individual layer. Note that if you have any layers which contain other layers as members, you must ensure each sublayer gets dtype='float64' passed to it's constructor as well:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" layer1 = tf.keras.layers.Dense(4, dtype='float64')\nlayer2 = tf.keras.layers.Dense(4, dtype='float64')\n\nx = tf.ones((4, 4))\ny = layer2(layer1(x))  # Both layers run in float64\n\nclass NestedLayer(tf.keras.layers.Layer):\n  def __init__(self, **kwargs):\n    super(NestedLayer, self).__init__(**kwargs)\n    self.dense = tf.keras.layers.Dense(4, dtype=kwargs.get('dtype'))\n\n  def call(self, inp):\n    return self.dense(inp)\n\nlayer3 = NestedLayer(dtype='float64')\nz = layer3(x)  # layer3's dense layer runs in float64, since NestedLayer\n               # correcty passed it's dtype to it's dense layer\n")])])]),a("h2",{attrs:{id:"init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("init")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L277-L363",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __init__(\n    trainable=True,\n    name=None,\n    dtype=None,\n    dynamic=False,\n    **kwargs\n)\n")])])]),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),a("h3",{attrs:{id:"activity-regularizer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#activity-regularizer","aria-hidden":"true"}},[e._v("#")]),e._v(" activity_regularizer")]),e._v(" "),a("p",[e._v("Optional regularizer function for the output of this layer.")]),e._v(" "),a("h3",{attrs:{id:"dtype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dtype","aria-hidden":"true"}},[e._v("#")]),e._v(" dtype")]),e._v(" "),a("h3",{attrs:{id:"dynamic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic","aria-hidden":"true"}},[e._v("#")]),e._v(" dynamic")]),e._v(" "),a("h3",{attrs:{id:"input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#input","aria-hidden":"true"}},[e._v("#")]),e._v(" input")]),e._v(" "),a("p",[e._v("Retrieves the input tensor(s) of a layer.")]),e._v(" "),a("p",[e._v("Only applicable if the layer has exactly one input, i.e. if it is connected to one incoming layer.")]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Input tensor or list of input tensors.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("RuntimeError")]),e._v(": If called in Eager mode.")]),e._v(" "),a("li",[a("code",[e._v("AttributeError")]),e._v(": If no inbound nodes are found.")])]),e._v(" "),a("h3",{attrs:{id:"input-mask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#input-mask","aria-hidden":"true"}},[e._v("#")]),e._v(" input_mask")]),e._v(" "),a("p",[e._v("Retrieves the input mask tensor(s) of a layer.")]),e._v(" "),a("p",[e._v("Only applicable if the layer has exactly one inbound node, i.e. if it is connected to one incoming layer.")]),e._v(" "),a("h4",{attrs:{id:"returns-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Input mask tensor (potentially None) or list of input mask tensors.")]),e._v(" "),a("h4",{attrs:{id:"raises-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("AttributeError")]),e._v(": if the layer is connected to more than one incoming layers.")])]),e._v(" "),a("h3",{attrs:{id:"input-shape"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#input-shape","aria-hidden":"true"}},[e._v("#")]),e._v(" input_shape")]),e._v(" "),a("p",[e._v("Retrieves the input shape(s) of a layer.")]),e._v(" "),a("p",[e._v("Only applicable if the layer has exactly one input, i.e. if it is connected to one incoming layer, or if all inputs have the same shape.")]),e._v(" "),a("h4",{attrs:{id:"returns-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Input shape, as an integer shape tuple (or list of shape tuples, one tuple per input tensor).")]),e._v(" "),a("h4",{attrs:{id:"raises-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("AttributeError")]),e._v(": if the layer has no defined input_shape.")]),e._v(" "),a("li",[a("code",[e._v("RuntimeError")]),e._v(": if called in Eager mode.")])]),e._v(" "),a("h3",{attrs:{id:"input-spec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#input-spec","aria-hidden":"true"}},[e._v("#")]),e._v(" input_spec")]),e._v(" "),a("h3",{attrs:{id:"losses"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#losses","aria-hidden":"true"}},[e._v("#")]),e._v(" losses")]),e._v(" "),a("p",[e._v("Losses which are associated with this Layer.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/GradientTape",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.GradientTape"),a("OutboundLink")],1),e._v("Variable regularization tensors are created when this property is accessed, so it is eager safe: accessing losses under a  will propagate gradients back to the corresponding variables.")]),e._v(" "),a("h4",{attrs:{id:"returns-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A list of tensors.")]),e._v(" "),a("h3",{attrs:{id:"metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metrics","aria-hidden":"true"}},[e._v("#")]),e._v(" metrics")]),e._v(" "),a("h3",{attrs:{id:"name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#name","aria-hidden":"true"}},[e._v("#")]),e._v(" name")]),e._v(" "),a("p",[e._v("Returns the name of this module as passed or determined in the ctor.")]),e._v(" "),a("p",[e._v("NOTE: This is not the same as the self.name_scope.name which includes parent module names.")]),e._v(" "),a("h3",{attrs:{id:"non-trainable-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#non-trainable-variables","aria-hidden":"true"}},[e._v("#")]),e._v(" non_trainable_variables")]),e._v(" "),a("h3",{attrs:{id:"non-trainable-weights"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#non-trainable-weights","aria-hidden":"true"}},[e._v("#")]),e._v(" non_trainable_weights")]),e._v(" "),a("h3",{attrs:{id:"output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output","aria-hidden":"true"}},[e._v("#")]),e._v(" output")]),e._v(" "),a("p",[e._v("Retrieves the output tensor(s) of a layer.")]),e._v(" "),a("p",[e._v("Only applicable if the layer has exactly one output, i.e. if it is connected to one incoming layer.")]),e._v(" "),a("h4",{attrs:{id:"returns-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Output tensor or list of output tensors.")]),e._v(" "),a("h4",{attrs:{id:"raises-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("AttributeError")]),e._v(": if the layer is connected to more than one incoming layers.")]),e._v(" "),a("li",[a("code",[e._v("RuntimeError")]),e._v(": if called in Eager mode.")])]),e._v(" "),a("h3",{attrs:{id:"output-mask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-mask","aria-hidden":"true"}},[e._v("#")]),e._v(" output_mask")]),e._v(" "),a("p",[e._v("Retrieves the output mask tensor(s) of a layer.")]),e._v(" "),a("p",[e._v("Only applicable if the layer has exactly one inbound node, i.e. if it is connected to one incoming layer.")]),e._v(" "),a("h4",{attrs:{id:"returns-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Output mask tensor (potentially None) or list of output mask tensors.")]),e._v(" "),a("h4",{attrs:{id:"raises-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("AttributeError")]),e._v(": if the layer is connected to more than one incoming layers.")])]),e._v(" "),a("h3",{attrs:{id:"output-shape"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-shape","aria-hidden":"true"}},[e._v("#")]),e._v(" output_shape")]),e._v(" "),a("p",[e._v("Retrieves the output shape(s) of a layer.")]),e._v(" "),a("p",[e._v("Only applicable if the layer has one output, or if all outputs have the same shape.")]),e._v(" "),a("h4",{attrs:{id:"returns-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Output shape, as an integer shape tuple (or list of shape tuples, one tuple per output tensor).")]),e._v(" "),a("h4",{attrs:{id:"raises-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("AttributeError")]),e._v(": if the layer has no defined output shape.")]),e._v(" "),a("li",[a("code",[e._v("RuntimeError")]),e._v(": if called in Eager mode.")])]),e._v(" "),a("h3",{attrs:{id:"trainable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trainable","aria-hidden":"true"}},[e._v("#")]),e._v(" trainable")]),e._v(" "),a("h3",{attrs:{id:"trainable-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trainable-variables","aria-hidden":"true"}},[e._v("#")]),e._v(" trainable_variables")]),e._v(" "),a("p",[e._v("Sequence of variables owned by this module and it's submodules.")]),e._v(" "),a("h4",{attrs:{id:"returns-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A sequence of variables for the current module (sorted by attribute name) followed by variables from all submodules recursively (breadth first).")]),e._v(" "),a("h3",{attrs:{id:"trainable-weights"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trainable-weights","aria-hidden":"true"}},[e._v("#")]),e._v(" trainable_weights")]),e._v(" "),a("h3",{attrs:{id:"updates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updates","aria-hidden":"true"}},[e._v("#")]),e._v(" updates")]),e._v(" "),a("h3",{attrs:{id:"variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variables","aria-hidden":"true"}},[e._v("#")]),e._v(" variables")]),e._v(" "),a("p",[e._v("Returns the list of all layer variables/weights.")]),e._v(" "),a("p",[e._v("Alias of self.weights.")]),e._v(" "),a("h4",{attrs:{id:"returns-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A list of variables.")]),e._v(" "),a("h3",{attrs:{id:"weights"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weights","aria-hidden":"true"}},[e._v("#")]),e._v(" weights")]),e._v(" "),a("p",[e._v("Returns the list of all layer variables/weights.")]),e._v(" "),a("h4",{attrs:{id:"returns-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-10","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A list of variables.")]),e._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),a("h3",{attrs:{id:"call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("call")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L703-L895",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __call__(\n    inputs,\n    *args,\n    **kwargs\n)\n")])])]),a("p",[e._v("Wraps call, applying pre- and post-processing steps.")]),e._v(" "),a("h4",{attrs:{id:"arguments-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("inputs")]),e._v(": input tensor(s).")])]),e._v(" "),a("h4",{attrs:{id:"returns-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-11","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Output tensor(s).")]),e._v(" "),a("h4",{attrs:{id:"note"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#note","aria-hidden":"true"}},[e._v("#")]),e._v(" Note:")]),e._v(" "),a("ul",[a("li",[e._v("The following optional keyword arguments are reserved for specific uses:\n"),a("code",[e._v("training")]),e._v(": Boolean scalar tensor of Python boolean indicating whether the "),a("code",[e._v("call")]),e._v(" is meant for "),a("code",[e._v("training")]),e._v(" or inference.\n"),a("code",[e._v("mask")]),e._v(": Boolean input "),a("code",[e._v("mask")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("training")]),e._v(": Boolean scalar tensor of Python boolean indicating whether the "),a("code",[e._v("call")]),e._v(" is meant for "),a("code",[e._v("training")]),e._v(" or inference.")]),e._v(" "),a("li",[a("code",[e._v("mask")]),e._v(": Boolean input "),a("code",[e._v("mask")]),e._v(".")]),e._v(" "),a("li",[e._v("If the layer's "),a("code",[e._v("call")]),e._v(" method takes a "),a("code",[e._v("mask")]),e._v(" argument (as some Keras layers do), its default value will be set to the "),a("code",[e._v("mask")]),e._v(" generated for "),a("code",[e._v("inputs")]),e._v(" by the previous layer (if "),a("code",[e._v("input")]),e._v(" did come from a layer that generated a corresponding "),a("code",[e._v("mask")]),e._v(", i.e. if it came from a Keras layer with "),a("code",[e._v("mask")]),e._v("ing support.")])]),e._v(" "),a("h4",{attrs:{id:"raises-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": if the layer's "),a("code",[e._v("call")]),e._v(" method returns None (an invalid value).")])]),e._v(" "),a("h3",{attrs:{id:"add-loss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-loss","aria-hidden":"true"}},[e._v("#")]),e._v(" add_loss")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1017-L1135",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" add_loss(\n    losses,\n    inputs=None\n)\n")])])]),a("p",[e._v("Add loss tensor(s), potentially dependent on layer inputs.")]),e._v(" "),a("p",[e._v("Some losses (for instance, activity regularization losses) may be dependent on the inputs passed when calling a layer. Hence, when reusing the same layer on different inputs a and b, some entries in layer.losses may be dependent on a and some on b. This method automatically keeps track of dependencies.")]),e._v(" "),a("p",[e._v("This method can be used inside a subclassed layer or model's call function, in which case losses should be a Tensor or list of Tensors.")]),e._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" class MyLayer(tf.keras.layers.Layer):\n  def call(inputs, self):\n    self.add_loss(tf.abs(tf.reduce_mean(inputs)), inputs=True)\n    return inputs\n")])])]),a("p",[e._v("This method can also be called directly on a Functional Model during construction. In this case, any loss Tensors passed to this Model must be symbolic and be able to be traced back to the model's Inputs. These losses become part of the model's topology and are tracked in get_config.")]),e._v(" "),a("h4",{attrs:{id:"example-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" inputs = tf.keras.Input(shape=(10,))\nx = tf.keras.layers.Dense(10)(inputs)\noutputs = tf.keras.layers.Dense(1)(x)\nmodel = tf.keras.Model(inputs, outputs)\n# Actvity regularization.\nmodel.add_loss(tf.abs(tf.reduce_mean(x)))\n")])])]),a("p",[e._v("If this is not the case for your loss (if, for example, your loss references a Variable of one of the model's layers), you can wrap your loss in a zero-argument lambda. These losses are not tracked as part of the model's topology since they can't be serialized.")]),e._v(" "),a("h4",{attrs:{id:"example-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" inputs = tf.keras.Input(shape=(10,))\nx = tf.keras.layers.Dense(10)(inputs)\noutputs = tf.keras.layers.Dense(1)(x)\nmodel = tf.keras.Model(inputs, outputs)\n# Weight regularization.\nmodel.add_loss(lambda: tf.reduce_mean(x.kernel))\n")])])]),a("p",[e._v("The get_losses_for method allows to retrieve the losses relevant to a specific set of inputs.")]),e._v(" "),a("h4",{attrs:{id:"arguments-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("losses")]),e._v(": Loss tensor, or list/tuple of tensors. Rather than tensors, "),a("code",[e._v("losses")]),e._v(" may also be zero-argument callables which create a loss tensor.")]),e._v(" "),a("li",[a("code",[e._v("inputs")]),e._v(": Ignored when executing eagerly. If anything other than "),a("code",[e._v("None")]),e._v(" is passed, it signals the "),a("code",[e._v("losses")]),e._v(" are conditional on some of the layer's "),a("code",[e._v("inputs")]),e._v(", and thus they should only be run where these "),a("code",[e._v("inputs")]),e._v(" are available. This is the case for activity regularization "),a("code",[e._v("losses")]),e._v(", for instance. If "),a("code",[e._v("None")]),e._v(" is passed, the "),a("code",[e._v("losses")]),e._v(" are assumed to be unconditional, and will apply across all dataflows of the layer (e.g. weight regularization "),a("code",[e._v("losses")]),e._v(").")])]),e._v(" "),a("h3",{attrs:{id:"add-metric"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-metric","aria-hidden":"true"}},[e._v("#")]),e._v(" add_metric")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1150-L1219",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" add_metric(\n    value,\n    aggregation=None,\n    name=None\n)\n")])])]),a("p",[e._v("Adds metric tensor to the layer.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("value")]),e._v(": Metric tensor.")]),e._v(" "),a("li",[a("code",[e._v("aggregation")]),e._v(": Sample-wise metric reduction function. If "),a("code",[e._v("aggregation")]),e._v("=None, it indicates that the metric tensor provided has been aggregated already. eg, bin_acc = BinaryAccuracy(name='acc') followed by model.add_metric(bin_acc(y_true, y_pred)). If "),a("code",[e._v("aggregation")]),e._v("='"),a("code",[e._v("mean")]),e._v("', the given metric tensor will be sample-wise reduced using "),a("code",[e._v("mean")]),e._v(" function. eg, model.add_metric(tf.reduce_sum(outputs), name='output_"),a("code",[e._v("mean")]),e._v("', "),a("code",[e._v("aggregation")]),e._v("='"),a("code",[e._v("mean")]),e._v("').")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": String metric "),a("code",[e._v("name")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"raises-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If "),a("code",[e._v("aggregation")]),e._v(" is anything other than None or "),a("code",[e._v("mean")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"add-update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-update","aria-hidden":"true"}},[e._v("#")]),e._v(" add_update")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1221-L1305",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" add_update(\n    updates,\n    inputs=None\n)\n")])])]),a("p",[e._v("Add update op(s), potentially dependent on layer inputs. (deprecated arguments)")]),e._v(" "),a("p",[e._v("Weight updates (for instance, the updates of the moving mean and variance in a BatchNormalization layer) may be dependent on the inputs passed when calling a layer. Hence, when reusing the same layer on different inputs a and b, some entries in layer.updates may be dependent on a and some on b. This method automatically keeps track of dependencies.")]),e._v(" "),a("p",[e._v("The get_updates_for method allows to retrieve the updates relevant to a specific set of inputs.")]),e._v(" "),a("p",[e._v("This call is ignored when eager execution is enabled (in that case, variable updates are run on the fly and thus do not need to be tracked for later execution).")]),e._v(" "),a("h4",{attrs:{id:"arguments-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("updates")]),e._v(": Update op, or list/tuple of update ops, or zero-arg callable that returns an update op. A zero-arg callable should be passed in order to disable running the "),a("code",[e._v("updates")]),e._v(" by setting "),a("code",[e._v("trainable=False")]),e._v(" on this Layer, when executing in Eager mode.")]),e._v(" "),a("li",[a("code",[e._v("inputs")]),e._v(": Deprecated, will be automatically inferred.")])]),e._v(" "),a("h3",{attrs:{id:"add-weight"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-weight","aria-hidden":"true"}},[e._v("#")]),e._v(" add_weight")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L394-L537",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" add_weight(\n    name=None,\n    shape=None,\n    dtype=None,\n    initializer=None,\n    regularizer=None,\n    trainable=None,\n    constraint=None,\n    partitioner=None,\n    use_resource=None,\n    synchronization=tf.VariableSynchronization.AUTO,\n    aggregation=tf.compat.v1.VariableAggregation.NONE,\n    **kwargs\n)\n")])])]),a("p",[e._v("Adds a new variable to the layer.")]),e._v(" "),a("h4",{attrs:{id:"arguments-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": Variable "),a("code",[e._v("name")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("shape")]),e._v(": Variable "),a("code",[e._v("shape")]),e._v(". Defaults to scalar if unspecified.")]),e._v(" "),a("li",[a("code",[e._v("dtype")]),e._v(": The type of the variable. Defaults to "),a("code",[e._v("self.dtype")]),e._v(" or "),a("code",[e._v("float32")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("initializer")]),e._v(": Initializer instance (callable).")]),e._v(" "),a("li",[a("code",[e._v("regularizer")]),e._v(": Regularizer instance (callable).")]),e._v(" "),a("li",[a("code",[e._v("trainable")]),e._v(": Boolean, whether the variable should be part of the layer's \""),a("code",[e._v("trainable")]),a("em",[e._v('variables" (e.g. variables, biases) or "non')]),a("code",[e._v("trainable")]),e._v('_variables" (e.g. BatchNorm mean and variance). Note that '),a("code",[e._v("trainable")]),e._v(" cannot be "),a("code",[e._v("True")]),e._v(" if "),a("code",[e._v("synchronization")]),e._v(" is set to "),a("code",[e._v("ON_READ")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("constraint")]),e._v(": Constraint instance (callable).")]),e._v(" "),a("li",[a("code",[e._v("partitioner")]),e._v(": Partitioner to be passed to the "),a("code",[e._v("Trackable")]),e._v(" API.")]),e._v(" "),a("li",[a("code",[e._v("use_resource")]),e._v(": Whether to use "),a("code",[e._v("ResourceVariable")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("synchronization")]),e._v(": Indicates when a distributed a variable will be aggregated. Accepted values are constants defined in the class "),a("code",[e._v("tf.VariableSynchronization")]),e._v(". By default the "),a("code",[e._v("synchronization")]),e._v(" is set to "),a("code",[e._v("AUTO")]),e._v(" and the current "),a("code",[e._v("DistributionStrategy")]),e._v(" chooses when to synchronize. If "),a("code",[e._v("synchronization")]),e._v(" is set to "),a("code",[e._v("ON_READ")]),e._v(", "),a("code",[e._v("trainable")]),e._v(" must not be set to "),a("code",[e._v("True")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("aggregation")]),e._v(": Indicates how a distributed variable will be aggregated. Accepted values are constants defined in the class "),a("code",[e._v("tf.VariableAggregation")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-12","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The created variable. Usually either a Variable or ResourceVariable instance. If partitioner is not None, a PartitionedVariable instance is returned.")]),e._v(" "),a("h4",{attrs:{id:"raises-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("RuntimeError")]),e._v(": If called with partitioned variable regularization and eager execution is enabled.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": When giving unsupported dtype and no initializer or when trainable has been set to True with synchronization set as "),a("code",[e._v("ON_READ")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"build"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build","aria-hidden":"true"}},[e._v("#")]),e._v(" build")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L365-L379",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" build(input_shape)\n")])])]),a("p",[e._v("Creates the variables of the layer (optional, for subclass implementers).")]),e._v(" "),a("p",[e._v("This is a method that implementers of subclasses of Layer or Model can override if they need a state-creation step in-between layer instantiation and layer call.")]),e._v(" "),a("p",[e._v("This is typically used to create the weights of Layer subclasses.")]),e._v(" "),a("h4",{attrs:{id:"arguments-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("input_shape")]),e._v(": Instance of "),a("code",[e._v("TensorShape")]),e._v(", or list of instances of "),a("code",[e._v("TensorShape")]),e._v(" if the layer expects a list of inputs (one instance per input).")])]),e._v(" "),a("h3",{attrs:{id:"call-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-2","aria-hidden":"true"}},[e._v("#")]),e._v(" call")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L381-L392",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" call(\n    inputs,\n    **kwargs\n)\n")])])]),a("p",[e._v("This is where the layer's logic lives.")]),e._v(" "),a("h4",{attrs:{id:"arguments-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("inputs")]),e._v(": Input tensor, or list/tuple of input tensors.")])]),e._v(" "),a("h4",{attrs:{id:"returns-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-13","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A tensor or list/tuple of tensors.")]),e._v(" "),a("h3",{attrs:{id:"compute-mask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compute-mask","aria-hidden":"true"}},[e._v("#")]),e._v(" compute_mask")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L681-L701",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" compute_mask(\n    inputs,\n    mask=None\n)\n")])])]),a("p",[e._v("Computes an output mask tensor.")]),e._v(" "),a("h4",{attrs:{id:"arguments-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("inputs")]),e._v(": Tensor or list of tensors.")]),e._v(" "),a("li",[a("code",[e._v("mask")]),e._v(": Tensor or list of tensors.")])]),e._v(" "),a("h4",{attrs:{id:"returns-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-14","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("None or a tensor (or list of tensors, one per output tensor of the layer).")]),e._v(" "),a("h3",{attrs:{id:"compute-output-shape"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compute-output-shape","aria-hidden":"true"}},[e._v("#")]),e._v(" compute_output_shape")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L596-L639",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" compute_output_shape(input_shape)\n")])])]),a("p",[e._v("Computes the output shape of the layer.")]),e._v(" "),a("p",[e._v("If the layer has not been built, this method will call build on the layer. This assumes that the layer will later be used with inputs that match the input shape provided here.")]),e._v(" "),a("h4",{attrs:{id:"arguments-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("input_shape")]),e._v(": Shape tuple (tuple of integers) or list of shape tuples (one per output tensor of the layer). Shape tuples can include None for free dimensions, instead of an integer.")])]),e._v(" "),a("h4",{attrs:{id:"returns-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-15","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("An input shape tuple.")]),e._v(" "),a("h3",{attrs:{id:"compute-output-signature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compute-output-signature","aria-hidden":"true"}},[e._v("#")]),e._v(" compute_output_signature")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L641-L679",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" compute_output_signature(input_signature)\n")])])]),a("p",[e._v("Compute the output tensor signature of the layer based on the inputs.")]),e._v(" "),a("p",[e._v("Unlike a TensorShape object, a TensorSpec object contains both shape and dtype information for a tensor. This method allows layers to provide output dtype information if it is different from the input dtype. For any layer that doesn't implement this function, the framework will fall back to use compute_output_shape, and will assume that the output dtype matches the input dtype.")]),e._v(" "),a("h4",{attrs:{id:"args-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("input_signature")]),e._v(": Single TensorSpec or nested structure of TensorSpec objects, describing a candidate input for the layer.")])]),e._v(" "),a("h4",{attrs:{id:"returns-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-16","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Single TensorSpec or nested structure of TensorSpec objects, describing how the layer would transform the provided input.")]),e._v(" "),a("h4",{attrs:{id:"raises-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-10","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TypeError")]),e._v(": If input_signature contains a non-TensorSpec object.")])]),e._v(" "),a("h3",{attrs:{id:"count-params"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#count-params","aria-hidden":"true"}},[e._v("#")]),e._v(" count_params")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1611-L1630",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" count_params()\n")])])]),a("p",[e._v("Count the total number of scalars composing the weights.")]),e._v(" "),a("h4",{attrs:{id:"returns-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-17","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("An integer count.")]),e._v(" "),a("h4",{attrs:{id:"raises-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-11","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": if the layer isn't yet built (in which case its weights aren't yet defined).")])]),e._v(" "),a("h3",{attrs:{id:"from-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from-config","aria-hidden":"true"}},[e._v("#")]),e._v(" from_config")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L578-L594",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" @classmethod\nfrom_config(\n    cls,\n    config\n)\n")])])]),a("p",[e._v("Creates a layer from its config.")]),e._v(" "),a("p",[e._v("This method is the reverse of get_config, capable of instantiating the same layer from the config dictionary. It does not handle layer connectivity (handled by Network), nor weights (handled by set_weights).")]),e._v(" "),a("h4",{attrs:{id:"arguments-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-10","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("config")]),e._v(": A Python dictionary, typically the output of get_"),a("code",[e._v("config")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-18","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A layer instance.")]),e._v(" "),a("h3",{attrs:{id:"get-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-config","aria-hidden":"true"}},[e._v("#")]),e._v(" get_config")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L539-L576",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_config()\n")])])]),a("p",[e._v("Returns the config of the layer.")]),e._v(" "),a("p",[e._v("A layer config is a Python dictionary (serializable) containing the configuration of a layer. The same layer can be reinstantiated later (without its trained weights) from this configuration.")]),e._v(" "),a("p",[e._v("The config of a layer does not include connectivity information, nor the layer class name. These are handled by Network (one layer of abstraction above).")]),e._v(" "),a("h4",{attrs:{id:"returns-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-19","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Python dictionary.")]),e._v(" "),a("h3",{attrs:{id:"get-input-at"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-input-at","aria-hidden":"true"}},[e._v("#")]),e._v(" get_input_at")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1505-L1521",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_input_at(node_index)\n")])])]),a("p",[e._v("Retrieves the input tensor(s) of a layer at a given node.")]),e._v(" "),a("h4",{attrs:{id:"arguments-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-11","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("node_index")]),e._v(": Integer, index of the node from which to retrieve the attribute. E.g. "),a("code",[e._v("node_index")]),e._v("=0 will correspond to the first time the layer was called.")])]),e._v(" "),a("h4",{attrs:{id:"returns-20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-20","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A tensor (or list of tensors if the layer has multiple inputs).")]),e._v(" "),a("h4",{attrs:{id:"raises-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-12","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("RuntimeError")]),e._v(": If called in Eager mode.")])]),e._v(" "),a("h3",{attrs:{id:"get-input-mask-at"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-input-mask-at","aria-hidden":"true"}},[e._v("#")]),e._v(" get_input_mask_at")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1387-L1404",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_input_mask_at(node_index)\n")])])]),a("p",[e._v("Retrieves the input mask tensor(s) of a layer at a given node.")]),e._v(" "),a("h4",{attrs:{id:"arguments-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-12","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("node_index")]),e._v(": Integer, index of the node from which to retrieve the attribute. E.g. "),a("code",[e._v("node_index")]),e._v("=0 will correspond to the first time the layer was called.")])]),e._v(" "),a("h4",{attrs:{id:"returns-21"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-21","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A mask tensor (or list of tensors if the layer has multiple inputs).")]),e._v(" "),a("h3",{attrs:{id:"get-input-shape-at"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-input-shape-at","aria-hidden":"true"}},[e._v("#")]),e._v(" get_input_shape_at")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1467-L1484",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_input_shape_at(node_index)\n")])])]),a("p",[e._v("Retrieves the input shape(s) of a layer at a given node.")]),e._v(" "),a("h4",{attrs:{id:"arguments-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-13","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("node_index")]),e._v(": Integer, index of the node from which to retrieve the attribute. E.g. "),a("code",[e._v("node_index")]),e._v("=0 will correspond to the first time the layer was called.")])]),e._v(" "),a("h4",{attrs:{id:"returns-22"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-22","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A shape tuple (or list of shape tuples if the layer has multiple inputs).")]),e._v(" "),a("h4",{attrs:{id:"raises-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-13","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("RuntimeError")]),e._v(": If called in Eager mode.")])]),e._v(" "),a("h3",{attrs:{id:"get-losses-for"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-losses-for","aria-hidden":"true"}},[e._v("#")]),e._v(" get_losses_for")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1368-L1385",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_losses_for(inputs)\n")])])]),a("p",[e._v("Retrieves losses relevant to a specific set of inputs.")]),e._v(" "),a("h4",{attrs:{id:"arguments-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-14","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("inputs")]),e._v(": Input tensor or list/tuple of input tensors.")])]),e._v(" "),a("h4",{attrs:{id:"returns-23"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-23","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("List of loss tensors of the layer that depend on inputs.")]),e._v(" "),a("h3",{attrs:{id:"get-output-at"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-output-at","aria-hidden":"true"}},[e._v("#")]),e._v(" get_output_at")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1523-L1539",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_output_at(node_index)\n")])])]),a("p",[e._v("Retrieves the output tensor(s) of a layer at a given node.")]),e._v(" "),a("h4",{attrs:{id:"arguments-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-15","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("node_index")]),e._v(": Integer, index of the node from which to retrieve the attribute. E.g. "),a("code",[e._v("node_index")]),e._v("=0 will correspond to the first time the layer was called.")])]),e._v(" "),a("h4",{attrs:{id:"returns-24"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-24","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A tensor (or list of tensors if the layer has multiple outputs).")]),e._v(" "),a("h4",{attrs:{id:"raises-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-14","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("RuntimeError")]),e._v(": If called in Eager mode.")])]),e._v(" "),a("h3",{attrs:{id:"get-output-mask-at"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-output-mask-at","aria-hidden":"true"}},[e._v("#")]),e._v(" get_output_mask_at")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1406-L1423",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_output_mask_at(node_index)\n")])])]),a("p",[e._v("Retrieves the output mask tensor(s) of a layer at a given node.")]),e._v(" "),a("h4",{attrs:{id:"arguments-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-16","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("node_index")]),e._v(": Integer, index of the node from which to retrieve the attribute. E.g. "),a("code",[e._v("node_index")]),e._v("=0 will correspond to the first time the layer was called.")])]),e._v(" "),a("h4",{attrs:{id:"returns-25"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-25","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A mask tensor (or list of tensors if the layer has multiple outputs).")]),e._v(" "),a("h3",{attrs:{id:"get-output-shape-at"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-output-shape-at","aria-hidden":"true"}},[e._v("#")]),e._v(" get_output_shape_at")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1486-L1503",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_output_shape_at(node_index)\n")])])]),a("p",[e._v("Retrieves the output shape(s) of a layer at a given node.")]),e._v(" "),a("h4",{attrs:{id:"arguments-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-17","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("node_index")]),e._v(": Integer, index of the node from which to retrieve the attribute. E.g. "),a("code",[e._v("node_index")]),e._v("=0 will correspond to the first time the layer was called.")])]),e._v(" "),a("h4",{attrs:{id:"returns-26"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-26","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A shape tuple (or list of shape tuples if the layer has multiple outputs).")]),e._v(" "),a("h4",{attrs:{id:"raises-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-15","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("RuntimeError")]),e._v(": If called in Eager mode.")])]),e._v(" "),a("h3",{attrs:{id:"get-updates-for"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-updates-for","aria-hidden":"true"}},[e._v("#")]),e._v(" get_updates_for")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1349-L1366",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_updates_for(inputs)\n")])])]),a("p",[e._v("Retrieves updates relevant to a specific set of inputs.")]),e._v(" "),a("h4",{attrs:{id:"arguments-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-18","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("inputs")]),e._v(": Input tensor or list/tuple of input tensors.")])]),e._v(" "),a("h4",{attrs:{id:"returns-27"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-27","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("List of update ops of the layer that depend on inputs.")]),e._v(" "),a("h3",{attrs:{id:"get-weights"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-weights","aria-hidden":"true"}},[e._v("#")]),e._v(" get_weights")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1340-L1347",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_weights()\n")])])]),a("p",[e._v("Returns the current weights of the layer.")]),e._v(" "),a("h4",{attrs:{id:"returns-28"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-28","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Weights values as a list of numpy arrays.")]),e._v(" "),a("h3",{attrs:{id:"set-weights"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-weights","aria-hidden":"true"}},[e._v("#")]),e._v(" set_weights")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L1307-L1338",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" set_weights(weights)\n")])])]),a("p",[e._v("Sets the weights of the layer, from Numpy arrays.")]),e._v(" "),a("h4",{attrs:{id:"arguments-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-19","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("weights")]),e._v(": a list of Numpy arrays. The number of arrays and their shape must match number of the dimensions of the "),a("code",[e._v("weights")]),e._v(" of the layer (i.e. it should match the output of "),a("code",[e._v("get_weights")]),e._v(").")])]),e._v(" "),a("h4",{attrs:{id:"raises-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-16","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If the provided weights list does not match the layer's specifications.")])])])}),[],!1,null,null,null);t.default=s.exports}}]);