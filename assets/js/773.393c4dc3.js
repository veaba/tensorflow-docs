(window.webpackJsonp=window.webpackJsonp||[]).push([[773],{961:function(e,s,n){"use strict";n.r(s);var t=n(0),a=Object(t.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Sets the graph-level random seed for the default graph.")]),e._v(" "),n("h3",{attrs:{id:"aliases"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("tf.compat.v1.random.set_random_seed")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.compat.v1.set_random_seed(seed)\n")])])]),n("p",[e._v("Operations that rely on a random seed actually derive it from two seeds: the graph-level and operation-level seeds. This sets the graph-level seed.")]),e._v(" "),n("p",[e._v("Its interactions with operation-level seeds is as follows:")]),e._v(" "),n("p",[e._v("To illustrate the user-visible effects, consider these examples:")]),e._v(" "),n("p",[e._v("To generate different sequences across sessions, set neither graph-level nor op-level seeds:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" a = tf.random.uniform([1])\nb = tf.random.normal([1])\n\nprint(\"Session 1\")\nwith tf.compat.v1.Session() as sess1:\n  print(sess1.run(a))  # generates 'A1'\n  print(sess1.run(a))  # generates 'A2'\n  print(sess1.run(b))  # generates 'B1'\n  print(sess1.run(b))  # generates 'B2'\n\nprint(\"Session 2\")\nwith tf.compat.v1.Session() as sess2:\n  print(sess2.run(a))  # generates 'A3'\n  print(sess2.run(a))  # generates 'A4'\n  print(sess2.run(b))  # generates 'B3'\n  print(sess2.run(b))  # generates 'B4'\n")])])]),n("p",[e._v("To generate the same repeatable sequence for an op across sessions, set the seed for the op:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" a = tf.random.uniform([1], seed=1)\nb = tf.random.normal([1])\n\n# Repeatedly running this block with the same graph will generate the same\n# sequence of values for 'a', but different sequences of values for 'b'.\nprint(\"Session 1\")\nwith tf.compat.v1.Session() as sess1:\n  print(sess1.run(a))  # generates 'A1'\n  print(sess1.run(a))  # generates 'A2'\n  print(sess1.run(b))  # generates 'B1'\n  print(sess1.run(b))  # generates 'B2'\n\nprint(\"Session 2\")\nwith tf.compat.v1.Session() as sess2:\n  print(sess2.run(a))  # generates 'A1'\n  print(sess2.run(a))  # generates 'A2'\n  print(sess2.run(b))  # generates 'B3'\n  print(sess2.run(b))  # generates 'B4'\n")])])]),n("p",[e._v("To make the random sequences generated by all ops be repeatable across sessions, set a graph-level seed:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.compat.v1.random.set_random_seed(1234)\na = tf.random.uniform([1])\nb = tf.random.normal([1])\n\n# Repeatedly running this block with the same graph will generate the same\n# sequences of 'a' and 'b'.\nprint(\"Session 1\")\nwith tf.compat.v1.Session() as sess1:\n  print(sess1.run(a))  # generates 'A1'\n  print(sess1.run(a))  # generates 'A2'\n  print(sess1.run(b))  # generates 'B1'\n  print(sess1.run(b))  # generates 'B2'\n\nprint(\"Session 2\")\nwith tf.compat.v1.Session() as sess2:\n  print(sess2.run(a))  # generates 'A1'\n  print(sess2.run(a))  # generates 'A2'\n  print(sess2.run(b))  # generates 'B1'\n  print(sess2.run(b))  # generates 'B2'\n")])])]),n("h4",{attrs:{id:"args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("seed")]),e._v(": integer.")])])])}),[],!1,null,null,null);s.default=a.exports}}]);