(window.webpackJsonp=window.webpackJsonp||[]).push([[2596],{2787:function(e,n,t){"use strict";t.r(n);var s=t(0),i=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Extracts a strided slice of a tensor (generalized python array indexing).")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.strided_slice")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.strided_slice")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.strided_slice(\n    input_,\n    begin,\n    end,\n    strides=None,\n    begin_mask=0,\n    end_mask=0,\n    ellipsis_mask=0,\n    new_axis_mask=0,\n    shrink_axis_mask=0,\n    var=None,\n    name=None\n)\n")])])]),t("p",[t("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/Tensor#__getitem__",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.Tensor.getitem"),t("OutboundLink")],1),e._v("Instead of calling this op directly most users will want to use the NumPy-style slicing syntax (e.g. tensor[..., 3:4:-1, tf.newaxis, 3]), which is supported via  and tf.Variable.getitem. The interface of this op is a low-level encoding of the slicing syntax.")]),e._v(" "),t("p",[e._v("Roughly speaking, this op extracts a slice of size ("),t("code",[e._v("-`begin`)/`stride` from the given `input_` tensor. Starting at the location specified by `begin` the slice continues by adding `stride` to the index until all dimensions are not less than")]),e._v(". Note that a "),t("code",[e._v("stride")]),e._v(" can be negative, which causes a reverse slice.\nGiven a Python slice "),t("code",[e._v("input[spec0, spec1, ..., specn]")]),e._v(", this function will be called as follows.\n"),t("code",[e._v("begin")]),e._v(", "),t("code",[e._v("end")]),e._v(", and "),t("code",[e._v("strides")]),e._v(" will be vectors of length n. n in general is not equal to the rank of the "),t("code",[e._v("input_")]),e._v(" tensor.\nIn each mask field ("),t("code",[e._v("begin_mask")]),e._v(", "),t("code",[e._v("end_mask")]),e._v(", "),t("code",[e._v("ellipsis_mask")]),e._v(", "),t("code",[e._v("new_axis_mask")]),e._v(", "),t("code",[e._v("shrink_axis_mask")]),e._v(") the ith bit will correspond to the ith spec.\nIf the ith bit of "),t("code",[e._v("begin_mask")]),e._v(" is set, "),t("code",[e._v("begin[i]")]),e._v(" is ignored and the fullest possible range in that dimension is used instead. "),t("code",[e._v("end_mask")]),e._v(" works analogously, except with the end range.\n"),t("code",[e._v("foo[5:,:,:3]")]),e._v(" on a 7x8x9 tensor is equivalent to "),t("code",[e._v("foo[5:7,0:8,0:3]")]),e._v(". "),t("code",[e._v("foo[::-1]")]),e._v(" reverses a tensor with shape 8.\nIf the ith bit of "),t("code",[e._v("ellipsis_mask")]),e._v(" is set, as many unspecified dimensions as needed will be inserted between other dimensions. Only one non-zero bit is allowed in "),t("code",[e._v("ellipsis_mask")]),e._v(".\nFor example "),t("code",[e._v("foo[3:5,...,4:5]")]),e._v(" on a shape 10x3x3x10 tensor is equivalent to "),t("code",[e._v("foo[3:5,:,:,4:5]")]),e._v(" and "),t("code",[e._v("foo[3:5,...]")]),e._v(" is equivalent to "),t("code",[e._v("foo[3:5,:,:,:]")]),e._v(".\nIf the ith bit of "),t("code",[e._v("new_axis_mask")]),e._v(" is set, then "),t("code",[e._v("begin")]),e._v(", "),t("code",[e._v("end")]),e._v(", and "),t("code",[e._v("stride")]),e._v(" are ignored and a new length 1 dimension is added at this point in the output tensor.\nFor example, "),t("code",[e._v("foo[:4, tf.newaxis, :2]")]),e._v(" would produce a shape ("),t("code",[e._v("4, 1, 2")]),e._v(") tensor.\nIf the ith bit of "),t("code",[e._v("shrink_axis_mask")]),e._v(" is set, it implies that the ith specification shrinks the dimensionality by 1, taking on the value at index "),t("code",[e._v("begin[i]")]),e._v(". "),t("code",[e._v("end[i]")]),e._v(" and "),t("code",[e._v("strides[i]")]),e._v(" are ignored in this case. For example in Python one might do "),t("code",[e._v("foo[:, 3, :]")]),e._v(" which would result in "),t("code",[e._v("shrink_axis_mask")]),e._v(" equal to 2.\nNOTE: "),t("code",[e._v("begin")]),e._v(" and "),t("code",[e._v("end")]),e._v(" are zero-indexed. "),t("code",[e._v("strides")]),e._v(" entries must be non-zero.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" t = tf.constant([[[1, 1, 1], [2, 2, 2]],\n                 [[3, 3, 3], [4, 4, 4]],\n                 [[5, 5, 5], [6, 6, 6]]])\ntf.strided_slice(t, [1, 0, 0], [2, 1, 3], [1, 1, 1])  # [[[3, 3, 3]]]\ntf.strided_slice(t, [1, 0, 0], [2, 2, 3], [1, 1, 1])  # [[[3, 3, 3],\n                                                      #   [4, 4, 4]]]\ntf.strided_slice(t, [1, -1, 0], [2, -3, 3], [1, -1, 1])  # [[[4, 4, 4],\n                                                         #   [3, 3, 3]]]\n")])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("input_")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("begin")]),e._v(": An "),t("code",[e._v("int32")]),e._v(" or "),t("code",[e._v("int64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("end")]),e._v(": An "),t("code",[e._v("int32")]),e._v(" or "),t("code",[e._v("int64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("strides")]),e._v(": An "),t("code",[e._v("int32")]),e._v(" or "),t("code",[e._v("int64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("begin")]),e._v("_mask: An "),t("code",[e._v("int32")]),e._v(" mask.")]),e._v(" "),t("li",[t("code",[e._v("end")]),e._v("_mask: An "),t("code",[e._v("int32")]),e._v(" mask.")]),e._v(" "),t("li",[t("code",[e._v("ellipsis_mask")]),e._v(": An "),t("code",[e._v("int32")]),e._v(" mask.")]),e._v(" "),t("li",[t("code",[e._v("new_axis_mask")]),e._v(": An "),t("code",[e._v("int32")]),e._v(" mask.")]),e._v(" "),t("li",[t("code",[e._v("shrink_axis_mask")]),e._v(": An "),t("code",[e._v("int32")]),e._v(" mask.")]),e._v(" "),t("li",[t("code",[e._v("var")]),e._v(": The "),t("code",[e._v("var")]),e._v("iable corresponding to "),t("code",[e._v("input_")]),e._v(" or None")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": A "),t("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A "),t("code",[e._v("Tensor")]),e._v(" the same type as "),t("code",[e._v("input")]),e._v(".")])])}),[],!1,null,null,null);n.default=i.exports}}]);