(window.webpackJsonp=window.webpackJsonp||[]).push([[1783],{1974:function(a,e,t){"use strict";t.r(e);var r=t(0),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"class-prelu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-prelu","aria-hidden":"true"}},[a._v("#")]),a._v(" Class PReLU")]),a._v(" "),t("p",[a._v("Parametric Rectified Linear Unit.\n"),t("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/keras/layers/Layer",target:"_blank",rel:"noopener noreferrer"}},[a._v("Layer"),t("OutboundLink")],1),a._v("Inherits From:")]),a._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[a._v("#")]),a._v(" Aliases:")]),a._v(" "),t("ul",[t("li",[a._v("Class "),t("code",[a._v("tf.compat.v1.keras.layers.PReLU")])]),a._v(" "),t("li",[a._v("Class "),t("code",[a._v("tf.compat.v2.keras.layers.PReLU")])])]),a._v(" "),t("h4",{attrs:{id:"it-follows"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#it-follows","aria-hidden":"true"}},[a._v("#")]),a._v(" It follows:")]),a._v(" "),t("p",[a._v("f(x) = alpha * x for x < 0, f(x) = x for x >= 0, where alpha is a learned array with the same shape as x.")]),a._v(" "),t("h4",{attrs:{id:"input-shape"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#input-shape","aria-hidden":"true"}},[a._v("#")]),a._v(" Input shape:")]),a._v(" "),t("p",[a._v("Arbitrary. Use the keyword argument input_shape (tuple of integers, does not include the samples axis) when using this layer as the first layer in a model.")]),a._v(" "),t("h4",{attrs:{id:"output-shape"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#output-shape","aria-hidden":"true"}},[a._v("#")]),a._v(" Output shape:")]),a._v(" "),t("p",[a._v("Same shape as the input.")]),a._v(" "),t("h4",{attrs:{id:"arguments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[a._v("#")]),a._v(" Arguments:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("alpha_initializer")]),a._v(": Initializer function for the weights.")]),a._v(" "),t("li",[t("code",[a._v("alpha_regularizer")]),a._v(": Regularizer for the weights.")]),a._v(" "),t("li",[t("code",[a._v("alpha_constraint")]),a._v(": Constraint for the weights.")]),a._v(" "),t("li",[t("code",[a._v("shared_axes")]),a._v(": The axes along which to share learnable parameters for the activation function. For example, if the incoming feature maps are from a 2D convolution with output shape ("),t("code",[a._v("batch, height, width, channels")]),a._v("), and you wish to share parameters across space so that each filter only has one set of parameters, set "),t("code",[a._v("shared_axes")]),a._v("=[1, 2].")])]),a._v(" "),t("h2",{attrs:{id:"init"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[a._v("#")]),a._v(" "),t("strong",[a._v("init")])]),a._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/layers/advanced_activations.py#L102-L118",target:"_blank",rel:"noopener noreferrer"}},[a._v("View source"),t("OutboundLink")],1)]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" __init__(\n    alpha_initializer='zeros',\n    alpha_regularizer=None,\n    alpha_constraint=None,\n    shared_axes=None,\n    **kwargs\n)\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);