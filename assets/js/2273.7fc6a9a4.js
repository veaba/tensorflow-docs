(window.webpackJsonp=window.webpackJsonp||[]).push([[2273],{2461:function(e,v,_){"use strict";_.r(v);var d=_(0),o=Object(d.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("p",[e._v("Constructs a constant RaggedTensor from a nested Python list.")]),e._v(" "),_("h3",{attrs:{id:"aliases"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("tf.compat.v1.ragged.constant")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v2.ragged.constant")])])]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" tf.ragged.constant(\n    pylist,\n    dtype=None,\n    ragged_rank=None,\n    inner_shape=None,\n    name=None,\n    row_splits_dtype=tf.dtypes.int64\n)\n")])])]),_("h3",{attrs:{id:"used-in-the-guide"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("R")]),e._v("a"),_("code",[e._v("g")]),e._v("g"),_("code",[e._v("e")]),e._v("d"),_("code"),e._v("t"),_("code",[e._v("e")]),e._v("n"),_("code",[e._v("s")]),e._v("o"),_("code",[e._v("r")]),e._v("s``")])]),e._v(" "),_("h4",{attrs:{id:"example"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" ragged.constant([[1, 2], [3], [4, 5, 6]]).eval()\nRaggedTensorValue(values=[1, 2, 3, 4, 5, 6], splits=[0, 2, 3, 6])\n")])])]),_("p",[e._v("All scalar values in pylist must have the same nesting depth K, and the returned RaggedTensor will have rank K. If pylist contains no scalar values, then K is one greater than the maximum depth of empty lists in pylist. All scalar values in pylist must be compatible with dtype.")]),e._v(" "),_("h4",{attrs:{id:"args"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("pylist")]),e._v(": A nested "),_("code",[e._v("list")]),e._v(", "),_("code",[e._v("tuple")]),e._v(" or "),_("code",[e._v("np.ndarray")]),e._v(". Any nested element that is not a "),_("code",[e._v("list")]),e._v(", "),_("code",[e._v("tuple")]),e._v(" or "),_("code",[e._v("np.ndarray")]),e._v(" must be a scalar value compatible with "),_("code",[e._v("dtype")]),e._v(".")]),e._v(" "),_("li",[_("code",[e._v("dtype")]),e._v(": The type of elements for the returned "),_("code",[e._v("RaggedTensor")]),e._v(". If not specified, then a default is chosen based on the scalar values in "),_("code",[e._v("pylist")]),e._v(".")]),e._v(" "),_("li",[_("code",[e._v("ragged_rank")]),e._v(": An integer spec"),_("code",[e._v("if")]),e._v("ying the ragged rank of the returned "),_("code",[e._v("RaggedTensor")]),e._v(". Must be nonnegative and less than "),_("code",[e._v("K")]),e._v(". Defaults to max(0, "),_("code",[e._v("K")]),e._v(" - 1) "),_("code",[e._v("if")]),e._v(" "),_("code",[e._v("inner_shape")]),e._v(" is not spec"),_("code",[e._v("if")]),e._v("ied. Defaults to "),_("code",[e._v("max(0,")]),e._v("K"),_("code",[e._v("1 - len(")]),e._v("inner_shape"),_("code",[e._v("))")]),e._v("if"),_("code",[e._v("inner_shape")]),e._v(" is spec"),_("code",[e._v("if")]),e._v("ied.")]),e._v(" "),_("li",[e._v("1 - len("),_("code",[e._v("inner_shape")]),e._v("))"),_("code",[e._v("if``inner_shape`` is spec")]),e._v("if`ied.")]),e._v(" "),_("li",[_("code",[e._v("inner_shape```:`` ``A``")]),e._v("tuple"),_("code",[e._v("``o``f`` ``i``n``t``e``g``e``r``s`` ``s``p``e``c`if")]),e._v("y"),_("code",[e._v("i")]),e._v("n"),_("code",[e._v("g")]),e._v(" "),_("code",[e._v("t")]),e._v("h"),_("code",[e._v("e")]),e._v(" "),_("code",[e._v("s")]),e._v("h"),_("code",[e._v("a")]),e._v("p"),_("code",[e._v("e")]),e._v(" "),_("code",[e._v("f")]),e._v("o"),_("code",[e._v("r")]),e._v(" "),_("code",[e._v("i")]),e._v("n"),_("code",[e._v("d")]),e._v("i"),_("code",[e._v("v")]),e._v("i"),_("code",[e._v("d")]),e._v("u"),_("code",[e._v("a")]),e._v("l"),_("code"),e._v("i"),_("code",[e._v("n")]),e._v("n"),_("code",[e._v("e")]),e._v("r"),_("code"),e._v("v"),_("code",[e._v("a")]),e._v("l"),_("code",[e._v("u")]),e._v("e"),_("code",[e._v("s")]),e._v(" "),_("code",[e._v("i")]),e._v("n"),_("code"),e._v("t"),_("code",[e._v("h")]),e._v("e"),_("code"),e._v("r"),_("code",[e._v("e")]),e._v("t"),_("code",[e._v("u")]),e._v("r"),_("code",[e._v("n")]),e._v("e"),_("code",[e._v("d")]),e._v(" "),_("code",[e._v("RaggedTensor```.`` ``D``e``f``a``u``l``t``s`` ``t``o`` ``(``)``")]),e._v("if"),_("code",[e._v("`ragged_rank")]),e._v(" "),_("code",[e._v("i")]),e._v("s"),_("code"),e._v("n"),_("code",[e._v("o")]),e._v("t"),_("code"),e._v("s"),_("code",[e._v("p")]),e._v("e"),_("code",[e._v("c`if```i")]),e._v("e"),_("code",[e._v("d")]),e._v("."),_("code"),e._v("I"),_("code",[e._v("f")]),e._v(" "),_("code",[e._v("ragged_rank``` ``i``s`` ``s``p``e``c")]),e._v("if"),_("code",[e._v("i``e``d``,`` ``t``h``e``n`` ``a`` ``d``e``f``a``u``l``t`` ``i``s`` ``c``h``o``s``e``n`` ``b``a``s``e``d`` ``o``n`` ``t``h``e`` ``c``o``n``t``e``n``t``s`` ``o``f`` `pylist")]),e._v(".``")]),e._v(" "),_("li",[_("code",[e._v("name")]),e._v(":"),_("code"),e._v("A"),_("code",[e._v("```name```")]),e._v("p"),_("code",[e._v("r")]),e._v("e"),_("code",[e._v("f")]),e._v("i"),_("code",[e._v("x")]),e._v(" "),_("code",[e._v("f")]),e._v("o"),_("code",[e._v("r")]),e._v(" "),_("code",[e._v("t")]),e._v("h"),_("code",[e._v("e")]),e._v(" "),_("code",[e._v("r")]),e._v("e"),_("code",[e._v("t")]),e._v("u"),_("code",[e._v("r")]),e._v("n"),_("code",[e._v("e")]),e._v("d"),_("code"),e._v("t"),_("code",[e._v("e")]),e._v("n"),_("code",[e._v("s")]),e._v("o"),_("code",[e._v("r")]),e._v(" "),_("code",[e._v("(")]),e._v("o"),_("code",[e._v("p")]),e._v("t"),_("code",[e._v("i")]),e._v("o"),_("code",[e._v("n")]),e._v("a"),_("code",[e._v("l")]),e._v(")"),_("code",[e._v(".")])]),e._v(" "),_("li",[_("code",[e._v("row_splits_dtype")]),e._v(":"),_("code"),e._v("d"),_("code",[e._v("a")]),e._v("t"),_("code",[e._v("a")]),e._v(" "),_("code",[e._v("t")]),e._v("y"),_("code",[e._v("p")]),e._v("e"),_("code"),e._v("f"),_("code",[e._v("o")]),e._v("r"),_("code"),e._v("t"),_("code",[e._v("h")]),e._v("e"),_("code"),e._v("c"),_("code",[e._v("o")]),e._v("n"),_("code",[e._v("s")]),e._v("t"),_("code",[e._v("r")]),e._v("u"),_("code",[e._v("c")]),e._v("t"),_("code",[e._v("e")]),e._v("d"),_("code",[e._v("`RaggedTensor```'")]),e._v("s"),_("code"),e._v("r"),_("code",[e._v("o")]),e._v("w"),_("code",[e._v("_")]),e._v("s"),_("code",[e._v("p")]),e._v("l"),_("code",[e._v("i")]),e._v("t"),_("code",[e._v("s")]),e._v("."),_("code"),e._v("O"),_("code",[e._v("n")]),e._v("e"),_("code"),e._v("o"),_("code",[e._v("f")]),e._v(" "),_("code",[e._v("tf.int32")]),e._v(" "),_("code",[e._v("o")]),e._v("r"),_("code",[e._v("```tf.int64```.")])])]),e._v(" "),_("h4",{attrs:{id:"returns"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),_("p",[e._v("A potentially ragged tensor with rank K and the specified ragged_rank, containing the values from pylist.")]),e._v(" "),_("h4",{attrs:{id:"raises"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("ValueError")]),e._v(": If the scalar values in "),_("code",[e._v("pylist")]),e._v(" have inconsistent nesting depth; or if ragged_rank or inner_shape are incompatible with "),_("code",[e._v("pylist")]),e._v(".")])])])}),[],!1,null,null,null);v.default=o.exports}}]);