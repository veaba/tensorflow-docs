(window.webpackJsonp=window.webpackJsonp||[]).push([[710],{898:function(e,_,v){"use strict";v.r(_);var a=v(0),o=Object(a.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("Constructs a RaggedTensorValue from a nested Python list.")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v(" tf.compat.v1.ragged.constant_value(\n    pylist,\n    dtype=None,\n    ragged_rank=None,\n    inner_shape=None,\n    row_splits_dtype='int64'\n)\n")])])]),v("h4",{attrs:{id:"example"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v(" ragged.constant_value([[1, 2], [3], [4, 5, 6]])\nRaggedTensorValue(values=[1, 2, 3, 4, 5, 6], splits=[0, 2, 3, 6])\n")])])]),v("p",[e._v("All scalar values in pylist must have the same nesting depth K, and the returned RaggedTensorValue will have rank K. If pylist contains no scalar values, then K is one greater than the maximum depth of empty lists in pylist. All scalar values in pylist must be compatible with dtype.")]),e._v(" "),v("h4",{attrs:{id:"args"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("pylist")]),e._v(": A nested "),v("code",[e._v("list")]),e._v(", "),v("code",[e._v("tuple")]),e._v(" or "),v("code",[e._v("np.ndarray")]),e._v(". Any nested element that is not a "),v("code",[e._v("list")]),e._v(" or "),v("code",[e._v("tuple")]),e._v(" must be a scalar value compatible with "),v("code",[e._v("dtype")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("dtype")]),e._v(": "),v("code",[e._v("numpy.dtype")]),e._v(". The type of elements for the returned "),v("code",[e._v("RaggedTensor")]),e._v(". If not specified, then a default is chosen based on the scalar values in "),v("code",[e._v("pylist")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("ragged_rank")]),e._v(": An integer spec"),v("code",[e._v("if")]),e._v("ying the ragged rank of the returned "),v("code",[e._v("RaggedTensor")]),e._v("Value. Must be nonnegative and less than "),v("code",[e._v("K")]),e._v(". Defaults to max(0, "),v("code",[e._v("K")]),e._v(" - 1) "),v("code",[e._v("if")]),e._v(" "),v("code",[e._v("inner_shape")]),e._v(" is not spec"),v("code",[e._v("if")]),e._v("ied. Defaults to "),v("code",[e._v("max(0,")]),e._v("K"),v("code",[e._v("1 - len(")]),e._v("inner_shape"),v("code",[e._v("))")]),e._v("if"),v("code",[e._v("inner_shape")]),e._v(" is spec"),v("code",[e._v("if")]),e._v("ied.")]),e._v(" "),v("li",[e._v("1 - len("),v("code",[e._v("inner_shape")]),e._v("))"),v("code",[e._v("if``inner_shape`` is spec")]),e._v("if`ied.")]),e._v(" "),v("li",[v("code",[e._v("inner_shape```:`` ``A``")]),e._v("tuple"),v("code",[e._v("``o``f`` ``i``n``t``e``g``e``r``s`` ``s``p``e``c`if")]),e._v("y"),v("code",[e._v("i")]),e._v("n"),v("code",[e._v("g")]),e._v(" "),v("code",[e._v("t")]),e._v("h"),v("code",[e._v("e")]),e._v(" "),v("code",[e._v("s")]),e._v("h"),v("code",[e._v("a")]),e._v("p"),v("code",[e._v("e")]),e._v(" "),v("code",[e._v("f")]),e._v("o"),v("code",[e._v("r")]),e._v(" "),v("code",[e._v("i")]),e._v("n"),v("code",[e._v("d")]),e._v("i"),v("code",[e._v("v")]),e._v("i"),v("code",[e._v("d")]),e._v("u"),v("code",[e._v("a")]),e._v("l"),v("code"),e._v("i"),v("code",[e._v("n")]),e._v("n"),v("code",[e._v("e")]),e._v("r"),v("code"),e._v("v"),v("code",[e._v("a")]),e._v("l"),v("code",[e._v("u")]),e._v("e"),v("code",[e._v("s")]),e._v(" "),v("code",[e._v("i")]),e._v("n"),v("code"),e._v("t"),v("code",[e._v("h")]),e._v("e"),v("code"),e._v("r"),v("code",[e._v("e")]),e._v("t"),v("code",[e._v("u")]),e._v("r"),v("code",[e._v("n")]),e._v("e"),v("code",[e._v("d")]),e._v(" "),v("code",[e._v("RaggedTensor```V``a``l``u``e``.`` ``D``e``f``a``u``l``t``s`` ``t``o`` ``(``)``")]),e._v("if"),v("code",[e._v("`ragged_rank")]),e._v(" "),v("code",[e._v("i")]),e._v("s"),v("code"),e._v("n"),v("code",[e._v("o")]),e._v("t"),v("code"),e._v("s"),v("code",[e._v("p")]),e._v("e"),v("code",[e._v("c`if```i")]),e._v("e"),v("code",[e._v("d")]),e._v("."),v("code"),e._v("I"),v("code",[e._v("f")]),e._v(" "),v("code",[e._v("ragged_rank``` ``i``s`` ``s``p``e``c")]),e._v("if"),v("code",[e._v("i``e``d``,`` ``t``h``e``n`` ``a`` ``d``e``f``a``u``l``t`` ``i``s`` ``c``h``o``s``e``n`` ``b``a``s``e``d`` ``o``n`` ``t``h``e`` ``c``o``n``t``e``n``t``s`` ``o``f`` `pylist")]),e._v(".``")]),e._v(" "),v("li",[v("code",[e._v("row_splits_dtype")]),e._v(":"),v("code"),e._v("d"),v("code",[e._v("a")]),e._v("t"),v("code",[e._v("a")]),e._v(" "),v("code",[e._v("t")]),e._v("y"),v("code",[e._v("p")]),e._v("e"),v("code"),e._v("f"),v("code",[e._v("o")]),e._v("r"),v("code"),e._v("t"),v("code",[e._v("h")]),e._v("e"),v("code"),e._v("c"),v("code",[e._v("o")]),e._v("n"),v("code",[e._v("s")]),e._v("t"),v("code",[e._v("r")]),e._v("u"),v("code",[e._v("c")]),e._v("t"),v("code",[e._v("e")]),e._v("d"),v("code",[e._v("`RaggedTensor```V")]),e._v("a"),v("code",[e._v("l")]),e._v("u"),v("code",[e._v("e")]),e._v("'"),v("code",[e._v("s")]),e._v(" "),v("code",[e._v("r")]),e._v("o"),v("code",[e._v("w")]),e._v("_"),v("code",[e._v("s")]),e._v("p"),v("code",[e._v("l")]),e._v("i"),v("code",[e._v("t")]),e._v("s"),v("code",[e._v(".")]),e._v(" "),v("code",[e._v("O")]),e._v("n"),v("code",[e._v("e")]),e._v(" "),v("code",[e._v("o")]),e._v("f"),v("code",[e._v("```numpy.int32```")]),e._v("o"),v("code",[e._v("r")]),e._v(" "),v("code",[e._v("numpy.int64")]),e._v(".``")])]),e._v(" "),v("h4",{attrs:{id:"returns"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),v("p",[e._v("A tf.RaggedTensorValue or numpy.array with rank K and the specified ragged_rank, containing the values from pylist.")]),e._v(" "),v("h4",{attrs:{id:"raises"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("ValueError")]),e._v(": If the scalar values in "),v("code",[e._v("pylist")]),e._v(" have inconsistent nesting depth; or if ragged_rank or inner_shape are incompatible with "),v("code",[e._v("pylist")]),e._v(".")])])])}),[],!1,null,null,null);_.default=o.exports}}]);