(window.webpackJsonp=window.webpackJsonp||[]).push([[1297],{1485:function(t,e,r){"use strict";r.r(e);var s=r(0),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"class-predictoutput"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#class-predictoutput","aria-hidden":"true"}},[t._v("#")]),t._v(" Class PredictOutput")]),t._v(" "),r("p",[t._v("Represents the output of a generic prediction head.\n"),r("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/estimator/export/ExportOutput",target:"_blank",rel:"noopener noreferrer"}},[t._v("ExportOutput"),r("OutboundLink")],1),t._v("Inherits From:")]),t._v(" "),r("h3",{attrs:{id:"aliases"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[t._v("#")]),t._v(" Aliases:")]),t._v(" "),r("ul",[r("li",[t._v("Class "),r("code",[t._v("tf.compat.v1.estimator.export.PredictOutput")])]),t._v(" "),r("li",[t._v("Class "),r("code",[t._v("tf.compat.v2.estimator.export.PredictOutput")])])]),t._v(" "),r("p",[t._v("A generic prediction need not be either a classification or a regression.")]),t._v(" "),r("p",[t._v("Named outputs must be provided as a dict from string to Tensor,")]),t._v(" "),r("h2",{attrs:{id:"init"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[t._v("#")]),t._v(" "),r("strong",[t._v("init")])]),t._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/saved_model/model_utils/export_output.py#L211-L224",target:"_blank",rel:"noopener noreferrer"}},[t._v("View source"),r("OutboundLink")],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v(" __init__(outputs)\n")])])]),r("p",[t._v("Constructor for PredictOutput.")]),t._v(" "),r("h4",{attrs:{id:"args"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[t._v("#")]),t._v(" Args:")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("outputs")]),t._v(": A "),r("code",[t._v("Tensor")]),t._v(" or a dict of string to "),r("code",[t._v("Tensor")]),t._v(" representing the predictions.")])]),t._v(" "),r("h4",{attrs:{id:"raises"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[t._v("#")]),t._v(" Raises:")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("ValueError")]),t._v(": if the outputs is not dict, or any of its keys are not strings, or any of its values are not "),r("code",[t._v("Tensor")]),t._v("s.")])]),t._v(" "),r("h2",{attrs:{id:"properties"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),r("h3",{attrs:{id:"outputs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#outputs","aria-hidden":"true"}},[t._v("#")]),t._v(" outputs")]),t._v(" "),r("h2",{attrs:{id:"methods"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),r("h3",{attrs:{id:"as-signature-def"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#as-signature-def","aria-hidden":"true"}},[t._v("#")]),t._v(" as_signature_def")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/saved_model/model_utils/export_output.py#L230-L232",target:"_blank",rel:"noopener noreferrer"}},[t._v("View source"),r("OutboundLink")],1)]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v(" as_signature_def(receiver_tensors)\n")])])]),r("p",[t._v("Generate a SignatureDef proto for inclusion in a MetaGraphDef.")]),t._v(" "),r("p",[t._v("The SignatureDef will specify outputs as described in this ExportOutput, and will use the provided receiver_tensors as inputs.")]),t._v(" "),r("h4",{attrs:{id:"args-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[t._v("#")]),t._v(" Args:")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("receiver_tensors")]),t._v(": a "),r("code",[t._v("Tensor")]),t._v(", or a dict of string to "),r("code",[t._v("Tensor")]),t._v(", specifying input nodes that will be fed.")])])])}),[],!1,null,null,null);e.default=a.exports}}]);