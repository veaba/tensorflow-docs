(window.webpackJsonp=window.webpackJsonp||[]).push([[602],{790:function(e,s,t){"use strict";t.r(s);var o=t(0),a=Object(o.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Computes recall@k of top-k predictions with respect to sparse labels.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.compat.v1.metrics.recall_at_top_k(\n    labels,\n    predictions_idx,\n    k=None,\n    class_id=None,\n    weights=None,\n    metrics_collections=None,\n    updates_collections=None,\n    name=None\n)\n")])])]),t("p",[e._v("Differs from recall_at_k in that predictions must be in the form of top k class indices, whereas recall_at_k expects logits. Refer to recall_at_k for more details.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("labels")]),e._v(": "),t("code",[e._v("int64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" or "),t("code",[e._v("SparseTensor")]),e._v(" with shape [D1, ... DN, num_"),t("code",[e._v("labels")]),e._v("] or [D1, ... DN], where the latter implies num_"),t("code",[e._v("labels")]),e._v("=1. N >= 1 and num_"),t("code",[e._v("labels")]),e._v(" is the number of target classes for the associated prediction. Commonly, N=1 and "),t("code",[e._v("labels")]),e._v(" has shape [batch_size, num_"),t("code",[e._v("labels")]),e._v("]. [D1, ... DN] must match "),t("code",[e._v("predictions")]),e._v(". Values should be in range [0, num_classes), where num_classes is the last dimension of "),t("code",[e._v("predictions")]),e._v(". Values outside this range always count towards "),t("code",[e._v("false_negative_at_<k>")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("predictions")]),e._v("_idx: Integer "),t("code",[e._v("Tensor")]),e._v(" with shape [D1, ... DN, "),t("code",[e._v("k")]),e._v("] where N >= 1. Commonly, N=1 and "),t("code",[e._v("predictions")]),e._v(" has shape [batch size, "),t("code",[e._v("k")]),e._v("]. The final dimension contains the top "),t("code",[e._v("k")]),e._v(" predicted class indices. [D1, ... DN] must match "),t("code",[e._v("labels")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("k")]),e._v(": Integer, "),t("code",[e._v("k")]),e._v(" for @"),t("code",[e._v("k")]),e._v(" metric. Only used for the default op name.")]),e._v(" "),t("li",[t("code",[e._v("class_id")]),e._v(": Integer class ID for which we want binary metrics. This should be in range [0, num_classes), where num_classes is the last dimension of "),t("code",[e._v("predictions")]),e._v(". If "),t("code",[e._v("class_id")]),e._v(" is outside this range, the method returns NAN.")]),e._v(" "),t("li",[t("code",[e._v("weights")]),e._v(": "),t("code",[e._v("Tensor")]),e._v(" whose ran"),t("code",[e._v("k")]),e._v(" is either 0, or n-"),t("code",[e._v("1")]),e._v(", where n is the ran"),t("code",[e._v("k")]),e._v(" of "),t("code",[e._v("labels")]),e._v(". If the latter, it must be broadcastable to "),t("code",[e._v("labels")]),e._v(" (i.e., all dimensions must be either "),t("code",[e._v("1")]),e._v(", or the same as the corresponding "),t("code",[e._v("labels")]),e._v(" dimension).")]),e._v(" "),t("li",[t("code",[e._v("metrics_collections")]),e._v(": An optional list of collections that values should be added to.")]),e._v(" "),t("li",[t("code",[e._v("updates_collections")]),e._v(": An optional list of collections that updates should be added to.")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": Name of new update operation, and "),t("code",[e._v("name")]),e._v("space for other dependent ops.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("recall")]),e._v(": Scalar "),t("code",[e._v("float64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" with the value of "),t("code",[e._v("true_positives")]),e._v(" divided by the sum of "),t("code",[e._v("true_positives")]),e._v(" and "),t("code",[e._v("false_negatives")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("update_op")]),e._v(": "),t("code",[e._v("Operation")]),e._v(" that increments "),t("code",[e._v("true_positives")]),e._v(" and "),t("code",[e._v("false_negatives")]),e._v(" variables appropriately, and whose value matches "),t("code",[e._v("recall")]),e._v(".")])]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": If "),t("code",[e._v("weights")]),e._v(" is not "),t("code",[e._v("None")]),e._v(" and its shape doesn't match "),t("code",[e._v("predictions")]),e._v(", or if either "),t("code",[e._v("metrics_collections")]),e._v(" or "),t("code",[e._v("updates_collections")]),e._v(" are not a list or tuple.")])])])}),[],!1,null,null,null);s.default=a.exports}}]);