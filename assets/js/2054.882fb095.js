(window.webpackJsonp=window.webpackJsonp||[]).push([[2054],{2242:function(e,t,_){"use strict";_.r(t);var o=_(0),v=Object(o.a)({},(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("p",[e._v("Computes the absolute value of a tensor.")]),e._v(" "),_("h3",{attrs:{id:"aliases"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("tf.RaggedTensor.__abs__")])]),e._v(" "),_("li",[_("code",[e._v("tf.Tensor.__abs__")])]),e._v(" "),_("li",[_("code",[e._v("tf.abs")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v1.RaggedTensor.__abs__")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v1.Tensor.__abs__")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v1.abs")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v1.math.abs")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v2.RaggedTensor.__abs__")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v2.Tensor.__abs__")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v2.abs")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v2.math.abs")])])]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" tf.math.abs(\n    x,\n    name=None\n)\n")])])]),_("h3",{attrs:{id:"used-in-the-guide"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("T")]),e._v("r"),_("code",[e._v("a")]),e._v("i"),_("code",[e._v("n")]),e._v("i"),_("code",[e._v("n")]),e._v("g"),_("code"),e._v("c"),_("code",[e._v("h")]),e._v("e"),_("code",[e._v("c")]),e._v("k"),_("code",[e._v("p")]),e._v("o"),_("code",[e._v("i")]),e._v("n"),_("code",[e._v("t")]),e._v("s``")])]),e._v(" "),_("h3",{attrs:{id:"used-in-the-tutorials"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("B")]),e._v("e"),_("code",[e._v("t")]),e._v("t"),_("code",[e._v("e")]),e._v("r"),_("code"),e._v("p"),_("code",[e._v("e")]),e._v("r"),_("code",[e._v("f")]),e._v("o"),_("code",[e._v("r")]),e._v("m"),_("code",[e._v("a")]),e._v("n"),_("code",[e._v("c")]),e._v("e"),_("code"),e._v("w"),_("code",[e._v("i")]),e._v("t"),_("code",[e._v("h")]),e._v(" "),_("code",[e._v("t")]),e._v("f"),_("code",[e._v(".")]),e._v("f"),_("code",[e._v("u")]),e._v("n"),_("code",[e._v("c")]),e._v("t"),_("code",[e._v("i")]),e._v("o"),_("code",[e._v("n")])]),e._v(" "),_("li",[_("code",[e._v("C")]),e._v("y"),_("code",[e._v("c")]),e._v("l"),_("code",[e._v("e")]),e._v("G"),_("code",[e._v("A")]),e._v("N``")]),e._v(" "),_("li",[_("code",[e._v("P")]),e._v("i"),_("code",[e._v("x")]),e._v("2"),_("code",[e._v("P")]),e._v("i"),_("code",[e._v("x")])])]),e._v(" "),_("p",[e._v("Given a tensor of integer or floating-point values, this operation returns a tensor of the same type, where each element contains the absolute value of the corresponding element in the input.")]),e._v(" "),_("p",[e._v("Given a tensor x of complex numbers, this operation returns a tensor of type float32 or float64 that is the absolute value of each element in x. All elements in x must be complex numbers of the form\n. The absolute value is computed as\n. For example:")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" x = tf.constant([[-2.25 + 4.75j], [-3.25 + 5.75j]])\ntf.abs(x)  # [5.25594902, 6.60492229]\n")])])]),_("h4",{attrs:{id:"args"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("x")]),e._v(": A "),_("code",[e._v("Tensor")]),e._v(" or "),_("code",[e._v("SparseTensor")]),e._v(" of type "),_("code",[e._v("float16")]),e._v(", "),_("code",[e._v("float32")]),e._v(", "),_("code",[e._v("float64")]),e._v(", "),_("code",[e._v("int32")]),e._v(", "),_("code",[e._v("int64")]),e._v(", "),_("code",[e._v("complex64")]),e._v(" or "),_("code",[e._v("complex128")]),e._v(".")]),e._v(" "),_("li",[_("code",[e._v("name")]),e._v(": A "),_("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),_("h4",{attrs:{id:"returns"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),_("p",[e._v("A Tensor or SparseTensor the same size, type, and sparsity as x with absolute values. Note, for complex64 or complex128 input, the returned Tensor will be of type float32 or float64, respectively.")]),e._v(" "),_("p",[e._v("If x is a SparseTensor, returns SparseTensor(x.indices, tf.math.abs(x.values, ...), x.dense_shape)")])])}),[],!1,null,null,null);t.default=v.exports}}]);