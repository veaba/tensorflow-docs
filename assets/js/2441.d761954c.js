(window.webpackJsonp=window.webpackJsonp||[]).push([[2441],{2629:function(a,e,t){"use strict";t.r(e);var r=t(0),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"class-exponentialmovingaverage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-exponentialmovingaverage","aria-hidden":"true"}},[a._v("#")]),a._v(" Class ExponentialMovingAverage")]),a._v(" "),t("p",[a._v("Maintains moving averages of variables by employing an exponential decay.")]),a._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[a._v("#")]),a._v(" Aliases:")]),a._v(" "),t("ul",[t("li",[a._v("Class "),t("code",[a._v("tf.compat.v1.train.ExponentialMovingAverage")])]),a._v(" "),t("li",[a._v("Class "),t("code",[a._v("tf.compat.v2.train.ExponentialMovingAverage")])])]),a._v(" "),t("p",[a._v("When training a model, it is often beneficial to maintain moving averages of the trained parameters. Evaluations that use averaged parameters sometimes produce significantly better results than the final trained values.")]),a._v(" "),t("p",[a._v("The apply() method adds shadow copies of trained variables and add ops that maintain a moving average of the trained variables in their shadow copies. It is used when building the training model. The ops that maintain moving averages are typically run after each training step. The average() and average_name() methods give access to the shadow variables and their names. They are useful when building an evaluation model, or when restoring a model from a checkpoint file. They help use the moving averages in place of the last trained values for evaluations.")]),a._v(" "),t("p",[a._v("The moving averages are computed using exponential decay. You specify the decay value when creating the ExponentialMovingAverage object. The shadow variables are initialized with the same initial values as the trained variables. When you run the ops to maintain the moving averages, each shadow variable is updated with the formula:")]),a._v(" "),t("p",[a._v("shadow_variable -= (1 - decay) * (shadow_variable - variable)")]),a._v(" "),t("p",[a._v('This is mathematically equivalent to the classic formula below, but the use of an assign_sub op (the "-=" in the formula) allows concurrent lockless updates to the variables:')]),a._v(" "),t("p",[a._v("shadow_variable = decay * shadow_variable + (1 - decay) * variable")]),a._v(" "),t("p",[a._v("Reasonable values for decay are close to 1.0, typically in the multiple-nines range: 0.999, 0.9999, etc.")]),a._v(" "),t("p",[a._v("Example usage when creating a training model:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" # Create variables.\nvar0 = tf.Variable(...)\nvar1 = tf.Variable(...)\n# ... use the variables to build a training model...\n...\n# Create an op that applies the optimizer.  This is what we usually\n# would use as a training op.\nopt_op = opt.minimize(my_loss, [var0, var1])\n\n# Create an ExponentialMovingAverage object\nema = tf.train.ExponentialMovingAverage(decay=0.9999)\n\nwith tf.control_dependencies([opt_op]):\n    # Create the shadow variables, and add ops to maintain moving averages\n    # of var0 and var1. This also creates an op that will update the moving\n    # averages after each training step.  This is what we will use in place\n    # of the usual training op.\n    training_op = ema.apply([var0, var1])\n\n...train the model by running training_op...\n")])])]),t("p",[a._v("There are two ways to use the moving averages for evaluations:")]),a._v(" "),t("ul",[t("li",[a._v("Build a model that uses the shadow variables instead of the variables. For this, use the "),t("code",[a._v("average")]),a._v("() method which returns the shadow variable for a given variable.")]),a._v(" "),t("li",[a._v("Build a model normally but load the checkpoint files to evaluate by using the shadow variable names. For this use the "),t("code",[a._v("average")]),a._v("_name() method. See the "),t("code",[a._v("tf.compat.v1.train.Saver")]),a._v(" for more information on restoring saved variables.")])]),a._v(" "),t("p",[a._v("Example of restoring the shadow variable values:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" # Create a Saver that loads variables from their saved shadow values.\nshadow_var0_name = ema.average_name(var0)\nshadow_var1_name = ema.average_name(var1)\nsaver = tf.compat.v1.train.Saver({shadow_var0_name: var0, shadow_var1_name:\nvar1})\nsaver.restore(...checkpoint filename...)\n# var0 and var1 now hold the moving average values\n")])])]),t("h2",{attrs:{id:"init"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[a._v("#")]),a._v(" "),t("strong",[a._v("init")])]),a._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/training/moving_averages.py#L341-L371",target:"_blank",rel:"noopener noreferrer"}},[a._v("View source"),t("OutboundLink")],1)]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" __init__(\n    decay,\n    num_updates=None,\n    zero_debias=False,\n    name='ExponentialMovingAverage'\n)\n")])])]),t("p",[a._v("Creates a new ExponentialMovingAverage object.")]),a._v(" "),t("p",[a._v("The apply() method has to be called to create shadow variables and add ops to maintain moving averages.")]),a._v(" "),t("p",[a._v("The optional num_updates parameter allows one to tweak the decay rate dynamically. It is typical to pass the count of training steps, usually kept in a variable that is incremented at each step, in which case the decay rate is lower at the start of training. This makes moving averages move faster. If passed, the actual decay rate used is:")]),a._v(" "),t("p",[a._v("min(decay, (1 + num_updates) / (10 + num_updates))")]),a._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[a._v("#")]),a._v(" Args:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("decay")]),a._v(": Float. The "),t("code",[a._v("decay")]),a._v(" to use.")]),a._v(" "),t("li",[t("code",[a._v("num_updates")]),a._v(": Optional count of number of updates applied to variables.")]),a._v(" "),t("li",[t("code",[a._v("zero_debias")]),a._v(": If "),t("code",[a._v("True")]),a._v(", zero debias moving-averages that are initialized with tensors.")]),a._v(" "),t("li",[t("code",[a._v("name")]),a._v(": String. Optional prefix "),t("code",[a._v("name")]),a._v(" to use for the "),t("code",[a._v("name")]),a._v(" of ops added in "),t("code",[a._v("apply")]),a._v("().")])]),a._v(" "),t("h2",{attrs:{id:"properties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[a._v("#")]),a._v(" Properties")]),a._v(" "),t("h3",{attrs:{id:"name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#name","aria-hidden":"true"}},[a._v("#")]),a._v(" name")]),a._v(" "),t("p",[a._v("The name of this ExponentialMovingAverage object.")]),a._v(" "),t("h2",{attrs:{id:"methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[a._v("#")]),a._v(" Methods")]),a._v(" "),t("h3",{attrs:{id:"apply"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#apply","aria-hidden":"true"}},[a._v("#")]),a._v(" apply")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/training/moving_averages.py#L378-L462",target:"_blank",rel:"noopener noreferrer"}},[a._v("View source"),t("OutboundLink")],1)]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" apply(var_list=None)\n")])])]),t("p",[a._v("Maintains moving averages of variables.")]),a._v(" "),t("p",[a._v("var_list must be a list of Variable or Tensor objects. This method creates shadow variables for all elements of var_list. Shadow variables for Variable objects are initialized to the variable's initial value. They will be added to the GraphKeys.MOVING_AVERAGE_VARIABLES collection. For Tensor objects, the shadow variables are initialized to 0 and zero debiased (see docstring in assign_moving_average for more details).\n"),t("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/global_variables",target:"_blank",rel:"noopener noreferrer"}},[a._v("tf.compat.v1.global_variables()"),t("OutboundLink")],1),a._v("shadow variables are created with trainable=False and added to the GraphKeys.ALL_VARIABLES collection. They will be returned by calls to .")]),a._v(" "),t("p",[a._v("Returns an op that updates all shadow variables from the current value of their associated variables.")]),a._v(" "),t("p",[a._v("Note that apply() can be called multiple times. When eager execution is enabled each call to apply will update the variables once, so this needs to be called in a loop.")]),a._v(" "),t("h4",{attrs:{id:"args-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[a._v("#")]),a._v(" Args:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("var_list")]),a._v(": A list of Variable or Tensor objects. The variables and Tensors must be of types bfloat16, float16, float32, or float64.")])]),a._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[a._v("#")]),a._v(" Returns:")]),a._v(" "),t("p",[a._v("An Operation that updates the moving averages.")]),a._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[a._v("#")]),a._v(" Raises:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("TypeError")]),a._v(": If the arguments are not an allowed type.")])]),a._v(" "),t("h3",{attrs:{id:"average"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#average","aria-hidden":"true"}},[a._v("#")]),a._v(" average")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/training/moving_averages.py#L464-L474",target:"_blank",rel:"noopener noreferrer"}},[a._v("View source"),t("OutboundLink")],1)]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" average(var)\n")])])]),t("p",[a._v("Returns the Variable holding the average of var.")]),a._v(" "),t("h4",{attrs:{id:"args-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[a._v("#")]),a._v(" Args:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("var")]),a._v(": A "),t("code",[a._v("Variable")]),a._v(" object.")])]),a._v(" "),t("h4",{attrs:{id:"returns-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[a._v("#")]),a._v(" Returns:")]),a._v(" "),t("p",[a._v("A Variable object or None if the moving average of var is not maintained.")]),a._v(" "),t("h3",{attrs:{id:"average-name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#average-name","aria-hidden":"true"}},[a._v("#")]),a._v(" average_name")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/training/moving_averages.py#L476-L501",target:"_blank",rel:"noopener noreferrer"}},[a._v("View source"),t("OutboundLink")],1)]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" average_name(var)\n")])])]),t("p",[a._v("Returns the name of the Variable holding the average for var.")]),a._v(" "),t("p",[a._v("The typical scenario for ExponentialMovingAverage is to compute moving averages of variables during training, and restore the variables from the computed moving averages during evaluations.")]),a._v(" "),t("p",[a._v("To restore variables, you have to know the name of the shadow variables. That name and the original variable can then be passed to a Saver() object to restore the variable from the moving average value with: saver = tf.compat.v1.train.Saver({ema.average_name(var): var})")]),a._v(" "),t("p",[a._v("average_name() can be called whether or not apply() has been called.")]),a._v(" "),t("h4",{attrs:{id:"args-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-4","aria-hidden":"true"}},[a._v("#")]),a._v(" Args:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("var")]),a._v(": A "),t("code",[a._v("Variable")]),a._v(" object.")])]),a._v(" "),t("h4",{attrs:{id:"returns-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[a._v("#")]),a._v(" Returns:")]),a._v(" "),t("p",[a._v("A string: The name of the variable that will be used or was used by the ExponentialMovingAverage class to hold the moving average of var.")]),a._v(" "),t("h3",{attrs:{id:"variables-to-restore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variables-to-restore","aria-hidden":"true"}},[a._v("#")]),a._v(" variables_to_restore")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/training/moving_averages.py#L503-L550",target:"_blank",rel:"noopener noreferrer"}},[a._v("View source"),t("OutboundLink")],1)]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" variables_to_restore(moving_avg_variables=None)\n")])])]),t("p",[a._v("Returns a map of names to Variables to restore.")]),a._v(" "),t("p",[a._v("If a variable has a moving average, use the moving average variable name as the restore name; otherwise, use the variable name.")]),a._v(" "),t("p",[a._v("For example,")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("   variables_to_restore = ema.variables_to_restore()\n  saver = tf.compat.v1.train.Saver(variables_to_restore)\n")])])]),t("p",[a._v("Below is an example of such mapping:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("   conv/batchnorm/gamma/ExponentialMovingAverage: conv/batchnorm/gamma,\n  conv_4/conv2d_params/ExponentialMovingAverage: conv_4/conv2d_params,\n  global_step: global_step\n")])])]),t("h4",{attrs:{id:"args-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-5","aria-hidden":"true"}},[a._v("#")]),a._v(" Args:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("moving_avg_variables")]),a._v(": a list of variables that require to use of the moving average variable name to be restored. If None, it will default to variables.moving_average_variables() + variables.trainable_variables()")])]),a._v(" "),t("h4",{attrs:{id:"returns-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[a._v("#")]),a._v(" Returns:")]),a._v(" "),t("p",[a._v("A map from restore_names to variables. The restore_name is either the original or the moving average version of the variable name, depending on whether the variable name is in the moving_avg_variables.")])])}),[],!1,null,null,null);e.default=s.exports}}]);