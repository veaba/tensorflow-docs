(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{213:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Defined in generated file: python/ops/gen_bitwise_ops.py")]),t._v(" "),s("p",[t._v("Elementwise computes the bitwise OR of x and y.")]),t._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[t._v("#")]),t._v(" Aliases:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("tf.compat.v1.bitwise.bitwise_or")])]),t._v(" "),s("li",[s("code",[t._v("tf.compat.v2.bitwise.bitwise_or")])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" tf.bitwise.bitwise_or(\n    x,\n    y,\n    name=None\n)\n")])])]),s("p",[t._v("The result will have those bits set, that are set in x, y or both. The computation is performed on the underlying representations of x and y.")]),t._v(" "),s("h4",{attrs:{id:"for-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[t._v("#")]),t._v(" For example:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" import tensorflow as tf\nfrom tensorflow.python.ops import bitwise_ops\ndtype_list = [tf.int8, tf.int16, tf.int32, tf.int64,\n              tf.uint8, tf.uint16, tf.uint32, tf.uint64]\n\nfor dtype in dtype_list:\n  lhs = tf.constant([0, 5, 3, 14], dtype=dtype)\n  rhs = tf.constant([5, 0, 7, 11], dtype=dtype)\n  exp = tf.constant([5, 5, 7, 15], dtype=tf.float32)\n\n  res = bitwise_ops.bitwise_or(lhs, rhs)\n  tf.assert_equal(tf.cast(res,  tf.float32), exp)  # TRUE\n")])])]),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[t._v("#")]),t._v(" Args:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("x")]),t._v(": A "),s("code",[t._v("Tensor")]),t._v(". Must be one of the following types: "),s("code",[t._v("int8")]),t._v(", "),s("code",[t._v("int16")]),t._v(", "),s("code",[t._v("int32")]),t._v(", "),s("code",[t._v("int64")]),t._v(", "),s("code",[t._v("uint8")]),t._v(", "),s("code",[t._v("uint16")]),t._v(", "),s("code",[t._v("uint32")]),t._v(", "),s("code",[t._v("uint64")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("y")]),t._v(": A "),s("code",[t._v("Tensor")]),t._v(". Must have the same t"),s("code",[t._v("y")]),t._v("pe as "),s("code",[t._v("x")]),t._v(".")]),t._v(" "),s("li",[s("code",[t._v("name")]),t._v(": A "),s("code",[t._v("name")]),t._v(" for the operation (optional).")])]),t._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns:")]),t._v(" "),s("p",[t._v("A Tensor. Has the same type as x.")])])}),[],!1,null,null,null);e.default=n.exports}}]);