(window.webpackJsonp=window.webpackJsonp||[]).push([[1116],{1305:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.SparseTensor"),a("OutboundLink")],1),e._v("A transformation that batches ragged elements into s.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.data.experimental.dense_to_sparse_batch")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.data.experimental.dense_to_sparse_batch")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.data.experimental.dense_to_sparse_batch(\n    batch_size,\n    row_shape\n)\n")])])]),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/data/Dataset#padded_batch",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dataset.padded_batch()"),a("OutboundLink")],1),e._v("Like , this transformation combines multiple consecutive elements of the dataset, which might have different shapes, into a single element. The resulting element has three components (indices, values, and dense_shape), which comprise a tf.SparseTensor that represents the same data. The row_shape represents the dense shape of each row in the resulting tf.SparseTensor, to which the effective batch size is prepended. For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" # NOTE: The following examples use `{ ... }` to represent the\n# contents of a dataset.\na = { ['a', 'b', 'c'], ['a', 'b'], ['a', 'b', 'c', 'd'] }\n\na.apply(tf.data.experimental.dense_to_sparse_batch(\n    batch_size=2, row_shape=[6])) ==\n{\n    ([[0, 0], [0, 1], [0, 2], [1, 0], [1, 1]],  # indices\n     ['a', 'b', 'c', 'a', 'b'],                 # values\n     [2, 6]),                                   # dense_shape\n    ([[0, 0], [0, 1], [0, 2], [0, 3]],\n     ['a', 'b', 'c', 'd'],\n     [1, 6])\n}\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("batch_size")]),e._v(": A "),a("code",[e._v("tf.int64")]),e._v(" scalar "),a("code",[e._v("tf.Tensor")]),e._v(", representing the number of consecutive elements of this dataset to combine in a single batch.")]),e._v(" "),a("li",[a("code",[e._v("row_shape")]),e._v(": A "),a("code",[e._v("tf.Tensor")]),e._v("Shape or "),a("code",[e._v("tf.int64")]),e._v(" vector tensor-like object representing the equivalent dense shape of a row in the resulting "),a("code",[e._v("tf.SparseTensor")]),e._v(". Each element of this dataset must have the same rank as "),a("code",[e._v("row_shape")]),e._v(", and must have size less than or equal to "),a("code",[e._v("row_shape")]),e._v(" in each dimension.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/data/Dataset#apply",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.data.Dataset.apply"),a("OutboundLink")],1),e._v("A Dataset transformation function, which can be passed to .")])])}),[],!1,null,null,null);t.default=n.exports}}]);