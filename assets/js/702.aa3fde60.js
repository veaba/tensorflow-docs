(window.webpackJsonp=window.webpackJsonp||[]).push([[702],{890:function(e,t,o){"use strict";o.r(t);var a=o(0),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Log provided 'op_log', and add additional model information below.")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" tf.compat.v1.profiler.write_op_log(\n    graph,\n    log_dir,\n    op_log=None,\n    run_meta=None,\n    add_trace=True\n)\n")])])]),o("p",[e._v("The API also assigns ops in tf.compat.v1.trainable_variables() an op type called '_trainable_variables'. The API also logs 'flops' statistics for ops with op.RegisterStatistics() defined. flops calculation depends on Tensor shapes defined in 'graph', which might not be complete. 'run_meta', if provided, completes the shape information with best effort.")]),e._v(" "),o("h4",{attrs:{id:"args"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("graph")]),e._v(": tf.Graph. If None and eager execution is not enabled, use default "),o("code",[e._v("graph")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("log_dir")]),e._v(": directory to write the log file.")]),e._v(" "),o("li",[o("code",[e._v("op_log")]),e._v(": (Optional) OpLogProto proto to be written. If not provided, an new one is created.")]),e._v(" "),o("li",[o("code",[e._v("run_meta")]),e._v(": (Optional) RunMetadata proto that helps flops computation using run time shape information.")]),e._v(" "),o("li",[o("code",[e._v("add_trace")]),e._v(': Whether to add python code trace information. Used to support "code" view.')])])])}),[],!1,null,null,null);t.default=n.exports}}]);