(window.webpackJsonp=window.webpackJsonp||[]).push([[892],{1080:function(e,a,t){"use strict";t.r(a);var r=t(0),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Applies cosine decay with restarts to the learning rate.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.compat.v1.train.cosine_decay_restarts(\n    learning_rate,\n    global_step,\n    first_decay_steps,\n    t_mul=2.0,\n    m_mul=1.0,\n    alpha=0.0,\n    name=None\n)\n")])])]),t("p",[e._v("See [Loshchilov & Hutter, ICLR2016], SGDR: Stochastic Gradient Descent with Warm Restarts. https://arxiv.org/abs/1608.03983")]),e._v(" "),t("p",[e._v("When training a model, it is often recommended to lower the learning rate as the training progresses. This function applies a cosine decay function with restarts to a provided initial learning rate. It requires a global_step value to compute the decayed learning rate. You can just pass a TensorFlow variable that you increment at each training step.")]),e._v(" "),t("p",[e._v("The function returns the decayed learning rate while taking into account possible warm restarts. The learning rate multiplier first decays from 1 to alpha for first_decay_steps steps. Then, a warm restart is performed. Each new warm restart runs for t_mul times more steps and with m_mul times smaller initial learning rate.")]),e._v(" "),t("h4",{attrs:{id:"example-usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example-usage","aria-hidden":"true"}},[e._v("#")]),e._v(" Example usage:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" first_decay_steps = 1000\nlr_decayed = cosine_decay_restarts(learning_rate, global_step,\n                                   first_decay_steps)\n")])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("learning_rate")]),e._v(": A scalar "),t("code",[e._v("float32")]),e._v(" or "),t("code",[e._v("float64")]),e._v(" Tensor or a Python number. The initial learning rate.")]),e._v(" "),t("li",[t("code",[e._v("global_step")]),e._v(": A scalar "),t("code",[e._v("int32")]),e._v(" or "),t("code",[e._v("int64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" or a Python number. Global step to use for the decay computation.")]),e._v(" "),t("li",[t("code",[e._v("first_decay_steps")]),e._v(": A scalar "),t("code",[e._v("int32")]),e._v(" or "),t("code",[e._v("int64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" or a Python number. Number of steps to decay over.")]),e._v(" "),t("li",[t("code",[e._v("t_mul")]),e._v(": A scalar "),t("code",[e._v("float32")]),e._v(" or "),t("code",[e._v("float64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" or a Python number. Used to derive the number of iterations in the i-th period")]),e._v(" "),t("li",[t("code",[e._v("m_mul")]),e._v(": A scalar "),t("code",[e._v("float32")]),e._v(" or "),t("code",[e._v("float64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" or a Python number. Used to derive the initial learning rate of the i-th period:")]),e._v(" "),t("li",[t("code",[e._v("alpha")]),e._v(": A scalar "),t("code",[e._v("float32")]),e._v(" or "),t("code",[e._v("float64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" or a Python number. Minimum learning rate value as a fraction of the "),t("code",[e._v("learning_rate")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": String. Optional "),t("code",[e._v("name")]),e._v(" of the operation. Defaults to 'SGDRDecay'.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A scalar Tensor of the same type as learning_rate. The decayed learning rate.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": if "),t("code",[e._v("global_step")]),e._v(" is not supplied.")])]),e._v(" "),t("h4",{attrs:{id:"eager-compatibility"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eager-compatibility","aria-hidden":"true"}},[e._v("#")]),e._v(" Eager Compatibility")]),e._v(" "),t("p",[e._v("When eager execution is enabled, this function returns a function which in turn returns the decayed learning rate Tensor. This can be useful for changing the learning rate value across different invocations of optimizer functions.")])])}),[],!1,null,null,null);a.default=s.exports}}]);