(window.webpackJsonp=window.webpackJsonp||[]).push([[1183],{1372:function(e,t,r){"use strict";r.r(t);var s=r(0),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"class-gceclusterresolver"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#class-gceclusterresolver","aria-hidden":"true"}},[e._v("#")]),e._v(" Class GCEClusterResolver")]),e._v(" "),r("p",[e._v("ClusterResolver for Google Compute Engine.\n"),r("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/distribute/cluster_resolver/ClusterResolver",target:"_blank",rel:"noopener noreferrer"}},[e._v("ClusterResolver"),r("OutboundLink")],1),e._v("Inherits From:")]),e._v(" "),r("h3",{attrs:{id:"aliases"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),r("ul",[r("li",[e._v("Class "),r("code",[e._v("tf.compat.v1.distribute.cluster_resolver.GCEClusterResolver")])]),e._v(" "),r("li",[e._v("Class "),r("code",[e._v("tf.compat.v2.distribute.cluster_resolver.GCEClusterResolver")])])]),e._v(" "),r("p",[e._v("This is an implementation of cluster resolvers for the Google Compute Engine instance group platform. By specifying a project, zone, and instance group, this will retrieve the IP address of all the instances within the instance group and return a ClusterResolver object suitable for use for distributed TensorFlow.")]),e._v(" "),r("h2",{attrs:{id:"init"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),r("strong",[e._v("init")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/gce_cluster_resolver.py#L45-L104",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" __init__(\n    project,\n    zone,\n    instance_group,\n    port,\n    task_type='worker',\n    task_id=0,\n    rpc_layer='grpc',\n    credentials='default',\n    service=None\n)\n")])])]),r("p",[e._v("Creates a new GCEClusterResolver object.")]),e._v(" "),r("p",[e._v("This takes in a few parameters and creates a GCEClusterResolver project. It will then use these parameters to query the GCE API for the IP addresses of each instance in the instance group.")]),e._v(" "),r("h4",{attrs:{id:"args"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("project")]),e._v(": Name of the GCE "),r("code",[e._v("project")]),e._v(".")]),e._v(" "),r("li",[r("code",[e._v("zone")]),e._v(": Zone of the GCE instance group.")]),e._v(" "),r("li",[r("code",[e._v("instance_group")]),e._v(": Name of the GCE instance group.")]),e._v(" "),r("li",[r("code",[e._v("port")]),e._v(": Port of the listening TensorFlow server (default: 8470)")]),e._v(" "),r("li",[r("code",[e._v("task_type")]),e._v(": Name of the TensorFlow job this GCE instance group of VM instances belong to.")]),e._v(" "),r("li",[r("code",[e._v("task_id")]),e._v(": The task index for this particular VM, within the GCE instance group. In particular, every single instance should be assigned a unique ordinal index within an instance group manually so that they can be distinguished from each other.")]),e._v(" "),r("li",[r("code",[e._v("rpc_layer")]),e._v(": The RPC layer TensorFlow should use to communicate across instances.")]),e._v(" "),r("li",[r("code",[e._v("credentials")]),e._v(": GCE Credentials. If nothing is specified, this defaults to GoogleCredentials.get_application_default().")]),e._v(" "),r("li",[r("code",[e._v("service")]),e._v(": The GCE API object returned by the googleapiclient.discovery function. (Default: discovery.build('compute', 'v1')). If you specify a custom "),r("code",[e._v("service")]),e._v(" object, then the "),r("code",[e._v("credentials")]),e._v(" parameter will be ignored.")])]),e._v(" "),r("h4",{attrs:{id:"raises"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("ImportError")]),e._v(": If the googleapiclient is not installed.")])]),e._v(" "),r("h2",{attrs:{id:"properties"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),r("h3",{attrs:{id:"environment"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#environment","aria-hidden":"true"}},[e._v("#")]),e._v(" environment")]),e._v(" "),r("p",[e._v("Returns the current environment which TensorFlow is running in.")]),e._v(" "),r("p",[e._v('There are two possible return values, "google" (when TensorFlow is running in a Google-internal environment) or an empty string (when TensorFlow is running elsewhere).')]),e._v(" "),r("p",[e._v("If you are implementing a ClusterResolver that works in both the Google environment and the open-source world (for instance, a TPU ClusterResolver or similar), you will have to return the appropriate string depending on the environment, which you will have to detect.")]),e._v(" "),r("p",[e._v("Otherwise, if you are implementing a ClusterResolver that will only work in open-source TensorFlow, you do not need to implement this property.")]),e._v(" "),r("h3",{attrs:{id:"rpc-layer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rpc-layer","aria-hidden":"true"}},[e._v("#")]),e._v(" rpc_layer")]),e._v(" "),r("h3",{attrs:{id:"task-id"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#task-id","aria-hidden":"true"}},[e._v("#")]),e._v(" task_id")]),e._v(" "),r("h3",{attrs:{id:"task-type"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#task-type","aria-hidden":"true"}},[e._v("#")]),e._v(" task_type")]),e._v(" "),r("h2",{attrs:{id:"methods"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),r("h3",{attrs:{id:"cluster-spec"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cluster-spec","aria-hidden":"true"}},[e._v("#")]),e._v(" cluster_spec")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/gce_cluster_resolver.py#L106-L149",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" cluster_spec()\n")])])]),r("p",[e._v("Returns a ClusterSpec object based on the latest instance group info.")]),e._v(" "),r("p",[e._v("This returns a ClusterSpec object for use based on information from the specified instance group. We will retrieve the information from the GCE APIs every time this method is called.")]),e._v(" "),r("h4",{attrs:{id:"returns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("A ClusterSpec containing host information retrieved from GCE.")]),e._v(" "),r("h3",{attrs:{id:"master"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#master","aria-hidden":"true"}},[e._v("#")]),e._v(" master")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/gce_cluster_resolver.py#L151-L162",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" master(\n    task_type=None,\n    task_id=None,\n    rpc_layer=None\n)\n")])])]),r("p",[e._v("Retrieves the name or URL of the session master.")]),e._v(" "),r("h4",{attrs:{id:"args-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("task_type")]),e._v(": (Optional) The type of the TensorFlow task of the master.")]),e._v(" "),r("li",[r("code",[e._v("task_id")]),e._v(": (Optional) The index of the TensorFlow task of the master.")]),e._v(" "),r("li",[r("code",[e._v("rpc_layer")]),e._v(": (Optional) The RPC protocol for the given cluster.")])]),e._v(" "),r("h4",{attrs:{id:"returns-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("The name or URL of the session master.")]),e._v(" "),r("p",[e._v("Implementors of this function must take care in ensuring that the master returned is up-to-date at the time to calling this function. This usually means retrieving the master every time this function is invoked.")]),e._v(" "),r("h3",{attrs:{id:"num-accelerators"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#num-accelerators","aria-hidden":"true"}},[e._v("#")]),e._v(" num_accelerators")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/distribute/cluster_resolver/cluster_resolver.py#L125-L160",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" num_accelerators(\n    task_type=None,\n    task_id=None,\n    config_proto=None\n)\n")])])]),r("p",[e._v("Returns the number of accelerator cores per worker.")]),e._v(" "),r("p",[e._v("This returns the number of accelerator cores (such as GPUs and TPUs) available per worker.")]),e._v(" "),r("p",[e._v("Optionally, we allow callers to specify the task_type, and task_id, for if they want to target a specific TensorFlow process to query the number of accelerators. This is to support heterogenous environments, where the number of accelerators cores per host is different.")]),e._v(" "),r("h4",{attrs:{id:"args-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("task_type")]),e._v(": (Optional) The type of the TensorFlow task of the machine we want to query.")]),e._v(" "),r("li",[r("code",[e._v("task_id")]),e._v(": (Optional) The index of the TensorFlow task of the machine we want to query.")]),e._v(" "),r("li",[r("code",[e._v("config_proto")]),e._v(": (Optional) Configuration for starting a new session to query how many accelerator cores it has.")])]),e._v(" "),r("h4",{attrs:{id:"returns-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("A map of accelerator types to number of cores.")])])}),[],!1,null,null,null);t.default=a.exports}}]);