(window.webpackJsonp=window.webpackJsonp||[]).push([[2567],{2758:function(e,t,o){"use strict";o.r(t);var n=o(0),_=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Wraps a python function into a TensorFlow op that executes it eagerly.")]),e._v(" "),o("h3",{attrs:{id:"aliases"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("tf.compat.v1.py_function")])]),e._v(" "),o("li",[o("code",[e._v("tf.compat.v2.py_function")])])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" tf.py_function(\n    func,\n    inp,\n    Tout,\n    name=None\n)\n")])])]),o("h3",{attrs:{id:"used-in-the-guide"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("t")]),e._v("f"),o("code",[e._v(".")]),e._v("d"),o("code",[e._v("a")]),e._v("t"),o("code",[e._v("a")]),e._v(":"),o("code"),e._v("B"),o("code",[e._v("u")]),e._v("i"),o("code",[e._v("l")]),e._v("d"),o("code"),e._v("T"),o("code",[e._v("e")]),e._v("n"),o("code",[e._v("s")]),e._v("o"),o("code",[e._v("r")]),e._v("F"),o("code",[e._v("l")]),e._v("o"),o("code",[e._v("w")]),e._v(" "),o("code",[e._v("i")]),e._v("n"),o("code",[e._v("p")]),e._v("u"),o("code",[e._v("t")]),e._v(" "),o("code",[e._v("p")]),e._v("i"),o("code",[e._v("p")]),e._v("e"),o("code",[e._v("l")]),e._v("i"),o("code",[e._v("n")]),e._v("e"),o("code",[e._v("s")])])]),e._v(" "),o("h3",{attrs:{id:"used-in-the-tutorials"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("B")]),e._v("e"),o("code",[e._v("t")]),e._v("t"),o("code",[e._v("e")]),e._v("r"),o("code"),e._v("p"),o("code",[e._v("e")]),e._v("r"),o("code",[e._v("f")]),e._v("o"),o("code",[e._v("r")]),e._v("m"),o("code",[e._v("a")]),e._v("n"),o("code",[e._v("c")]),e._v("e"),o("code"),e._v("w"),o("code",[e._v("i")]),e._v("t"),o("code",[e._v("h")]),e._v(" "),o("code",[e._v("t")]),e._v("f"),o("code",[e._v(".")]),e._v("f"),o("code",[e._v("u")]),e._v("n"),o("code",[e._v("c")]),e._v("t"),o("code",[e._v("i")]),e._v("o"),o("code",[e._v("n")])]),e._v(" "),o("li",[o("code",[e._v("L")]),e._v("o"),o("code",[e._v("a")]),e._v("d"),o("code"),e._v("t"),o("code",[e._v("e")]),e._v("x"),o("code",[e._v("t")])]),e._v(" "),o("li",[o("code",[e._v("T")]),e._v("F"),o("code",[e._v("R")]),e._v("e"),o("code",[e._v("c")]),e._v("o"),o("code",[e._v("r")]),e._v("d"),o("code"),e._v("a"),o("code",[e._v("n")]),e._v("d"),o("code"),e._v("t"),o("code",[e._v("f")]),e._v("."),o("code",[e._v("E")]),e._v("x"),o("code",[e._v("a")]),e._v("m"),o("code",[e._v("p")]),e._v("l"),o("code",[e._v("e")])]),e._v(" "),o("li",[o("code",[e._v("T")]),e._v("r"),o("code",[e._v("a")]),e._v("n"),o("code",[e._v("s")]),e._v("f"),o("code",[e._v("o")]),e._v("r"),o("code",[e._v("m")]),e._v("e"),o("code",[e._v("r")]),e._v(" "),o("code",[e._v("m")]),e._v("o"),o("code",[e._v("d")]),e._v("e"),o("code",[e._v("l")]),e._v(" "),o("code",[e._v("f")]),e._v("o"),o("code",[e._v("r")]),e._v(" "),o("code",[e._v("l")]),e._v("a"),o("code",[e._v("n")]),e._v("g"),o("code",[e._v("u")]),e._v("a"),o("code",[e._v("g")]),e._v("e"),o("code"),e._v("u"),o("code",[e._v("n")]),e._v("d"),o("code",[e._v("e")]),e._v("r"),o("code",[e._v("s")]),e._v("t"),o("code",[e._v("a")]),e._v("n"),o("code",[e._v("d")]),e._v("i"),o("code",[e._v("n")]),e._v("g``\n"),o("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/py_function",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.py_function"),o("OutboundLink")],1),e._v("This function allows expressing computations in a TensorFlow graph as Python functions. In particular, it wraps a Python function func in a once-differentiable TensorFlow operation that executes it with eager execution enabled. As a consequence,  makes it possible to express control flow using Python constructs (if, while, for, etc.), instead of TensorFlow control flow constructs (tf.cond, tf.while_loop). For example, you might use  to implement the log huber function:")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" def log_huber(x, m):\n  if tf.abs(x) <= m:\n    return x**2\n  else:\n    return m**2 * (1 - 2 * tf.math.log(m) + tf.math.log(x**2))\n\nx = tf.compat.v1.placeholder(tf.float32)\nm = tf.compat.v1.placeholder(tf.float32)\n\ny = tf.py_function(func=log_huber, inp=[x, m], Tout=tf.float32)\ndy_dx = tf.gradients(y, x)[0]\n\nwith tf.compat.v1.Session() as sess:\n  # The session executes `log_huber` eagerly. Given the feed values below,\n  # it will take the first branch, so `y` evaluates to 1.0 and\n  # `dy_dx` evaluates to 2.0.\n  y, dy_dx = sess.run([y, dy_dx], feed_dict={x: 1.0, m: 2.0})\n")])])]),o("p",[o("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/py_function",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.py_function"),o("OutboundLink")],1),e._v("You can also use  to debug your models at runtime using Python tools, i.e., you can isolate portions of your code that you want to debug, wrap them in Python functions and insert pdb tracepoints or print statements as desired, and wrap those functions in .")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://tensorflow.org/guide/eager",target:"_blank",rel:"noopener noreferrer"}},[e._v("Eager guide"),o("OutboundLink")],1),e._v("For more information on eager execution, see the .")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/py_function",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.py_function"),o("OutboundLink")],1),e._v(" is similar in spirit to tf.compat.v1.py_func, but unlike the latter, the former lets you use TensorFlow operations in the wrapped Python function. In particular, while tf.compat.v1.py_func only runs on CPUs and wraps functions that take NumPy arrays as inputs and return NumPy arrays as outputs,  can be placed on GPUs and wraps functions that take Tensors as inputs, execute TensorFlow operations in their bodies, and return Tensors as outputs.")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/compat/v1/py_func",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.compat.v1.py_func"),o("OutboundLink")],1),e._v("Like , tf.py_function has the following limitations with respect to serialization and distribution:")]),e._v(" "),o("ul",[o("li",[e._v("The body of the "),o("code",[e._v("func")]),e._v("tion (i.e. "),o("code",[e._v("func")]),e._v(") will not be serialized in a "),o("code",[e._v("GraphDef")]),e._v(". Therefore, you should not use this "),o("code",[e._v("func")]),e._v("tion if you need to serialize your model and restore it in a different environment.")]),e._v(" "),o("li",[e._v("The operation must run in the same address space as the Python program that calls "),o("code",[e._v("tf.py_function")]),e._v("(). If you are using distributed TensorFlow, you must run a "),o("code",[e._v("tf.distribute.Server")]),e._v(" in the same process as the program that calls "),o("code",[e._v("tf.py_function")]),e._v("() and you must pin the created operation to a device in that server (e.g. using with tf.device()ðŸ˜ƒ.")])]),e._v(" "),o("h4",{attrs:{id:"args"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("func")]),e._v(": A Python "),o("code",[e._v("func")]),e._v("tion which accepts a list of "),o("code",[e._v("Tensor")]),e._v(" objects having element types that match the corresponding "),o("code",[e._v("tf.Tensor")]),e._v(" objects in "),o("code",[e._v("inp")]),e._v(" and returns a list of "),o("code",[e._v("Tensor")]),e._v(" objects (or a single "),o("code",[e._v("Tensor")]),e._v(", or "),o("code",[e._v("None")]),e._v(") having element types that match the corresponding values in "),o("code",[e._v("Tout")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("inp")]),e._v(": A list of "),o("code",[e._v("Tensor")]),e._v(" objects.")]),e._v(" "),o("li",[o("code",[e._v("Tout")]),e._v(": A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what "),o("code",[e._v("func")]),e._v(" returns; an empty list if no value is returned (i.e., if the return value is "),o("code",[e._v("None")]),e._v(").")]),e._v(" "),o("li",[o("code",[e._v("name")]),e._v(": A "),o("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),o("h4",{attrs:{id:"returns"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),o("p",[e._v("A list of "),o("code",[e._v("Tensor")]),e._v(" or a single "),o("code",[e._v("Tensor")]),e._v(" which "),o("code",[e._v("func")]),e._v(" computes; an empty list if "),o("code",[e._v("func")]),e._v(" returns None.")])])}),[],!1,null,null,null);t.default=_.exports}}]);