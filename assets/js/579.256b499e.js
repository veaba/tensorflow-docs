(window.webpackJsonp=window.webpackJsonp||[]).push([[579],{767:function(e,t,o){"use strict";o.r(t);var a=o(0),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Calculates how often predictions matches labels.")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" tf.compat.v1.metrics.accuracy(\n    labels,\n    predictions,\n    weights=None,\n    metrics_collections=None,\n    updates_collections=None,\n    name=None\n)\n")])])]),o("h3",{attrs:{id:"used-in-the-guide"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("M")]),e._v("i"),o("code",[e._v("g")]),e._v("r"),o("code",[e._v("a")]),e._v("t"),o("code",[e._v("e")]),e._v(" "),o("code",[e._v("y")]),e._v("o"),o("code",[e._v("u")]),e._v("r"),o("code"),e._v("T"),o("code",[e._v("e")]),e._v("n"),o("code",[e._v("s")]),e._v("o"),o("code",[e._v("r")]),e._v("F"),o("code",[e._v("l")]),e._v("o"),o("code",[e._v("w")]),e._v(" "),o("code",[e._v("1")]),e._v(" "),o("code",[e._v("c")]),e._v("o"),o("code",[e._v("d")]),e._v("e"),o("code"),e._v("t"),o("code",[e._v("o")]),e._v(" "),o("code",[e._v("T")]),e._v("e"),o("code",[e._v("n")]),e._v("s"),o("code",[e._v("o")]),e._v("r"),o("code",[e._v("F")]),e._v("l"),o("code",[e._v("o")]),e._v("w"),o("code"),e._v("2``")])]),e._v(" "),o("p",[e._v("The accuracy function creates two local variables, total and count that are used to compute the frequency with which predictions matches labels. This frequency is ultimately returned as accuracy: an idempotent operation that simply divides total by count.")]),e._v(" "),o("p",[e._v("For estimation of the metric over a stream of data, the function creates an update_op operation that updates these variables and returns the accuracy. Internally, an is_correct operation computes a Tensor with elements 1.0 where the corresponding elements of predictions and labels match and 0.0 otherwise. Then update_op increments total with the reduced sum of the product of weights and is_correct, and it increments count with the reduced sum of weights.")]),e._v(" "),o("p",[e._v("If weights is None, weights default to 1. Use weights of 0 to mask values.")]),e._v(" "),o("h4",{attrs:{id:"args"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("labels")]),e._v(": The ground truth values, a "),o("code",[e._v("Tensor")]),e._v(" whose shape matches "),o("code",[e._v("predictions")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("predictions")]),e._v(": The predicted values, a "),o("code",[e._v("Tensor")]),e._v(" of any shape.")]),e._v(" "),o("li",[o("code",[e._v("weights")]),e._v(": Optional "),o("code",[e._v("Tensor")]),e._v(" whose rank is either 0, or the same rank as "),o("code",[e._v("labels")]),e._v(", and must be broadcastable to "),o("code",[e._v("labels")]),e._v(" (i.e., all dimensions must be either "),o("code",[e._v("1")]),e._v(", or the same as the corresponding "),o("code",[e._v("labels")]),e._v(" dimension).")]),e._v(" "),o("li",[o("code",[e._v("metrics_collections")]),e._v(": An optional list of collections that "),o("code",[e._v("accuracy")]),e._v(" should be added to.")]),e._v(" "),o("li",[o("code",[e._v("updates_collections")]),e._v(": An optional list of collections that "),o("code",[e._v("update_op")]),e._v(" should be added to.")]),e._v(" "),o("li",[o("code",[e._v("name")]),e._v(": An optional variable_scope "),o("code",[e._v("name")]),e._v(".")])]),e._v(" "),o("h4",{attrs:{id:"returns"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("accuracy")]),e._v(": A "),o("code",[e._v("Tensor")]),e._v(" representing the "),o("code",[e._v("accuracy")]),e._v(", the value of "),o("code",[e._v("total")]),e._v(" divided by "),o("code",[e._v("count")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("update_op")]),e._v(": An operation that increments the "),o("code",[e._v("total")]),e._v(" and "),o("code",[e._v("count")]),e._v(" variables appropriately and whose value matches "),o("code",[e._v("accuracy")]),e._v(".")])]),e._v(" "),o("h4",{attrs:{id:"raises"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("ValueError")]),e._v(": If "),o("code",[e._v("predictions")]),e._v(" and "),o("code",[e._v("labels")]),e._v(" have mismatched shapes, or if "),o("code",[e._v("weights")]),e._v(" is not "),o("code",[e._v("None")]),e._v(" and its shape doesn't match "),o("code",[e._v("predictions")]),e._v(", or if either "),o("code",[e._v("metrics_collections")]),e._v(" or "),o("code",[e._v("updates_collections")]),e._v(" are not a list or tuple.")]),e._v(" "),o("li",[o("code",[e._v("RuntimeError")]),e._v(": If eager execution is enabled.")])])])}),[],!1,null,null,null);t.default=s.exports}}]);