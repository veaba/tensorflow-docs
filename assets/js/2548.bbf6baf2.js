(window.webpackJsonp=window.webpackJsonp||[]).push([[2548],{2739:function(a,e,r){"use strict";r.r(e);var t=r(0),s=Object(t.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("p",[a._v("Loads a TensorFlow plugin.")]),a._v(" "),r("h3",{attrs:{id:"aliases"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[a._v("#")]),a._v(" Aliases:")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("tf.compat.v1.load_library")])]),a._v(" "),r("li",[r("code",[a._v("tf.compat.v2.load_library")])])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v(" tf.load_library(library_location)\n")])])]),r("p",[a._v('"library_location" can be a path to a specific shared object, or a folder. If it is a folder, all shared objects that are named "libtfkernel*" will be loaded. When the library is loaded, kernels registered in the library via the '),r("code",[a._v("REGISTER_")]),a._v("* macros are made available in the TensorFlow process.")]),a._v(" "),r("h4",{attrs:{id:"args"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[a._v("#")]),a._v(" Args:")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("library_location")]),a._v(": Path to the plugin or the folder of plugins. Relative or absolute filesystem path to a dynamic library file or folder.")])]),a._v(" "),r("h4",{attrs:{id:"returns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[a._v("#")]),a._v(" Returns:")]),a._v(" "),r("p",[a._v("None")]),a._v(" "),r("h4",{attrs:{id:"raises"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[a._v("#")]),a._v(" Raises:")]),a._v(" "),r("ul",[r("li",[r("code",[a._v("OSError")]),a._v(": When the file to be loaded is not found.")]),a._v(" "),r("li",[r("code",[a._v("RuntimeError")]),a._v(": when unable to load the library.")])])])}),[],!1,null,null,null);e.default=s.exports}}]);