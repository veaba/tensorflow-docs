(window.webpackJsonp=window.webpackJsonp||[]).push([[2475],{2666:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"class-devicespec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-devicespec","aria-hidden":"true"}},[e._v("#")]),e._v(" Class DeviceSpec")]),e._v(" "),a("p",[e._v("Represents a (possibly partial) specification for a TensorFlow device.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[e._v("Class "),a("code",[e._v("tf.compat.v2.DeviceSpec")]),e._v(" "),a("code",[e._v("DeviceSpec")]),e._v("s are used throughout TensorFlow to describe where state is stored and computations occur. Using "),a("code",[e._v("DeviceSpec")]),e._v(" allows you to parse device spec strings to verify their validity, merge them or compose them programmatically.")])]),e._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' # Place the operations on device "GPU:0" in the "ps" job.\ndevice_spec = DeviceSpec(job="ps", device_type="GPU", device_index=0)\nwith tf.device(device_spec):\n  # Both my_var and squared_var will be placed on /job:ps/device:GPU:0.\n  my_var = tf.Variable(..., name="my_variable")\n  squared_var = tf.square(my_var)\n')])])]),a("p",[e._v("If a "),a("code",[e._v("DeviceSpec")]),e._v(" is partially specified, it will be merged with other "),a("code",[e._v("DeviceSpec")]),e._v("s according to the scope in which it is defined. "),a("code",[e._v("DeviceSpec")]),e._v(" components defined in inner scopes take precedence over those defined in outer scopes.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' with tf.device(DeviceSpec(job="train", )):\n  with tf.device(DeviceSpec(job="ps", device_type="GPU", device_index=0):\n    # Nodes created here will be assigned to /job:ps/device:GPU:0.\n  with tf.device(DeviceSpec(device_type="GPU", device_index=1):\n    # Nodes created here will be assigned to /job:train/device:GPU:1.\n')])])]),a("p",[e._v("A "),a("code",[e._v("DeviceSpec")]),e._v(" consists of 5 components -- each of which is optionally specified:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("J")]),e._v("o"),a("code",[e._v("b")]),e._v(":"),a("code"),e._v("T"),a("code",[e._v("h")]),e._v("e"),a("code"),e._v("j"),a("code",[e._v("o")]),e._v("b"),a("code"),e._v("n"),a("code",[e._v("a")]),e._v("m"),a("code",[e._v("e")]),e._v(".``")]),e._v(" "),a("li",[a("code",[e._v("R")]),e._v("e"),a("code",[e._v("p")]),e._v("l"),a("code",[e._v("i")]),e._v("c"),a("code",[e._v("a")]),e._v(":"),a("code"),e._v("T"),a("code",[e._v("h")]),e._v("e"),a("code"),e._v("r"),a("code",[e._v("e")]),e._v("p"),a("code",[e._v("l")]),e._v("i"),a("code",[e._v("c")]),e._v("a"),a("code"),e._v("i"),a("code",[e._v("n")]),e._v("d"),a("code",[e._v("e")]),e._v("x"),a("code",[e._v(".")])]),e._v(" "),a("li",[a("code",[e._v("T")]),e._v("a"),a("code",[e._v("s")]),e._v("k"),a("code",[e._v(":")]),e._v(" "),a("code",[e._v("T")]),e._v("h"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("t")]),e._v("a"),a("code",[e._v("s")]),e._v("k"),a("code"),e._v("i"),a("code",[e._v("n")]),e._v("d"),a("code",[e._v("e")]),e._v("x"),a("code",[e._v(".")])]),e._v(" "),a("li",[a("code",[e._v("D")]),e._v("e"),a("code",[e._v("v")]),e._v("i"),a("code",[e._v("c")]),e._v("e"),a("code"),e._v("t"),a("code",[e._v("y")]),e._v("p"),a("code",[e._v("e")]),e._v(":"),a("code"),e._v("T"),a("code",[e._v("h")]),e._v("e"),a("code"),e._v("d"),a("code",[e._v("e")]),e._v("v"),a("code",[e._v("i")]),e._v("c"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("t")]),e._v("y"),a("code",[e._v("p")]),e._v("e"),a("code"),e._v("s"),a("code",[e._v("t")]),e._v("r"),a("code",[e._v("i")]),e._v("n"),a("code",[e._v("g")]),e._v(" "),a("code",[e._v("(")]),e._v("e"),a("code",[e._v(".")]),e._v("g"),a("code",[e._v(".")]),e._v(" "),a("code",[e._v('"')]),e._v("C"),a("code",[e._v("P")]),e._v("U"),a("code",[e._v('"')]),e._v(" "),a("code",[e._v("o")]),e._v("r"),a("code"),e._v('"'),a("code",[e._v("G")]),e._v("P"),a("code",[e._v("U")]),e._v('"'),a("code",[e._v(")")]),e._v(".``")]),e._v(" "),a("li",[a("code",[e._v("D")]),e._v("e"),a("code",[e._v("v")]),e._v("i"),a("code",[e._v("c")]),e._v("e"),a("code"),e._v("i"),a("code",[e._v("n")]),e._v("d"),a("code",[e._v("e")]),e._v("x"),a("code",[e._v(":")]),e._v(" "),a("code",[e._v("T")]),e._v("h"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("d")]),e._v("e"),a("code",[e._v("v")]),e._v("i"),a("code",[e._v("c")]),e._v("e"),a("code"),e._v("i"),a("code",[e._v("n")]),e._v("d"),a("code",[e._v("e")]),e._v("x"),a("code",[e._v(".")])])]),e._v(" "),a("h2",{attrs:{id:"init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("init")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L92-L112",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __init__(\n    job=None,\n    replica=None,\n    task=None,\n    device_type=None,\n    device_index=None\n)\n")])])]),a("p",[e._v("Create a new "),a("code",[e._v("DeviceSpec")]),e._v(" object.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("job")]),e._v(": string. Optional "),a("code",[e._v("job")]),e._v(" name.")]),e._v(" "),a("li",[a("code",[e._v("replica")]),e._v(": int. Optional "),a("code",[e._v("replica")]),e._v(" index.")]),e._v(" "),a("li",[a("code",[e._v("task")]),e._v(": int. Optional "),a("code",[e._v("task")]),e._v(" index.")]),e._v(" "),a("li",[a("code",[e._v("device_type")]),e._v(': Optional device type string (e.g. "CPU" or "GPU")')]),e._v(" "),a("li",[a("code",[e._v("device_index")]),e._v(": int. Optional device index. If left unspecified, device represents 'any' "),a("code",[e._v("device_index")]),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),a("h3",{attrs:{id:"device-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#device-index","aria-hidden":"true"}},[e._v("#")]),e._v(" device_index")]),e._v(" "),a("h3",{attrs:{id:"device-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#device-type","aria-hidden":"true"}},[e._v("#")]),e._v(" device_type")]),e._v(" "),a("h3",{attrs:{id:"job"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#job","aria-hidden":"true"}},[e._v("#")]),e._v(" job")]),e._v(" "),a("h3",{attrs:{id:"replica"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replica","aria-hidden":"true"}},[e._v("#")]),e._v(" replica")]),e._v(" "),a("h3",{attrs:{id:"task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#task","aria-hidden":"true"}},[e._v("#")]),e._v(" task")]),e._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),a("h3",{attrs:{id:"eq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eq","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("eq")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L358-L372",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __eq__(other)\n")])])]),a("p",[e._v("Checks if the "),a("code",[e._v("other")]),e._v(" DeviceSpec is same as the current instance, eg have\nsame value for all the internal fields.")]),e._v(" "),a("h4",{attrs:{id:"args-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("other")]),e._v(": An"),a("code",[e._v("other")]),e._v(" DeviceSpec")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Return "),a("code",[e._v("True")]),e._v(" if "),a("code",[e._v("other")]),e._v(" is also a DeviceSpec instance and has same value as the current instance. Return "),a("code",[e._v("False")]),e._v(" "),a("code",[e._v("other")]),e._v("wise.")]),e._v(" "),a("h3",{attrs:{id:"from-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from-string","aria-hidden":"true"}},[e._v("#")]),e._v(" from_string")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L123-L138",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" @classmethod\nfrom_string(\n    cls,\n    spec\n)\n")])])]),a("p",[e._v("Construct a "),a("code",[e._v("DeviceSpec")]),e._v(" from a string.")]),e._v(" "),a("h4",{attrs:{id:"args-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("spec")]),e._v(": a string of the form /job:/replica:/task:/device:CPU: or /job:/replica:/task:/device:GPU: as cpu and gpu are mutually exclusive. All entries are optional.")])]),e._v(" "),a("h4",{attrs:{id:"returns-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A DeviceSpec.")]),e._v(" "),a("h3",{attrs:{id:"make-merged-spec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make-merged-spec","aria-hidden":"true"}},[e._v("#")]),e._v(" make_merged_spec")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L193-L215",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" make_merged_spec(dev)\n")])])]),a("p",[e._v("Returns a new DeviceSpec which incorporates "),a("code",[e._v("dev")]),e._v(".\nWhen combining specs, "),a("code",[e._v("dev")]),e._v(" will take precidence over the current spec. So for instance:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' first_spec = tf.DeviceSpec(job=0, device_type="CPU")\nsecond_spec = tf.DeviceSpec(device_type="GPU")\ncombined_spec = first_spec.make_merged_spec(second_spec)\n')])])]),a("p",[e._v("is equivalent to:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' combined_spec = tf.DeviceSpec(job=0, device_type="GPU")\n')])])]),a("h4",{attrs:{id:"args-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("dev")]),e._v(": a "),a("code",[e._v("DeviceSpec")])])]),e._v(" "),a("h4",{attrs:{id:"returns-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A new "),a("code",[e._v("DeviceSpec")]),e._v(" which combines "),a("code",[e._v("self")]),e._v(" and "),a("code",[e._v("dev")])]),e._v(" "),a("h3",{attrs:{id:"parse-from-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parse-from-string","aria-hidden":"true"}},[e._v("#")]),e._v(" parse_from_string")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L140-L191",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" parse_from_string(spec)\n")])])]),a("p",[e._v("Parse a "),a("code",[e._v("DeviceSpec")]),e._v(" name into its components.\n2.x behavior change: In TensorFlow 1.x, this function mutates its own state and returns itself. In 2.x, DeviceSpecs are immutable, and this function will return a DeviceSpec which contains the spec.\nRecommended:\nWill work in 1.x and 2.x (though deprecated in 2.x):\nWill NOT work in 2.x:\n"),a("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/DeviceSpec#from_string",target:"_blank",rel:"noopener noreferrer"}},[e._v("DeviceSpec.from_string"),a("OutboundLink")],1),e._v("In general,  should completely replace DeviceSpec.parse_from_string, and DeviceSpec.replace should completely replace setting attributes directly.")]),e._v(" "),a("h4",{attrs:{id:"args-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("spec")]),e._v(": an optional string of the form /job:/replica:/task:/device:CPU: or /job:/replica:/task:/device:GPU: as cpu and gpu are mutually exclusive. All entries are optional.")])]),e._v(" "),a("h4",{attrs:{id:"returns-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("DeviceSpec")]),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": if the spec was not valid.")])]),e._v(" "),a("h3",{attrs:{id:"replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replace","aria-hidden":"true"}},[e._v("#")]),e._v(" replace")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L217-L239",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" replace(**kwargs)\n")])])]),a("p",[e._v("Convenience method for making a new DeviceSpec by overriding fields.")]),e._v(" "),a("h4",{attrs:{id:"for-instance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-instance","aria-hidden":"true"}},[e._v("#")]),e._v(" For instance:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' my_spec = DeviceSpec=(job="my_job", device="CPU")\nmy_updated_spec = my_spec.replace(device="GPU")\nmy_other_spec = my_spec.replace(device=None)\n')])])]),a("h4",{attrs:{id:"args-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("h4",{attrs:{id:"returns-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A DeviceSpec with the fields specified in kwargs overridden.")]),e._v(" "),a("h3",{attrs:{id:"to-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to-string","aria-hidden":"true"}},[e._v("#")]),e._v(" to_string")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L114-L121",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" to_string()\n")])])]),a("p",[e._v("Return a string representation of this "),a("code",[e._v("DeviceSpec")]),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"returns-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("a string of the form /job:/replica:/task:/device::.")])])}),[],!1,null,null,null);t.default=s.exports}}]);