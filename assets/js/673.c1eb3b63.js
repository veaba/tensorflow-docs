(window.webpackJsonp=window.webpackJsonp||[]).push([[673],{861:function(e,_,v){"use strict";v.r(_);var o=v(0),t=Object(o.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("Creates a bidirectional recurrent neural network. (deprecated)")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v(" tf.compat.v1.nn.static_bidirectional_rnn(\n    cell_fw,\n    cell_bw,\n    inputs,\n    initial_state_fw=None,\n    initial_state_bw=None,\n    dtype=None,\n    sequence_length=None,\n    scope=None\n)\n")])])]),v("p",[e._v("Similar to the unidirectional case above (rnn) but takes input and builds independent forward and backward RNNs with the final forward and backward outputs depth-concatenated, such that the output will have the format [time][batch][cell_fw.output_size + cell_bw.output_size]. The input_size of forward and backward cell must match. The initial state for both directions is zero by default (but can be set optionally) and no intermediate states are ever returned -- the network is fully unrolled for the given (passed in) length(s) of the sequence(s) or completely unrolled if length(s) is not given.")]),e._v(" "),v("h4",{attrs:{id:"args"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("cell_fw")]),e._v(": An instance of RNNCell, to be used for forward direction.")]),e._v(" "),v("li",[v("code",[e._v("cell_bw")]),e._v(": An instance of RNNCell, to be used for backward direction.")]),e._v(" "),v("li",[v("code",[e._v("inputs")]),e._v(": A length T list of "),v("code",[e._v("inputs")]),e._v(", each a tensor of shape [batch_size, input_size], or a nested tuple of such elements.")]),e._v(" "),v("li",[v("code",[e._v("initial_state_fw")]),e._v(":"),v("code"),e._v("(op"),v("code",[e._v("t``i")]),e._v("on"),v("code",[e._v("a``l")]),e._v(")"),v("code"),e._v("An"),v("code",[e._v("``i")]),e._v("n"),v("code",[e._v("i``t``i``a``l`` ``s``t``a``t``e`` ``f")]),e._v("or"),v("code",[e._v("``t``h``e`` ``f")]),e._v("or"),v("code",[e._v("w``a")]),e._v("rd"),v("code"),e._v("RNN"),v("code",[e._v(".``")]),e._v("T"),v("code",[e._v("h``i``s``")]),e._v("mu"),v("code",[e._v("s``t`` ``b``e`` ``a`` ``t``e")]),e._v("n"),v("code",[e._v("s")]),e._v("or"),v("code"),e._v("o"),v("code",[e._v("f`` ``a")]),e._v("ppropr"),v("code",[e._v("i``a``t``e`` ``t")]),e._v("yp"),v("code",[e._v("e`` ``a")]),e._v("nd"),v("code",[e._v("``s``h``a")]),e._v("p"),v("code",[e._v("e``")]),e._v("["),v("code",[e._v("b``a``t``c``h``_``s``i``z``e``,`` ``cell_fw``.``s``t``a``t``e``_``s``i``z``e")]),e._v("]"),v("code",[e._v(".``")]),e._v("I"),v("code",[e._v("f`` ``cell_fw``.``s``t``a``t``e``_``s``i``z``e`` ``i``s`` ``a`` ``t")]),e._v("up"),v("code",[e._v("l``e``,`` ``t``h``i``s`` ``s``h")]),e._v("ou"),v("code",[e._v("l")]),e._v("d"),v("code",[e._v("``b``e`` ``a`` ``t")]),e._v("up"),v("code",[e._v("l``e``")]),e._v("o"),v("code",[e._v("f`` ``t``e")]),e._v("n"),v("code",[e._v("s")]),e._v("or"),v("code",[e._v("s`` ``h``a")]),e._v("v"),v("code",[e._v("i")]),e._v("ng"),v("code",[e._v("``s``h``a")]),e._v("p"),v("code",[e._v("e``s``")]),e._v("["),v("code",[e._v("b``a``t``c``h``_``s``i``z``e``,`` ``s")]),e._v("]"),v("code",[e._v("``f")]),e._v("or"),v("code",[e._v("``s`` ``i")]),e._v("n"),v("code",[e._v("``cell_fw``.``s``t``a``t``e``_``s``i``z``e``.")])]),e._v(" "),v("li",[v("code",[e._v("i")]),e._v("n"),v("code",[e._v("i``t``i``a``l``_``s``t``a``t``e``_``b``w")]),e._v(":"),v("code"),e._v("(op"),v("code",[e._v("t``i")]),e._v("on"),v("code",[e._v("a``l")]),e._v(")"),v("code"),e._v("S"),v("code",[e._v("a")]),e._v("m"),v("code",[e._v("e`` ``a``s`` ``f")]),e._v("or"),v("code",[e._v("``initial_state_fw``,`` ``b")]),e._v("u"),v("code",[e._v("t``")]),e._v("u"),v("code",[e._v("s``i")]),e._v("ng"),v("code",[e._v("``t``h``e`` ``c")]),e._v("orr"),v("code",[e._v("e``s")]),e._v("pond"),v("code",[e._v("i")]),e._v("ng"),v("code"),e._v("prop"),v("code",[e._v("e")]),e._v("r"),v("code",[e._v("t``i``e``s``")]),e._v("o"),v("code",[e._v("f`` ``cell_bw``.")])]),e._v(" "),v("li",[v("code",[e._v("dtype")]),e._v(":"),v("code"),e._v("(op"),v("code",[e._v("t``i")]),e._v("on"),v("code",[e._v("a``l")]),e._v(")"),v("code"),e._v("T"),v("code",[e._v("h``e``")]),e._v("d"),v("code",[e._v("a``t``a`` ``t")]),e._v("yp"),v("code",[e._v("e`` ``f")]),e._v("or"),v("code",[e._v("``t``h``e`` ``i")]),e._v("n"),v("code",[e._v("i``t``i``a``l`` ``s``t``a``t``e``.``")]),e._v("R"),v("code",[e._v("e")]),e._v("qu"),v("code",[e._v("i")]),e._v("r"),v("code",[e._v("e")]),e._v("d"),v("code",[e._v("``i``f`` ``e``i``t``h``e")]),e._v("r"),v("code"),e._v("o"),v("code",[e._v("f`` ``t``h``e`` ``i")]),e._v("n"),v("code",[e._v("i``t``i``a``l`` ``s``t``a``t``e``s`` ``a")]),e._v("r"),v("code",[e._v("e``")]),e._v("no"),v("code",[e._v("t``")]),e._v("prov"),v("code",[e._v("i")]),e._v("d"),v("code",[e._v("e")]),e._v("d"),v("code",[e._v(".")])]),e._v(" "),v("li",[v("code",[e._v("s``e")]),e._v("qu"),v("code",[e._v("e")]),e._v("n"),v("code",[e._v("c``e``_``l``e")]),e._v("ng"),v("code",[e._v("t``h")]),e._v(":"),v("code"),e._v("(op"),v("code",[e._v("t``i")]),e._v("on"),v("code",[e._v("a``l")]),e._v(")"),v("code"),e._v("An"),v("code",[e._v("``i")]),e._v("n"),v("code",[e._v("t")]),e._v("32/"),v("code",[e._v("i")]),e._v("n"),v("code",[e._v("t")]),e._v("64"),v("code"),e._v("v"),v("code",[e._v("e``c``t")]),e._v("or"),v("code",[e._v(",`` ``s``i``z``e``")]),e._v("["),v("code",[e._v("b``a``t``c``h``_``s``i``z``e")]),e._v("]"),v("code",[e._v(",`` ``c")]),e._v("on"),v("code",[e._v("t``a``i")]),e._v("n"),v("code",[e._v("i")]),e._v("ng"),v("code",[e._v("``t``h``e`` ``a``c``t")]),e._v("u"),v("code",[e._v("a``l`` ``l``e")]),e._v("ng"),v("code",[e._v("t``h``s`` ``f")]),e._v("or"),v("code",[e._v("``e``a``c``h``")]),e._v("o"),v("code",[e._v("f`` ``t``h``e`` ``s``e")]),e._v("qu"),v("code",[e._v("e")]),e._v("n"),v("code",[e._v("c``e``s``.")])]),e._v(" "),v("li",[v("code",[e._v("s``c")]),e._v("op"),v("code",[e._v("e")]),e._v(":"),v("code"),e._v("V"),v("code",[e._v("a")]),e._v("r"),v("code",[e._v("i``a``b``l``e")]),e._v("S"),v("code",[e._v("c")]),e._v("op"),v("code",[e._v("e`` ``f")]),e._v("or"),v("code",[e._v("``t``h``e`` ``c")]),e._v("r"),v("code",[e._v("e``a``t``e")]),e._v("d"),v("code",[e._v("``s")]),e._v("u"),v("code",[e._v("b")]),e._v("gr"),v("code",[e._v("a")]),e._v("p"),v("code",[e._v("h")]),e._v(";"),v("code"),e._v("d"),v("code",[e._v("e``f``a")]),e._v("u"),v("code",[e._v("l``t``s`` ``t")]),e._v("o"),v("code"),e._v('"'),v("code",[e._v("b``i")]),e._v("d"),v("code",[e._v("i")]),e._v("r"),v("code",[e._v("e``c``t``i")]),e._v("on"),v("code",[e._v("a``l``_")]),e._v('rnn"')])]),e._v(" "),v("h4",{attrs:{id:"returns"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),v("p",[e._v("A tuple (outputs, output_state_fw, output_state_bw) where: outputs is a length T list of outputs (one for each input), which are depth-concatenated forward and backward outputs. output_state_fw is the final state of the forward rnn. output_state_bw is the final state of the backward rnn.")]),e._v(" "),v("h4",{attrs:{id:"raises"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("TypeError")]),e._v(": If "),v("code",[e._v("cell_fw")]),e._v(" or "),v("code",[e._v("cell_bw")]),e._v(" is not an instance of "),v("code",[e._v("RNNCell")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("ValueError")]),e._v(": If inputs is None or an empty list.")])])])}),[],!1,null,null,null);_.default=t.exports}}]);