(window.webpackJsonp=window.webpackJsonp||[]).push([[936],{1124:function(e,t,n){"use strict";n.r(t);var a=n(0),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Transposes a.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.compat.v1.transpose(\n    a,\n    perm=None,\n    name='transpose',\n    conjugate=False\n)\n")])])]),n("p",[e._v("Permutes the dimensions according to perm.")]),e._v(" "),n("p",[e._v("The returned tensor's dimension i will correspond to the input dimension perm[i]. If perm is not given, it is set to (n-1...0), where n is the rank of the input tensor. Hence by default, this operation performs a regular matrix transpose on 2-D input Tensors. If conjugate is True and a.dtype is either complex64 or complex128 then the values of a are conjugated and transposed.")]),e._v(" "),n("h4",{attrs:{id:"for-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" x = tf.constant([[1, 2, 3], [4, 5, 6]])\ntf.transpose(x)  # [[1, 4]\n                 #  [2, 5]\n                 #  [3, 6]]\n\n# Equivalently\ntf.transpose(x, perm=[1, 0])  # [[1, 4]\n                              #  [2, 5]\n                              #  [3, 6]]\n\n# If x is complex, setting conjugate=True gives the conjugate transpose\nx = tf.constant([[1 + 1j, 2 + 2j, 3 + 3j],\n                 [4 + 4j, 5 + 5j, 6 + 6j]])\ntf.transpose(x, conjugate=True)  # [[1 - 1j, 4 - 4j],\n                                 #  [2 - 2j, 5 - 5j],\n                                 #  [3 - 3j, 6 - 6j]]\n\n# 'perm' is more useful for n-dimensional tensors, for n > 2\nx = tf.constant([[[ 1,  2,  3],\n                  [ 4,  5,  6]],\n                 [[ 7,  8,  9],\n                  [10, 11, 12]]])\n\n# Take the transpose of the matrices in dimension-0\n# (this common operation has a shorthand `linalg.matrix_transpose`)\ntf.transpose(x, perm=[0, 2, 1])  # [[[1,  4],\n                                 #   [2,  5],\n                                 #   [3,  6]],\n                                 #  [[7, 10],\n                                 #   [8, 11],\n                                 #   [9, 12]]]\n")])])]),n("h4",{attrs:{id:"args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("a")]),e._v(": A "),n("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("perm")]),e._v(": A "),n("code",[e._v("perm")]),e._v("ut"),n("code",[e._v("a")]),e._v("tion of the dimensions of "),n("code",[e._v("a")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("name")]),e._v(": A "),n("code",[e._v("name")]),e._v(" for the oper"),n("code",[e._v("a")]),e._v("tion (option"),n("code",[e._v("a")]),e._v("l).")]),e._v(" "),n("li",[n("code",[e._v("conjugate")]),e._v(": Option"),n("code",[e._v("a")]),e._v("l bool. Setting it to "),n("code",[e._v("True")]),e._v(" is m"),n("code",[e._v("a")]),e._v("them"),n("code",[e._v("a")]),e._v("tic"),n("code",[e._v("a")]),e._v("lly equiv"),n("code",[e._v("a")]),e._v("lent to tf.m"),n("code",[e._v("a")]),e._v("th.conj(tf.tr"),n("code",[e._v("a")]),e._v("nspose(input)).")])]),e._v(" "),n("h4",{attrs:{id:"returns"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),n("p",[e._v("A transposed Tensor.")]),e._v(" "),n("h4",{attrs:{id:"numpy-compatibility"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#numpy-compatibility","aria-hidden":"true"}},[e._v("#")]),e._v(" Numpy Compatibility")]),e._v(" "),n("p",[e._v("In numpy transposes are memory-efficient constant time operations as they simply return a new view of the same data with adjusted strides.")]),e._v(" "),n("p",[e._v("TensorFlow does not support strides, so transpose returns a new tensor with the items permuted.")])])}),[],!1,null,null,null);t.default=s.exports}}]);