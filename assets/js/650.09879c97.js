(window.webpackJsonp=window.webpackJsonp||[]).push([[650],{838:function(e,o,t){"use strict";t.r(o);var _=t(0),v=Object(_.a)({},(function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Defined in generated file: python/ops/gen_nn_ops.py")]),e._v(" "),t("p",[e._v("Computes a 2D convolution given quantized 4D input and filter tensors.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.compat.v1.nn.quantized_conv2d(\n    input,\n    filter,\n    min_input,\n    max_input,\n    min_filter,\n    max_filter,\n    strides,\n    padding,\n    out_type=tf.dtypes.qint32,\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n")])])]),t("p",[e._v("The inputs are quantized tensors where the lowest value represents the real number of the associated minimum, and the highest represents the maximum. This means that you can only interpret the quantized output in the same way, by taking the returned minimum and maximum values into account.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("input")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),t("code",[e._v("qint8")]),e._v(", "),t("code",[e._v("quint8")]),e._v(", "),t("code",[e._v("qint32")]),e._v(", "),t("code",[e._v("qint16")]),e._v(", "),t("code",[e._v("quint16")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("filter")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),t("code",[e._v("qint8")]),e._v(", "),t("code",[e._v("quint8")]),e._v(", "),t("code",[e._v("qint32")]),e._v(", "),t("code",[e._v("qint16")]),e._v(", "),t("code",[e._v("quint16")]),e._v(". "),t("code",[e._v("filter")]),e._v("'s "),t("code",[e._v("input")]),e._v("_depth dimension must match "),t("code",[e._v("input")]),e._v("'s depth dimensions.")]),e._v(" "),t("li",[t("code",[e._v("min_input")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(" of type "),t("code",[e._v("float32")]),e._v(". The float value that the lowest quantized "),t("code",[e._v("input")]),e._v(" value represents.")]),e._v(" "),t("li",[t("code",[e._v("max_input")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(" of type "),t("code",[e._v("float32")]),e._v(". The float value that the highest quantized "),t("code",[e._v("input")]),e._v(" value represents.")]),e._v(" "),t("li",[t("code",[e._v("min_filter")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(" of type "),t("code",[e._v("float32")]),e._v(". The float value that the lowest quantized "),t("code",[e._v("filter")]),e._v(" value represents.")]),e._v(" "),t("li",[t("code",[e._v("max_filter")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(" of type "),t("code",[e._v("float32")]),e._v(". The float value that the highest quantized "),t("code",[e._v("filter")]),e._v(" value represents.")]),e._v(" "),t("li",[t("code",[e._v("strides")]),e._v(": A list of "),t("code",[e._v("ints")]),e._v(". The stride of the sliding window for each dimension of the "),t("code",[e._v("input")]),e._v(" tensor.")]),e._v(" "),t("li",[t("code",[e._v("padding")]),e._v(": A "),t("code",[e._v("string")]),e._v(" from: "),t("code",[e._v('"SAME", "VALID"')]),e._v(". The type of "),t("code",[e._v("padding")]),e._v(" algorithm to use.")]),e._v(" "),t("li",[t("code",[e._v("out_type")]),e._v(": An optional "),t("code",[e._v("tf.DType")]),e._v(" from: "),t("code",[e._v("tf.qint8, tf.quint8, tf.qint32, tf.qint16, tf.quint16")]),e._v(". Defaults to "),t("code",[e._v("tf.qint32")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("dilations")]),e._v(":"),t("code"),e._v("An"),t("code"),e._v("optional"),t("code"),e._v("list"),t("code"),e._v("of"),t("code",[e._v("``ints")]),e._v("."),t("code"),e._v("Defaults"),t("code"),e._v("to"),t("code"),e._v("["),t("code",[e._v("1``,`` ``1``,`` ``1``,`` ``1")]),e._v("]."),t("code",[e._v("``1")]),e._v("-D"),t("code"),e._v("tensor"),t("code"),e._v("of"),t("code"),e._v("length"),t("code"),e._v("4."),t("code"),e._v("The"),t("code"),e._v("dilation"),t("code"),e._v("factor"),t("code"),e._v("for"),t("code"),e._v("each"),t("code"),e._v("dimension"),t("code"),e._v("of"),t("code",[e._v("``input")]),e._v("."),t("code"),e._v("If"),t("code"),e._v("set"),t("code"),e._v("to"),t("code"),e._v("k"),t("code"),e._v(">"),t("code",[e._v("``1``,``")]),e._v("there"),t("code"),e._v("will"),t("code"),e._v("be"),t("code"),e._v("k-"),t("code",[e._v("1``")]),e._v("skipped"),t("code"),e._v("cells"),t("code"),e._v("between"),t("code"),e._v("each"),t("code",[e._v("``filter``")]),e._v("element"),t("code"),e._v("on"),t("code"),e._v("that"),t("code"),e._v("dimension."),t("code"),e._v("The"),t("code"),e._v("dimension"),t("code"),e._v("order"),t("code"),e._v("is"),t("code"),e._v("determined"),t("code"),e._v("by"),t("code"),e._v("the"),t("code"),e._v("value"),t("code"),e._v("of"),t("code",[e._v("``data_format``,``")]),e._v("see"),t("code"),e._v("above"),t("code"),e._v("for"),t("code"),e._v("details."),t("code"),e._v("Dilations"),t("code"),e._v("in"),t("code"),e._v("the"),t("code"),e._v("batch"),t("code"),e._v("and"),t("code"),e._v("depth"),t("code"),e._v("dimensions"),t("code"),e._v("must"),t("code"),e._v("be"),t("code",[e._v("``1")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(":"),t("code"),e._v("A"),t("code",[e._v("``name``")]),e._v("for"),t("code"),e._v("the"),t("code"),e._v("operation"),t("code"),e._v("(optional).")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A tuple of Tensor objects (output, min_output, max_output).")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("output")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(" of type "),t("code",[e._v("out_type")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("min_output")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(" of type "),t("code",[e._v("float32")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("max_output")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(" of type "),t("code",[e._v("float32")]),e._v(".")])])])}),[],!1,null,null,null);o.default=v.exports}}]);