(window.webpackJsonp=window.webpackJsonp||[]).push([[524],{712:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Converts a graphdef with LiteOp hints into stub operations.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.compat.v1.lite.experimental.convert_op_hints_to_stubs(\n    session=None,\n    graph_def=None,\n    write_callback=(lambda graph_def, comments: None)\n)\n")])])]),a("p",[e._v("This is used to prepare for toco conversion of complex intrinsic usages. Note: only one of session or graph_def should be used, not both.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("session")]),e._v(": A TensorFlow "),a("code",[e._v("session")]),e._v(" that contains the graph to convert.")]),e._v(" "),a("li",[a("code",[e._v("graph_def")]),e._v(": A graph def that we should convert.")]),e._v(" "),a("li",[a("code",[e._v("write_callback")]),e._v(": A function pointer that can be used to write intermediate steps of graph transformation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A new graphdef with all ops contained in OpHints being replaced by a single op call with the right parameters.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If both session and graph_def are provided.")])])])}),[],!1,null,null,null);t.default=r.exports}}]);