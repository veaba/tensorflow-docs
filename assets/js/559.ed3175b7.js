(window.webpackJsonp=window.webpackJsonp||[]).push([[559],{747:function(e,s,t){"use strict";t.r(s);var o=t(0),a=Object(o.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Adds a cosine-distance loss to the training procedure. (deprecated arguments)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.compat.v1.losses.cosine_distance(\n    labels,\n    predictions,\n    axis=None,\n    weights=1.0,\n    scope=None,\n    loss_collection=tf.GraphKeys.LOSSES,\n    reduction=Reduction.SUM_BY_NONZERO_WEIGHTS,\n    dim=None\n)\n")])])]),t("p",[e._v("Note that the function assumes that predictions and labels are already unit-normalized.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("labels")]),e._v(": "),t("code",[e._v("Tensor")]),e._v(" whose shape matches 'predictions'")]),e._v(" "),t("li",[t("code",[e._v("predictions")]),e._v(": An arbitrary matrix.")]),e._v(" "),t("li",[t("code",[e._v("axis")]),e._v(": The dimension along which the cosine distance is computed.")]),e._v(" "),t("li",[t("code",[e._v("weights")]),e._v(": Optional "),t("code",[e._v("Tensor")]),e._v(" whose rank is either 0, or the same rank as "),t("code",[e._v("labels")]),e._v(", and must be broadcastable to "),t("code",[e._v("labels")]),e._v(" (i.e., all dimensions must be either "),t("code",[e._v("1")]),e._v(", or the same as the corresponding "),t("code",[e._v("losses")]),e._v(" dimension).")]),e._v(" "),t("li",[t("code",[e._v("scope")]),e._v(": The "),t("code",[e._v("scope")]),e._v(" for the operations performed in computing the loss.")]),e._v(" "),t("li",[t("code",[e._v("loss_collection")]),e._v(": collection to which this loss will be added.")]),e._v(" "),t("li",[t("code",[e._v("reduction")]),e._v(": Type of "),t("code",[e._v("reduction")]),e._v(" to apply to loss.")]),e._v(" "),t("li",[t("code",[e._v("dim")]),e._v(": The old (deprecated) name for "),t("code",[e._v("axis")]),e._v(".")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("Weighted loss float Tensor. If reduction is NONE, this has the same shape as labels; otherwise, it is scalar.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": If "),t("code",[e._v("predictions")]),e._v(" shape doesn't match "),t("code",[e._v("labels")]),e._v(" shape, or "),t("code",[e._v("axis")]),e._v(", "),t("code",[e._v("labels")]),e._v(", "),t("code",[e._v("predictions")]),e._v(" or "),t("code",[e._v("weights")]),e._v(" is "),t("code",[e._v("None")]),e._v(".")])]),e._v(" "),t("h4",{attrs:{id:"eager-compatibility"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eager-compatibility","aria-hidden":"true"}},[e._v("#")]),e._v(" Eager Compatibility")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/keras/Model",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.keras.Model"),t("OutboundLink")],1),e._v("The loss_collection argument is ignored when executing eagerly. Consider holding on to the return value or collecting losses via a .")])])}),[],!1,null,null,null);s.default=a.exports}}]);