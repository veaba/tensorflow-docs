(window.webpackJsonp=window.webpackJsonp||[]).push([[631],{819:function(e,_,v){"use strict";v.r(_);var o=v(0),c=Object(o.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("Performs beam search decoding on the logits given in input.")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v(" tf.compat.v1.nn.ctc_beam_search_decoder(\n    inputs,\n    sequence_length,\n    beam_width=100,\n    top_paths=1,\n    merge_repeated=True\n)\n")])])]),v("p",[e._v("Note The ctc_greedy_decoder is a special case of the ctc_beam_search_decoder with top_paths=1 and beam_width=1 (but that decoder is faster for this special case).")]),e._v(" "),v("p",[e._v("If merge_repeated is True, merge repeated classes in the output beams. This means that if consecutive entries in a beam are the same, only the first of these is emitted. That is, when the sequence is A B B * B * B (where '*' is the blank label), the return value is:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("A B")]),e._v(" if "),v("code",[e._v("merge_repeated = True")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("A B")]),e._v(" B B if "),v("code",[e._v("merge_repeated = False")]),e._v(".")])]),e._v(" "),v("h4",{attrs:{id:"args"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("inputs")]),e._v(":"),v("code"),e._v("3-D"),v("code",[e._v("``float`` ``Tensor")]),e._v(","),v("code",[e._v("``s``i``z``e``")]),e._v("["),v("code",[e._v("m``a``x``_``t``i``m``e`` ``x`` ``b``a``t``c``h``_``s``i``z``e`` ``x`` ``n``u``m``_``c``l``a``s``s``e``s")]),e._v("]."),v("code"),e._v("T"),v("code",[e._v("h``e`` ``l")]),e._v("og"),v("code",[e._v("i``t``s")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("s``e")]),e._v("q"),v("code",[e._v("u``e``n``c``e``_``l``e``n")]),e._v("g"),v("code",[e._v("t``h")]),e._v(":"),v("code"),e._v("1-D"),v("code",[e._v("``i``n``t")]),e._v("32"),v("code"),e._v("v"),v("code",[e._v("e``c``t")]),e._v("or"),v("code",[e._v("``c")]),e._v("o"),v("code",[e._v("n``t``a``i``n``i``n")]),e._v("g"),v("code",[e._v("``s``e")]),e._v("q"),v("code",[e._v("u``e``n``c``e`` ``l``e``n")]),e._v("g"),v("code",[e._v("t``h``s")]),e._v(","),v("code",[e._v("``h``a")]),e._v("v"),v("code",[e._v("i``n")]),e._v("g"),v("code",[e._v("``s``i``z``e``")]),e._v("["),v("code",[e._v("b``a``t``c``h``_``s``i``z``e")]),e._v("].")]),e._v(" "),v("li",[v("code",[e._v("b``e``a``m``_")]),e._v("w"),v("code",[e._v("i")]),e._v("d"),v("code",[e._v("t``h")]),e._v(":"),v("code"),e._v("A"),v("code",[e._v("n`` ``i``n``t`` ``s``c``a``l``a")]),e._v("r"),v("code"),e._v(">="),v("code"),e._v("0"),v("code"),e._v("("),v("code",[e._v("b``e``a``m`` ``s``e``a")]),e._v("r"),v("code",[e._v("c``h`` ``b``e``a``m``")]),e._v("w"),v("code",[e._v("i")]),e._v("d"),v("code",[e._v("t``h")]),e._v(").")]),e._v(" "),v("li",[v("code",[e._v("t")]),e._v("op"),v("code",[e._v("_")]),e._v("p"),v("code",[e._v("a``t``h``s")]),e._v(":"),v("code"),e._v("A"),v("code",[e._v("n`` ``i``n``t`` ``s``c``a``l``a")]),e._v("r"),v("code"),e._v(">="),v("code"),e._v("0,"),v("code"),e._v("<="),v("code",[e._v("``b``e``a``m``_")]),e._v("w"),v("code",[e._v("i")]),e._v("d"),v("code",[e._v("t``h``")]),e._v("("),v("code",[e._v("c")]),e._v("o"),v("code",[e._v("n``t")]),e._v("ro"),v("code",[e._v("l``s``")]),e._v("o"),v("code",[e._v("u``t")]),e._v("p"),v("code",[e._v("u``t`` ``s``i``z``e")]),e._v(").")]),e._v(" "),v("li",[v("code",[e._v("m``e")]),e._v("rg"),v("code",[e._v("e``_")]),e._v("r"),v("code",[e._v("e")]),e._v("p"),v("code",[e._v("e``a``t``e")]),e._v("d:"),v("code"),e._v("Boo"),v("code",[e._v("l``e``a``n")]),e._v("."),v("code"),e._v("D"),v("code",[e._v("e")]),e._v("f"),v("code",[e._v("a``u``l``t")]),e._v(":"),v("code"),e._v("Tr"),v("code",[e._v("u``e")]),e._v(".")])]),e._v(" "),v("h4",{attrs:{id:"returns"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),v("p",[e._v("A tuple (decoded, log_probabilities) where")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("decoded")]),e._v(": A list of length top_paths, where "),v("code",[e._v("decoded")]),e._v("["),v("code",[e._v("j]")]),e._v(" is a "),v("code",[e._v("SparseTensor")]),e._v(" containing the "),v("code",[e._v("decoded")]),e._v(" outputs:\n"),v("code",[e._v("decoded")]),e._v("["),v("code",[e._v("j]")]),e._v(".indices: Indices matrix (total_"),v("code",[e._v("decoded")]),v("em",[e._v("outputs["),v("code",[e._v("j]")]),e._v(" x "),v("code",[e._v("2")]),e._v(") The rows store: [batch, tim"),v("code",[e._v("e]")]),e._v(".\n"),v("code",[e._v("decoded")]),e._v("["),v("code",[e._v("j]")]),e._v(".values: Values vector, size (total")]),v("code",[e._v("decoded")]),v("em",[e._v("outputs["),v("code",[e._v("j]")]),e._v("). The vector stores the "),v("code",[e._v("decoded")]),e._v(" classes for beam j.\n"),v("code",[e._v("decoded")]),e._v("["),v("code",[e._v("j]")]),e._v(".dense_shape: Shape vector, size ("),v("code",[e._v("2")]),e._v("). The shape values are: [batch_size, max")]),v("code",[e._v("decoded")]),e._v("_length["),v("code",[e._v("j]")]),e._v("].")]),e._v(" "),v("li",[v("code",[e._v("log_probability")]),e._v(": A "),v("code",[e._v("float")]),e._v(" matrix ("),v("code",[e._v("batch_size x top_paths")]),e._v(") containing sequence log-probabilities.")])])])}),[],!1,null,null,null);_.default=c.exports}}]);