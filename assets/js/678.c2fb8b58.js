(window.webpackJsonp=window.webpackJsonp||[]).push([[678],{866:function(e,t,n){"use strict";n.r(t);var a=n(0),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Returns the frequency-weighted mean and variance of x.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.compat.v1.nn.weighted_moments(\n    x,\n    axes,\n    frequency_weights,\n    name=None,\n    keep_dims=None,\n    keepdims=None\n)\n")])])]),n("ul",[n("li",[n("code",[e._v("x")]),e._v(": A tensor.")]),e._v(" "),n("li",[n("code",[e._v("axes")]),e._v(": 1-d tensor of int32 values; these are the "),n("code",[e._v("axes")]),e._v(" along which to compute mean and variance.")]),e._v(" "),n("li",[n("code",[e._v("frequency_weights")]),e._v(": A tensor of positive weights which can be broadcast with "),n("code",[e._v("x")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("name")]),e._v(": Name used to scope the operation.")]),e._v(" "),n("li",[n("code",[e._v("keep_dims")]),e._v(": Produce moments with the same dimensionality as the input.")]),e._v(" "),n("li",[n("code",[e._v("keepdims")]),e._v(": Alias of "),n("code",[e._v("keep_dims")]),e._v(".")])]),e._v(" "),n("h4",{attrs:{id:"returns"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),n("p",[e._v("Two tensors: weighted_mean and weighted_variance.")])])}),[],!1,null,null,null);t.default=s.exports}}]);