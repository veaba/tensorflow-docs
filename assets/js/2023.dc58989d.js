(window.webpackJsonp=window.webpackJsonp||[]).push([[2023],{2214:function(e,o,_){"use strict";_.r(o);var v=_(0),t=Object(v.a)({},(function(){var e=this,o=e.$createElement,_=e._self._c||o;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("p",[e._v("Defined in generated file: python/ops/gen_linalg_ops.py")]),e._v(" "),_("p",[e._v("Computes the QR decompositions of one or more matrices.")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("tf.compat.v1.linalg.qr")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v1.qr")])]),e._v(" "),_("li",[_("code",[e._v("tf.compat.v2.linalg.qr")])])]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" tf.linalg.qr(\n    input,\n    full_matrices=False,\n    name=None\n)\n")])])]),_("p",[e._v("Computes the QR decomposition of each inner matrix in tensor such that tensor[..., :, :] = q[..., :, :] * r[..., :,:])")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" # a is a tensor.\n# q is a tensor of orthonormal matrices.\n# r is a tensor of upper triangular matrices.\nq, r = qr(a)\nq_full, r_full = qr(a, full_matrices=True)\n")])])]),_("h4",{attrs:{id:"args"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("input")]),e._v(":"),_("code"),e._v("A"),_("code",[e._v("``Tensor``.`` ``M")]),e._v("ust"),_("code"),e._v("be"),_("code"),e._v("one"),_("code"),e._v("of"),_("code"),e._v("the"),_("code"),e._v("following"),_("code"),e._v("types:"),_("code",[e._v("``float64``,`` ``float32``,`` ``half``,`` ``complex64``,`` ``complex128``.``")]),e._v("A"),_("code"),e._v("tensor"),_("code"),e._v("of"),_("code"),e._v("shape"),_("code"),e._v("["),_("code",[e._v(".``.``.``,`` ``M``,`` ``N")]),e._v("]"),_("code"),e._v("whose"),_("code"),e._v("inner-most"),_("code"),e._v("2"),_("code"),e._v("dimensions"),_("code"),e._v("form"),_("code"),e._v("matrices"),_("code"),e._v("of"),_("code"),e._v("size"),_("code"),e._v("["),_("code",[e._v("M``,`` ``N")]),e._v("]"),_("code",[e._v(".``")]),e._v("Let"),_("code",[e._v("``P``")]),e._v("be"),_("code"),e._v("the"),_("code"),e._v("minimum"),_("code"),e._v("of"),_("code",[e._v("``M``")]),e._v("and"),_("code",[e._v("``N``.")])]),e._v(" "),_("li",[_("code",[e._v("full_matrices")]),e._v(":"),_("code"),e._v("An"),_("code"),e._v("optional"),_("code",[e._v("``bool``.``")]),e._v("Defaults"),_("code"),e._v("to"),_("code",[e._v("``False``.``")]),e._v("If"),_("code"),e._v("t"),_("code",[e._v("r")]),e._v("ue"),_("code",[e._v(",``")]),e._v("compute"),_("code"),e._v("full-sized"),_("code",[e._v("``q``")]),e._v("and"),_("code",[e._v("``r``.``")]),e._v("If"),_("code"),e._v("false"),_("code"),e._v("(the"),_("code"),e._v("default)"),_("code",[e._v(",``")]),e._v("compute"),_("code"),e._v("only"),_("code"),e._v("the"),_("code"),e._v("leading"),_("code",[e._v("``P``")]),e._v("columns"),_("code"),e._v("of"),_("code",[e._v("``q``.")])]),e._v(" "),_("li",[_("code",[e._v("name")]),e._v(":"),_("code"),e._v("A"),_("code",[e._v("``name``")]),e._v("fo"),_("code",[e._v("r``")]),e._v("the"),_("code"),e._v("ope"),_("code",[e._v("r")]),e._v("ation"),_("code"),e._v("(optional)"),_("code",[e._v(".")])])]),e._v(" "),_("h4",{attrs:{id:"returns"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),_("p",[e._v("A tuple of Tensor objects (q, r).")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("q")]),e._v(": A "),_("code",[e._v("Tensor")]),e._v(". Has the same type as "),_("code",[e._v("input")]),e._v(".")]),e._v(" "),_("li",[_("code",[e._v("r")]),e._v(": A "),_("code",[e._v("Tensor")]),e._v(". Has the same type as "),_("code",[e._v("input")]),e._v(".")])])])}),[],!1,null,null,null);o.default=t.exports}}]);