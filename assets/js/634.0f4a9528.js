(window.webpackJsonp=window.webpackJsonp||[]).push([[634],{822:function(e,t,o){"use strict";o.r(t);var n=o(0),d=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Defined in generated file: python/ops/gen_nn_ops.py")]),e._v(" "),o("p",[e._v("Computes a 2-D depthwise convolution given 4-D input and filter tensors.")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" tf.compat.v1.nn.depthwise_conv2d_native(\n    input,\n    filter,\n    strides,\n    padding,\n    data_format='NHWC',\n    dilations=[1, 1, 1, 1],\n    name=None\n)\n")])])]),o("p",[e._v("Given an input tensor of shape [batch, in_height, in_width, in_channels] and a filter / kernel tensor of shape [filter_height, filter_width, in_channels, channel_multiplier], containing in_channels convolutional filters of depth 1, depthwise_conv2d applies a different filter to each input channel (expanding from 1 channel to channel_multiplier channels for each), then concatenates the results together. Thus, the output has in_channels * channel_multiplier channels.")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" for k in 0..in_channels-1\n  for q in 0..channel_multiplier-1\n    output[b, i, j, k * channel_multiplier + q] =\n      sum_{di, dj} input[b, strides[1] * i + di, strides[2] * j + dj, k] *\n                        filter[di, dj, k, q]\n")])])]),o("p",[e._v("Must have strides[0] = strides[3] = 1. For the most common case of the same horizontal and vertices strides, strides = [1, stride, stride, 1].")]),e._v(" "),o("h4",{attrs:{id:"args"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("input")]),e._v(": A "),o("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),o("code",[e._v("half")]),e._v(", "),o("code",[e._v("bfloat16")]),e._v(", "),o("code",[e._v("float32")]),e._v(", "),o("code",[e._v("float64")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("filter")]),e._v(": A "),o("code",[e._v("Tensor")]),e._v(". Must have the same type as "),o("code",[e._v("input")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("strides")]),e._v(": A list of "),o("code",[e._v("ints")]),e._v(". 1-D of length 4. The stride of the sliding window for each dimension of "),o("code",[e._v("input")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("padding")]),e._v(": A "),o("code",[e._v("string")]),e._v(" from: "),o("code",[e._v('"SAME", "VALID"')]),e._v(". The type of "),o("code",[e._v("padding")]),e._v(" algorithm to use.")]),e._v(" "),o("li",[o("code",[e._v("data_format")]),e._v(": An optional "),o("code",[e._v("string")]),e._v(" from: "),o("code",[e._v('"NHWC", "NCHW"')]),e._v(". Defaults to "),o("code",[e._v('"NHWC"')]),e._v(". Specify the data format of the "),o("code",[e._v("input")]),e._v(" and output data. With the default format "),o("code",[e._v('"NHWC"')]),e._v(', the data is stored in the order of: [batch, height, width, channels]. Alternatively, the format could be "NCHW", the data storage order of: [batch, channels, height, width].')]),e._v(" "),o("li",[o("code",[e._v("dilations")]),e._v(":"),o("code"),e._v("An"),o("code"),e._v("optional"),o("code"),e._v("list"),o("code"),e._v("of"),o("code",[e._v("``ints")]),e._v("."),o("code"),e._v("Defaults"),o("code"),e._v("to"),o("code"),e._v("["),o("code",[e._v("1``,`` ``1``,`` ``1``,`` ``1")]),e._v("]."),o("code",[e._v("``1")]),e._v("-D"),o("code"),e._v("tensor"),o("code"),e._v("of"),o("code"),e._v("length"),o("code"),e._v("4."),o("code"),e._v("The"),o("code"),e._v("dilation"),o("code"),e._v("factor"),o("code"),e._v("for"),o("code"),e._v("each"),o("code"),e._v("dimension"),o("code"),e._v("of"),o("code",[e._v("``input")]),e._v("."),o("code"),e._v("If"),o("code"),e._v("set"),o("code"),e._v("to"),o("code"),e._v("k"),o("code"),e._v(">"),o("code",[e._v("``1``,``")]),e._v("there"),o("code"),e._v("will"),o("code"),e._v("be"),o("code"),e._v("k-"),o("code",[e._v("1``")]),e._v("skipped"),o("code"),e._v("cells"),o("code"),e._v("between"),o("code"),e._v("each"),o("code",[e._v("``filter``")]),e._v("element"),o("code"),e._v("on"),o("code"),e._v("that"),o("code"),e._v("dimension."),o("code"),e._v("The"),o("code"),e._v("dimension"),o("code"),e._v("order"),o("code"),e._v("is"),o("code"),e._v("determined"),o("code"),e._v("by"),o("code"),e._v("the"),o("code"),e._v("value"),o("code"),e._v("of"),o("code",[e._v("``data_format``,``")]),e._v("see"),o("code"),e._v("above"),o("code"),e._v("for"),o("code"),e._v("details."),o("code"),e._v("Dilations"),o("code"),e._v("in"),o("code"),e._v("the"),o("code"),e._v("batch"),o("code"),e._v("and"),o("code"),e._v("depth"),o("code"),e._v("dimensions"),o("code"),e._v("must"),o("code"),e._v("be"),o("code",[e._v("``1")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("name")]),e._v(":"),o("code"),e._v("A"),o("code",[e._v("``name``")]),e._v("for"),o("code"),e._v("the"),o("code"),e._v("operation"),o("code"),e._v("(optional).")])]),e._v(" "),o("h4",{attrs:{id:"returns"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),o("p",[e._v("A Tensor. Has the same type as input.")])])}),[],!1,null,null,null);t.default=d.exports}}]);