(window.webpackJsonp=window.webpackJsonp||[]).push([[517],{705:function(e,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"class-ophintargumenttracker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-ophintargumenttracker","aria-hidden":"true"}},[e._v("#")]),e._v(" Class OpHintArgumentTracker")]),e._v(" "),a("p",[e._v('Conceptually tracks indices of arguments of "OpHint functions".')]),e._v(" "),a("p",[e._v("The inputs and arguments of these functions both use an instance of the class so they can have independent numbering.")]),e._v(" "),a("h2",{attrs:{id:"init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("init")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/lite/python/op_hint.py#L165-L198",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __init__(\n    function_name,\n    unique_function_id,\n    node_name_prefix,\n    attr_name,\n    level=1,\n    children_inputs_mappings=None\n)\n")])])]),a("p",[e._v("Initialize ophint argument.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("function_name")]),e._v(": Name of the function that this tracks arguments for.")]),e._v(" "),a("li",[a("code",[e._v("unique_function_id")]),e._v(": UUID of function that this tracks arguments for.")]),e._v(" "),a("li",[a("code",[e._v("node_name_prefix")]),e._v(": How identities that are created are named.")]),e._v(" "),a("li",[a("code",[e._v("attr_name")]),e._v(": Name of attribute to use to store the index for this hint. i.e. FUNCTION_INPUT_INDEX or FUNCTION_OUTPUT_INDEX")]),e._v(" "),a("li",[a("code",[e._v("level")]),e._v(": Hierarchical "),a("code",[e._v("level")]),e._v(" of the Ophint node, a number.")]),e._v(" "),a("li",[a("code",[e._v("children_inputs_mappings")]),e._v(": Inputs/Outputs mapping for children hints.")])]),e._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),a("h3",{attrs:{id:"add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add","aria-hidden":"true"}},[e._v("#")]),e._v(" add")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/lite/python/op_hint.py#L225-L306",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" add(\n    arg,\n    tag=None,\n    name=None,\n    aggregate=None,\n    index_override=None\n)\n")])])]),a("p",[e._v("Return a wrapped tensor of an input tensor as an argument.")]),e._v(" "),a("h4",{attrs:{id:"args-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("arg")]),e._v(": A TensorFlow tensor that should be considered an "),a("code",[e._v("arg")]),e._v("ument.")]),e._v(" "),a("li",[a("code",[e._v("tag")]),e._v(": String "),a("code",[e._v("tag")]),e._v(" to identify "),a("code",[e._v("arg")]),e._v("uments that should be packed.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": Name of "),a("code",[e._v("arg")]),e._v("ument. This is included in the Identity hint op "),a("code",[e._v("name")]),e._v("s.")]),e._v(" "),a("li",[a("code",[e._v("aggregate")]),e._v(": Strategy to "),a("code",[e._v("aggregate")]),e._v(". Acceptable values are OpHint.AGGREGATE_FIRST, OpHint.AGGREGATE_LAST, and OpHint.AGGREGATE_STACK. Note, "),a("code",[e._v("aggregate")]),e._v(" is only valid if "),a("code",[e._v("tag")]),e._v(" is specified.")]),e._v(" "),a("li",[a("code",[e._v("index_override")]),e._v(": Specify what input/output index should this be in the final stub. i.e. add("),a("code",[e._v("arg")]),e._v("0, index=1); add("),a("code",[e._v("arg")]),e._v("1, index=0) will make the final stub be as stub_func(inputs["),a("code",[e._v("arg")]),e._v("1, "),a("code",[e._v("arg")]),e._v("0], outputs=[]) rather than the default call order based ordering.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A tensor representing the wrapped argument.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": When indices are not consistent.")])])])}),[],!1,null,null,null);t.default=r.exports}}]);