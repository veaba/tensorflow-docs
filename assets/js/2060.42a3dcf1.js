(window.webpackJsonp=window.webpackJsonp||[]).push([[2060],{2248:function(e,t,a){"use strict";a.r(t);var r=a(0),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Returns the element-wise argument of a complex (or real) tensor.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.angle")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v1.math.angle")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.math.angle")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.math.angle(\n    input,\n    name=None\n)\n")])])]),a("p",[e._v("Given a tensor input, this operation returns a tensor of type float that is the argument of each element in input considered as a complex number.")]),e._v(" "),a("p",[e._v("The elements in input are considered to be complex numbers of the form a+bj, where a is the real part and b is the imaginary part. If input is real then b is zero by definition.")]),e._v(" "),a("p",[e._v("The argument returned by this function is of the form\n. If input is real, a tensor of all zeros is returned.")]),e._v(" "),a("h4",{attrs:{id:"for-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" input = tf.constant([-2.25 + 4.75j, 3.25 + 5.75j], dtype=tf.complex64)\ntf.math.angle(input).numpy()\n# ==> array([2.0131705, 1.056345 ], dtype=float32)\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("input")]),e._v(": A "),a("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),a("code",[e._v("float")]),e._v(", "),a("code",[e._v("double")]),e._v(", "),a("code",[e._v("complex64")]),e._v(", "),a("code",[e._v("complex128")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A Tensor of type float32 or float64.")])])}),[],!1,null,null,null);t.default=n.exports}}]);