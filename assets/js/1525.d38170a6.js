(window.webpackJsonp=window.webpackJsonp||[]).push([[1525],{1716:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Categorical crossentropy between an output tensor and a target tensor.")]),t._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[t._v("#")]),t._v(" Aliases:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("tf.compat.v1.keras.backend.categorical_crossentropy")])]),t._v(" "),a("li",[a("code",[t._v("tf.compat.v2.keras.backend.categorical_crossentropy")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" tf.keras.backend.categorical_crossentropy(\n    target,\n    output,\n    from_logits=False,\n    axis=-1\n)\n")])])]),a("h4",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[t._v("#")]),t._v(" Arguments:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("target")]),t._v(": A tensor of the same shape as "),a("code",[t._v("output")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("output")]),t._v(": A tensor resulting from a softmax (unless "),a("code",[t._v("from_logits")]),t._v(" is True, in which case "),a("code",[t._v("output")]),t._v(" is expected to be the logits).")]),t._v(" "),a("li",[a("code",[t._v("from_logits")]),t._v(": Boolean, whether "),a("code",[t._v("output")]),t._v(" is the result of a softmax, or is a tensor of logits.")]),t._v(" "),a("li",[a("code",[t._v("axis")]),t._v(": Int specifying the channels "),a("code",[t._v("axis")]),t._v(". "),a("code",[t._v("axis")]),t._v("=-1 "),a("code",[t._v("corresponds to data format")]),t._v(" "),a("code",[t._v("channels_last', and``axis")]),t._v("=1"),a("code",[t._v("corresponds to data format")]),t._v("channels_first`.")])]),t._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns:")]),t._v(" "),a("p",[t._v("Output tensor.")]),t._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[t._v("#")]),t._v(" Raises:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ValueError")]),t._v(": if "),a("code",[t._v("axis")]),t._v(" is neither -1 nor one of the axes of "),a("code",[t._v("output")]),t._v(".")])]),t._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[t._v("#")]),t._v(" Example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("     import tensorflow as tf\n    from tensorflow.keras import backend as K\n    a = tf.constant([1., 0., 0., 0., 1., 0., 0., 0., 1.], shape=[3,3])\n    print(\"a: \", a)\n    b = tf.constant([.9, .05, .05, .5, .89, .6, .05, .01, .94], shape=[3,3])\n    print(\"b: \", b)\n    loss = K.categorical_crossentropy(a, b)\n    print('Loss: ', loss) #Loss: tf.Tensor([0.10536055 0.8046684  0.06187541], shape=(3,), dtype=float32)\n    loss = K.categorical_crossentropy(a, a)\n    print('Loss: ', loss) #Loss:  tf.Tensor([1.1920929e-07 1.1920929e-07 1.1920929e-07], shape=(3,), dtype=float32)\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);