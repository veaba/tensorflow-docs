(window.webpackJsonp=window.webpackJsonp||[]).push([[2229],{2417:function(t,e,o){"use strict";o.r(e);var a=o(0),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("p",[t._v("Performs the max pooling on the input.")]),t._v(" "),o("h3",{attrs:{id:"aliases"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[t._v("#")]),t._v(" Aliases:")]),t._v(" "),o("ul",[o("li",[o("code",[t._v("tf.compat.v1.nn.max_pool3d")])]),t._v(" "),o("li",[o("code",[t._v("tf.compat.v2.nn.max_pool3d")])])]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v(" tf.nn.max_pool3d(\n    input,\n    ksize,\n    strides,\n    padding,\n    data_format='NDHWC',\n    name=None\n)\n")])])]),o("h4",{attrs:{id:"args"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[t._v("#")]),t._v(" Args:")]),t._v(" "),o("ul",[o("li",[o("code",[t._v("input")]),t._v(": A 5-D "),o("code",[t._v("Tensor")]),t._v(" of the format specified by "),o("code",[t._v("data_format")]),t._v(".")]),t._v(" "),o("li",[o("code",[t._v("ksize")]),t._v(": An int or list of "),o("code",[t._v("ints")]),t._v(" that has length "),o("code",[t._v("1")]),t._v(", "),o("code",[t._v("3")]),t._v(" or "),o("code",[t._v("5")]),t._v(". The size of the window for each dimension of the "),o("code",[t._v("input")]),t._v(" tensor.")]),t._v(" "),o("li",[o("code",[t._v("strides")]),t._v(": An int or list of "),o("code",[t._v("ints")]),t._v(" that has length "),o("code",[t._v("1")]),t._v(", "),o("code",[t._v("3")]),t._v(" or "),o("code",[t._v("5")]),t._v(". The stride of the sliding window for each dimension of the "),o("code",[t._v("input")]),t._v(" tensor.")]),t._v(" "),o("li",[o("code",[t._v("padding")]),t._v(": A string, either "),o("code",[t._v("'VALID'")]),t._v(" or "),o("code",[t._v("'SAME'")]),t._v(". The "),o("code",[t._v("padding")]),t._v(' algorithm. See the "returns" section of '),o("code",[t._v("tf.nn.convolution")]),t._v(" for details.")]),t._v(" "),o("li",[o("code",[t._v("data_format")]),t._v(': An optional string from: "NDHWC", "NCDHW". Defaults to "NDHWC". The data format of the '),o("code",[t._v("input")]),t._v(' and output data. With the default format "NDHWC", the data is stored in the order of: [batch, in_depth, in_height, in_width, in_channels]. Alternatively, the format could be "NCDHW", the data storage order is: [batch, in_channels, in_depth, in_height, in_width].')]),t._v(" "),o("li",[o("code",[t._v("name")]),t._v(": A "),o("code",[t._v("name")]),t._v(" for the operation (optional).")])]),t._v(" "),o("h4",{attrs:{id:"returns"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns:")]),t._v(" "),o("p",[t._v("A Tensor of format specified by data_format. The max pooled output tensor.")])])}),[],!1,null,null,null);e.default=n.exports}}]);