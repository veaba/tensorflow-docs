(window.webpackJsonp=window.webpackJsonp||[]).push([[701],{889:function(o,e,t){"use strict";t.r(e);var r=t(0),n=Object(r.a)({},(function(){var o=this,e=o.$createElement,t=o._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[t("p",[o._v("Profile model.")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v(" tf.compat.v1.profiler.profile(\n    graph=None,\n    run_meta=None,\n    op_log=None,\n    cmd='scope',\n    options=_DEFAULT_PROFILE_OPTIONS\n)\n")])])]),t("p",[o._v("Tutorials and examples can be found in: https://github.com/tensorflow/tensorflow/tree/master/tensorflow/core/profiler/README.md")]),o._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[o._v("#")]),o._v(" Args:")]),o._v(" "),t("ul",[t("li",[t("code",[o._v("graph")]),o._v(": tf.Graph. If None and eager execution is not enabled, use default "),t("code",[o._v("graph")]),o._v(".")]),o._v(" "),t("li",[t("code",[o._v("run_meta")]),o._v(": optional tensorflow.RunMetadata proto. It is necessary to to support run time information profiling, such as time and memory.")]),o._v(" "),t("li",[t("code",[o._v("op_log")]),o._v(': tensorflow.tfprof.OpLogProto proto. User can assign "types" to '),t("code",[o._v("graph")]),o._v(" nodes with "),t("code",[o._v("op_log")]),o._v(". \"types\" allow user to flexibly group and account profiles using options['accounted_type_regexes'].")]),o._v(" "),t("li",[t("code",[o._v("cmd")]),o._v(": string. Either 'op', 'scope', '"),t("code",[o._v("graph")]),o._v("' or 'code'. 'op' view organizes profile using operation type. (e.g. MatMul) 'scope' view organizes profile using "),t("code",[o._v("graph")]),o._v(" node name scope. '"),t("code",[o._v("graph")]),o._v("' view organizes profile using "),t("code",[o._v("graph")]),o._v(" node inputs/outputs. 'code' view organizes profile using Python call stack.")]),o._v(" "),t("li",[t("code",[o._v("options")]),o._v(": A dict of "),t("code",[o._v("options")]),o._v(". See core/profiler/g3doc/"),t("code",[o._v("options")]),o._v(".md.")])]),o._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[o._v("#")]),o._v(" Returns:")]),o._v(" "),t("p",[o._v("If cmd is 'scope' or 'graph', returns GraphNodeProto proto. If cmd is 'op' or 'code', returns MultiGraphNodeProto proto. Side effect: stdout/file/timeline.json depending on options['output']")])])}),[],!1,null,null,null);e.default=n.exports}}]);