(window.webpackJsonp=window.webpackJsonp||[]).push([[1326],{1515:function(e,t,o){"use strict";o.r(t);var r=o(0),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Imports the graph from graph_def into the current default Graph. (deprecated arguments)")]),e._v(" "),o("h3",{attrs:{id:"aliases"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("tf.compat.v1.graph_util.import_graph_def")])]),e._v(" "),o("li",[o("code",[e._v("tf.compat.v1.import_graph_def")])]),e._v(" "),o("li",[o("code",[e._v("tf.compat.v2.graph_util.import_graph_def")])]),e._v(" "),o("li",[o("code",[e._v("tf.compat.v2.import_graph_def")])]),e._v(" "),o("li",[o("code",[e._v("tf.import_graph_def")])])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" tf.graph_util.import_graph_def(\n    graph_def,\n    input_map=None,\n    return_elements=None,\n    name=None,\n    op_dict=None,\n    producer_op_list=None\n)\n")])])]),o("h3",{attrs:{id:"used-in-the-guide"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("M")]),e._v("i"),o("code",[e._v("g")]),e._v("r"),o("code",[e._v("a")]),e._v("t"),o("code",[e._v("e")]),e._v(" "),o("code",[e._v("y")]),e._v("o"),o("code",[e._v("u")]),e._v("r"),o("code"),e._v("T"),o("code",[e._v("e")]),e._v("n"),o("code",[e._v("s")]),e._v("o"),o("code",[e._v("r")]),e._v("F"),o("code",[e._v("l")]),e._v("o"),o("code",[e._v("w")]),e._v(" "),o("code",[e._v("1")]),e._v(" "),o("code",[e._v("c")]),e._v("o"),o("code",[e._v("d")]),e._v("e"),o("code"),e._v("t"),o("code",[e._v("o")]),e._v(" "),o("code",[e._v("T")]),e._v("e"),o("code",[e._v("n")]),e._v("s"),o("code",[e._v("o")]),e._v("r"),o("code",[e._v("F")]),e._v("l"),o("code",[e._v("o")]),e._v("w"),o("code"),e._v("2``\n"),o("a",{attrs:{href:"https://www.tensorflow.org/code/tensorflow/core/framework/graph.proto",target:"_blank",rel:"noopener noreferrer"}},[e._v("GraphDef"),o("OutboundLink")],1),e._v("This function provides a way to import a serialized TensorFlow  protocol buffer, and extract individual objects in the  as tf.Tensor and tf.Operation objects. Once extracted, these objects are placed into the current default Graph. See tf.Graph.as_graph_def for a way to create a  proto.")])]),e._v(" "),o("h4",{attrs:{id:"args"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("graph_def")]),e._v(": A "),o("code",[e._v("GraphDef")]),e._v(" proto containing operations to be imported into the default graph.")]),e._v(" "),o("li",[o("code",[e._v("input_map")]),e._v(": A dictionary mapping input names (as strings) in "),o("code",[e._v("graph_def")]),e._v(" to "),o("code",[e._v("Tensor")]),e._v(" objects. The values of the named input tensors in the imported graph will be re-mapped to the respective "),o("code",[e._v("Tensor")]),e._v(" values.")]),e._v(" "),o("li",[o("code",[e._v("return_elements")]),e._v(": A list of strings containing operation names in "),o("code",[e._v("graph_def")]),e._v(" that will be returned as "),o("code",[e._v("Operation")]),e._v(" objects; and/or tensor names in "),o("code",[e._v("graph_def")]),e._v(" that will be returned as "),o("code",[e._v("Tensor")]),e._v(" objects.")]),e._v(" "),o("li",[o("code",[e._v("name")]),e._v(": (Optional.) A prefix that will be prepended to the "),o("code",[e._v("name")]),e._v("s in "),o("code",[e._v("graph_def")]),e._v(". Note that this does not apply to imported function "),o("code",[e._v("name")]),e._v("s. Defaults to "),o("code",[e._v('"import"')]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("op_dict")]),e._v(": (Optional.) Deprecated, do not use.")]),e._v(" "),o("li",[o("code",[e._v("producer_op_list")]),e._v(": (Optional.) An "),o("code",[e._v("OpList")]),e._v(" proto with the (possibly stripped) list of "),o("code",[e._v("OpDef")]),e._v("s used by the producer of the graph. If provided, unrecognized attrs for ops in "),o("code",[e._v("graph_def")]),e._v(" that have their default value according to "),o("code",[e._v("producer_op_list")]),e._v(" will be removed. This will allow some more "),o("code",[e._v("GraphDef")]),e._v("s produced by later binaries to be accepted by earlier binaries.")])]),e._v(" "),o("h4",{attrs:{id:"returns"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),o("p",[e._v("A list of Operation and/or Tensor objects from the imported graph, corresponding to the names in return_elements, and None if returns_elements is None.")]),e._v(" "),o("h4",{attrs:{id:"raises"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("TypeError")]),e._v(": If "),o("code",[e._v("graph_def")]),e._v(" is not a "),o("code",[e._v("GraphDef")]),e._v(" proto, "),o("code",[e._v("input_map")]),e._v(" is not a dictionary mapping strings to "),o("code",[e._v("Tensor")]),e._v(" objects, or "),o("code",[e._v("return_elements")]),e._v(" is not a list of strings.")]),e._v(" "),o("li",[o("code",[e._v("ValueError")]),e._v(": If "),o("code",[e._v("input_map")]),e._v(", or "),o("code",[e._v("return_elements")]),e._v(" contains names that do not appear in "),o("code",[e._v("graph_def")]),e._v(", or "),o("code",[e._v("graph_def")]),e._v(" is not well-formed (e.g. it refers to an unknown tensor).")])])])}),[],!1,null,null,null);t.default=a.exports}}]);