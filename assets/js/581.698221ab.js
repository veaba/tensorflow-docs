(window.webpackJsonp=window.webpackJsonp||[]).push([[581],{769:function(e,a,t){"use strict";t.r(a);var s=t(0),o=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Computes average precision@k of predictions with respect to sparse labels.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.compat.v1.metrics.average_precision_at_k(\n    labels,\n    predictions,\n    k,\n    weights=None,\n    metrics_collections=None,\n    updates_collections=None,\n    name=None\n)\n")])])]),t("p",[e._v("average_precision_at_k creates two local variables, average_precision_at_"),t("k",[e._v("/total and average_precision_at_"),t("k",[e._v("/max, that are used to compute the frequency. This frequency is ultimately returned as average_precision_at_"),t("k",[e._v(": an idempotent operation that simply divides average_precision_at_"),t("k",[e._v("/total by average_precision_at_"),t("k",[e._v("/max.")])],1)],1)],1)],1)],1),e._v(" "),t("p",[e._v("For estimation of the metric over a stream of data, the function creates an update_op operation that updates these variables and returns the precision_at_"),t("k",[e._v(". Internally, a top_k operation computes a Tensor indicating the top k predictions. Set operations applied to top_k and labels calculate the true positives and false positives weighted by weights. Then update_op increments true_positive_at_"),t("k",[e._v(" and false_positive_at_"),t("k",[e._v(" using these values.")])],1)],1)],1),e._v(" "),t("p",[e._v("If weights is None, weights default to 1. Use weights of 0 to mask values.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("labels")]),e._v(": "),t("code",[e._v("int64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" or "),t("code",[e._v("SparseTensor")]),e._v(" with shape [D1, ... DN, num_"),t("code",[e._v("labels")]),e._v("] or [D1, ... DN], where the latter implies num_"),t("code",[e._v("labels")]),e._v("=1. N >= 1 and num_"),t("code",[e._v("labels")]),e._v(" is the number of target classes for the associated prediction. Commonly, N=1 and "),t("code",[e._v("labels")]),e._v(" has shape [batch_size, num_"),t("code",[e._v("labels")]),e._v("]. [D1, ... DN] must match "),t("code",[e._v("predictions")]),e._v(". Values should be in range [0, num_classes), where num_classes is the last dimension of "),t("code",[e._v("predictions")]),e._v(". Values outside this range are ignored.")]),e._v(" "),t("li",[t("code",[e._v("predictions")]),e._v(": Float "),t("code",[e._v("Tensor")]),e._v(" with shape [D1, ... DN, num_classes] where N >= 1. Commonly, N=1 and "),t("code",[e._v("predictions")]),e._v(" has shape [batch size, num_classes]. The final dimension contains the logit values for each class. [D1, ... DN] must match "),t("code",[e._v("labels")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("k")]),e._v(": Integer"),t("code",[e._v(",")]),e._v(" "),t("code",[e._v("k")]),e._v(" for @"),t("code",[e._v("k")]),e._v(" metric. This will calculate an average precision for range ["),t("code",[e._v("1``,``k")]),e._v("]"),t("code",[e._v(",")]),e._v(" as documented above.")]),e._v(" "),t("li",[t("code",[e._v("weights")]),e._v(": "),t("code",[e._v("Tensor")]),e._v(" whose ran"),t("code",[e._v("k")]),e._v(" is either 0"),t("code",[e._v(",")]),e._v(" or n-"),t("code",[e._v("1``,")]),e._v(" where n is the ran"),t("code",[e._v("k")]),e._v(" of "),t("code",[e._v("labels")]),e._v(". If the latter"),t("code",[e._v(",")]),e._v(" it must be broadcastable to "),t("code",[e._v("labels")]),e._v(" (i.e."),t("code",[e._v(",")]),e._v(" all dimensions must be either "),t("code",[e._v("1``,")]),e._v(" or the same as the corresponding "),t("code",[e._v("labels")]),e._v(" dimension).")]),e._v(" "),t("li",[t("code",[e._v("metrics_collections")]),e._v(": An optional list of collections that values should be added to.")]),e._v(" "),t("li",[t("code",[e._v("updates_collections")]),e._v(": An optional list of collections that updates should be added to.")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": Name of new update operation"),t("code",[e._v(",")]),e._v(" and "),t("code",[e._v("name")]),e._v("space for other dependent ops.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("mean_average_precision")]),e._v(": Scalar "),t("code",[e._v("float64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" with the mean average precision values.")]),e._v(" "),t("li",[t("code",[e._v("update")]),e._v(": "),t("code",[e._v("Operation")]),e._v(" that increments variables appropriately, and whose value matches "),t("code",[e._v("metric")]),e._v(".")])]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": if k is invalid.")]),e._v(" "),t("li",[t("code",[e._v("RuntimeError")]),e._v(": If eager execution is enabled.")])])])}),[],!1,null,null,null);a.default=o.exports}}]);