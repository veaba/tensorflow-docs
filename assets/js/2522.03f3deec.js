(window.webpackJsonp=window.webpackJsonp||[]).push([[2522],{2713:function(e,t,s){"use strict";s.r(t);var a=s(0),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Updates the shape of a tensor and checks at runtime that the shape holds.")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("tf.compat.v1.ensure_shape")])]),e._v(" "),s("li",[s("code",[e._v("tf.compat.v2.ensure_shape")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.ensure_shape(\n    x,\n    shape,\n    name=None\n)\n")])])]),s("h4",{attrs:{id:"for-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" x = tf.compat.v1.placeholder(tf.int32)\nprint(x.shape)\n==> TensorShape(None)\ny = x * 2\nprint(y.shape)\n==> TensorShape(None)\n\ny = tf.ensure_shape(y, (None, 3, 3))\nprint(y.shape)\n==> TensorShape([Dimension(None), Dimension(3), Dimension(3)])\n\nwith tf.compat.v1.Session() as sess:\n  # Raises tf.errors.InvalidArgumentError, because the shape (3,) is not\n  # compatible with the shape (None, 3, 3)\n  sess.run(y, feed_dict={x: [1, 2, 3]})\n")])])]),s("p",[s("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/Tensor#set_shape",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tensor.set_shape"),s("OutboundLink")],1),e._v("NOTE: This differs from  in that it sets the static shape of the resulting tensor and enforces it at runtime, raising an error if the tensor's runtime shape is incompatible with the specified shape.  sets the static shape of the tensor without enforcing it at runtime, which may result in inconsistencies between the statically-known shape of tensors and the runtime value of tensors.")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("x")]),e._v(": A "),s("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("shape")]),e._v(": A "),s("code",[e._v("Tensor")]),e._v("Shape representing the "),s("code",[e._v("shape")]),e._v(" of this tensor, a "),s("code",[e._v("Tensor")]),e._v("ShapeProto, a list, a tuple, or None.")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(": A "),s("code",[e._v("name")]),e._v(' for this operation (optional). Defaults to "EnsureShape".')])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/errors/InvalidArgumentError",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.errors.InvalidArgumentError"),s("OutboundLink")],1),e._v("A Tensor. Has the same type and contents as x. At runtime, raises a  if shape is incompatible with the shape of x.")])])}),[],!1,null,null,null);t.default=n.exports}}]);