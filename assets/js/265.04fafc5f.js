(window.webpackJsonp=window.webpackJsonp||[]).push([[265],{452:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"class-tpuestimator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-tpuestimator","aria-hidden":"true"}},[e._v("#")]),e._v(" Class TPUEstimator")]),e._v(" "),a("p",[e._v("Estimator with TPU support.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/estimator/Estimator",target:"_blank",rel:"noopener noreferrer"}},[e._v("Estimator"),a("OutboundLink")],1),e._v("Inherits From:")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.estimator.Estimator"),a("OutboundLink")],1),e._v("TPUEstimator also supports training on CPU and GPU. You don't need to define a separate .")]),e._v(" "),a("p",[e._v("TPUEstimator handles many of the details of running on TPU devices, such as replicating inputs and models for each core, and returning to host periodically to run hooks.")]),e._v(" "),a("p",[e._v("TPUEstimator transforms a global batch size in params to a per-shard batch size when calling the input_fn and model_fn. Users should specify global batch size in constructor, and then get the batch size for each shard in input_fn and model_fn by params['batch_size'].")]),e._v(" "),a("ul",[a("li",[e._v("For training, "),a("code",[e._v("model_fn")]),e._v(" gets per-core batch size; "),a("code",[e._v("input_fn")]),e._v(" may get per-core or per-host batch size depending on "),a("code",[e._v("per_host_input_for_training")]),e._v(" in "),a("code",[e._v("TPUConfig")]),e._v(" (See docstring for "),a("code",[e._v("TPUConfig")]),e._v(" for details).")]),e._v(" "),a("li",[e._v("For evaluation and prediction, "),a("code",[e._v("model_fn")]),e._v(" gets per-core batch size and "),a("code",[e._v("input_fn")]),e._v(" get per-host batch size.")])]),e._v(" "),a("h1",{attrs:{id:"evaluation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#evaluation","aria-hidden":"true"}},[e._v("#")]),e._v(" Evaluation")]),e._v(" "),a("p",[e._v("model_fn should return TPUEstimatorSpec, which expects the eval_metrics for TPU evaluation. If eval_on_tpu is False, the evaluation will execute on CPU or GPU; in this case the following discussion on TPU evaluation does not apply.")]),e._v(" "),a("p",[e._v("TPUEstimatorSpec.eval_metrics is a tuple of metric_fn and tensors, where tensors could be a list of any nested structure of Tensors (See TPUEstimatorSpec for details). metric_fn takes the tensors and returns a dict from metric string name to the result of calling a metric function, namely a (metric_tensor, update_op) tuple.")]),e._v(" "),a("p",[e._v("One can set use_tpu to False for testing. All training, evaluation, and predict will be executed on CPU. input_fn and model_fn will receive train_batch_size or eval_batch_size unmodified as params['batch_size'].")]),e._v(" "),a("h4",{attrs:{id:"current-limitations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#current-limitations","aria-hidden":"true"}},[e._v("#")]),e._v(" Current limitations:")]),e._v(" "),a("h2",{attrs:{id:"example-mnist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-mnist","aria-hidden":"true"}},[e._v("#")]),e._v(" Example (MNIST):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" # The metric Fn which runs on CPU.\ndef metric_fn(labels, logits):\n  predictions = tf.argmax(logits, 1)\n  return {\n    'accuracy': tf.compat.v1.metrics.precision(\n        labels=labels, predictions=predictions),\n  }\n\n# Your model Fn which runs on TPU (eval_metrics is list in this example)\ndef model_fn(features, labels, mode, config, params):\n  ...\n  logits = ...\n\n  if mode = tf.estimator.ModeKeys.EVAL:\n    return tpu_estimator.TPUEstimatorSpec(\n        mode=mode,\n        loss=loss,\n        eval_metrics=(metric_fn, [labels, logits]))\n\n# or specify the eval_metrics tensors as dict.\ndef model_fn(features, labels, mode, config, params):\n  ...\n  final_layer_output = ...\n\n  if mode = tf.estimator.ModeKeys.EVAL:\n    return tpu_estimator.TPUEstimatorSpec(\n        mode=mode,\n        loss=loss,\n        eval_metrics=(metric_fn, {\n            'labels': labels,\n            'logits': final_layer_output,\n        }))\n")])])]),a("h1",{attrs:{id:"prediction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prediction","aria-hidden":"true"}},[e._v("#")]),e._v(" Prediction")]),e._v(" "),a("p",[e._v("Prediction on TPU is an experimental feature to support large batch inference. It is not designed for latency-critical system. In addition, due to some usability issues, for prediction with small dataset, CPU .predict, i.e., creating a new TPUEstimator instance with use_tpu=False, might be more convenient.")]),e._v(" "),a("h4",{attrs:{id:"current-limitations-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#current-limitations-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Current limitations:")]),e._v(" "),a("h2",{attrs:{id:"example-mnist-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-mnist-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Example (MNIST):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" height = 32\nwidth = 32\ntotal_examples = 100\n\ndef predict_input_fn(params):\n  batch_size = params['batch_size']\n\n  images = tf.random.uniform(\n      [total_examples, height, width, 3], minval=-1, maxval=1)\n\n  dataset = tf.data.Dataset.from_tensor_slices(images)\n  dataset = dataset.map(lambda images: {'image': images})\n\n  dataset = dataset.batch(batch_size)\n  return dataset\n\ndef model_fn(features, labels, params, mode):\n   # Generate predictions, called 'output', from features['image']\n\n  if mode == tf.estimator.ModeKeys.PREDICT:\n    return tf.contrib.tpu.TPUEstimatorSpec(\n        mode=mode,\n        predictions={\n            'predictions': output,\n            'is_padding': features['is_padding']\n        })\n\ntpu_est = TPUEstimator(\n    model_fn=model_fn,\n    ...,\n    predict_batch_size=16)\n\n# Fully consume the generator so that TPUEstimator can shutdown the TPU\n# system.\nfor item in tpu_est.predict(input_fn=input_fn):\n  # Filter out item if the `is_padding` is 1.\n  # Process the 'predictions'\n")])])]),a("h1",{attrs:{id:"exporting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exporting","aria-hidden":"true"}},[e._v("#")]),e._v(" Exporting")]),e._v(" "),a("p",[e._v("export_saved_model exports 2 metagraphs, one with saved_model.SERVING, and another with saved_model.SERVING and saved_model.TPU tags. At serving time, these tags are used to select the appropriate metagraph to load.")]),e._v(" "),a("p",[e._v("Before running the graph on TPU, the TPU system needs to be initialized. If TensorFlow Serving model-server is used, this is done automatically. If not, please use session.run(tpu.initialize_system()).")]),e._v(" "),a("p",[e._v("There are two versions of the API: ExportSavedModelApiVersion.V1 and V2.")]),e._v(" "),a("p",[e._v("In V1, the exported CPU graph is model_fn as it is. The exported TPU graph wraps tpu.rewrite() and TPUPartitionedCallOp around model_fn so model_fn is on TPU by default. To place ops on CPU, tpu.outside_compilation(host_call, logits) can be used.")]),e._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" def model_fn(features, labels, mode, config, params):\n  ...\n  logits = ...\n  export_outputs = {\n    'logits': export_output_lib.PredictOutput(\n      {'logits': logits})\n  }\n\n  def host_call(logits):\n    class_ids = math_ops.argmax(logits)\n    classes = string_ops.as_string(class_ids)\n    export_outputs['classes'] =\n      export_output_lib.ClassificationOutput(classes=classes)\n\n  tpu.outside_compilation(host_call, logits)\n\n  ...\n")])])]),a("p",[e._v("In V2, export_saved_model() sets up params['use_tpu'] flag to let the user know if the code is exporting to TPU (or not). When params['use_tpu'] is True, users need to call tpu.rewrite(), TPUPartitionedCallOp and/or batch_function(). Alternatively use inference_on_tpu() which is a convenience wrapper of the three.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("   def model_fn(features, labels, mode, config, params):\n    ...\n    # This could be some pre-processing on CPU like calls to input layer with\n    # embedding columns.\n    x2 = features['x'] * 2\n\n    def computation(input_tensor):\n      return layers.dense(\n          input_tensor, 1, kernel_initializer=init_ops.zeros_initializer())\n\n    inputs = [x2]\n    if params['use_tpu']:\n      predictions = array_ops.identity(\n          tpu_estimator.inference_on_tpu(computation, inputs,\n          num_batch_threads=1, max_batch_size=2, batch_timeout_micros=100),\n          name='predictions')\n    else:\n      predictions = array_ops.identity(\n          computation(*inputs), name='predictions')\n    key = signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY\n    export_outputs = {\n        key: export_lib.PredictOutput({'prediction': predictions})\n    }\n    ...\n")])])]),a("p",[e._v("TIP: V2 is recommended as it is more flexible (eg: batching, etc).")]),e._v(" "),a("h2",{attrs:{id:"init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("init")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/tpu/tpu_estimator.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __init__(\n    model_fn=None,\n    model_dir=None,\n    config=None,\n    params=None,\n    use_tpu=True,\n    train_batch_size=None,\n    eval_batch_size=None,\n    predict_batch_size=None,\n    batch_axis=None,\n    eval_on_tpu=True,\n    export_to_tpu=True,\n    export_to_cpu=True,\n    warm_start_from=None,\n    embedding_config_spec=None,\n    export_saved_model_api_version=ExportSavedModelApiVersion.V1\n)\n")])])]),a("p",[e._v("Constructs an TPUEstimator instance.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("model_fn")]),e._v(": Model function as required by "),a("code",[e._v("Estimator")]),e._v(" which returns "),a("code",[e._v("Estimator")]),e._v("Spec or TPU"),a("code",[e._v("Estimator")]),e._v("Spec. "),a("code",[e._v("training_hooks")]),e._v(", 'evaluation_hooks', and "),a("code",[e._v("prediction_hooks")]),e._v(" must not capure any TPU Tensor inside the "),a("code",[e._v("model_fn")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("model_dir")]),e._v(": Directory to save model parameters, graph and etc. This can also be used to load checkpoints from the directory into a estimator to continue training a previously saved model. If "),a("code",[e._v("None")]),e._v(", the "),a("code",[e._v("model_dir")]),e._v(" in "),a("code",[e._v("config")]),e._v(" will be used if set. If both are set, they must be same. If both are "),a("code",[e._v("None")]),e._v(", a temporary directory will be used.")]),e._v(" "),a("li",[a("code",[e._v("config")]),e._v(": An "),a("code",[e._v("tpu_config.RunConfig")]),e._v(" "),a("code",[e._v("config")]),e._v("uration object. Cannot be "),a("code",[e._v("None")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("params")]),e._v(": An optional "),a("code",[e._v("dict")]),e._v(" of hyper parameters that will be passed into "),a("code",[e._v("input_fn")]),e._v(" and "),a("code",[e._v("model_fn")]),e._v(". Keys are names of parameters, values are basic python types. There are reserved keys for "),a("code",[e._v("TPUEstimator")]),e._v(", including 'batch_size'.")]),e._v(" "),a("li",[a("code",[e._v("use_tpu")]),e._v(": A bool indicating whether TPU support is enabled. Currently, - TPU training and evaluation respect this bit, but eval_on_tpu can override execution of eval. See below.")]),e._v(" "),a("li",[a("code",[e._v("train_batch_size")]),e._v(": An int representing the global training batch size. "),a("code",[e._v("TPUEstimator")]),e._v(" transforms this global batch size to a per-shard batch size, as "),a("code",[e._v("params")]),e._v("['batch_size'], when calling "),a("code",[e._v("input_fn")]),e._v(" and "),a("code",[e._v("model_fn")]),e._v(". Cannot be "),a("code",[e._v("None")]),e._v(" if "),a("code",[e._v("use_tpu")]),e._v(" is "),a("code",[e._v("True")]),e._v(". Must be divisible by total number of replicas.")]),e._v(" "),a("li",[a("code",[e._v("eval_batch_size")]),e._v(": An int representing evaluation batch size. Must be divisible by total number of replicas.")]),e._v(" "),a("li",[a("code",[e._v("predict_batch_size")]),e._v(": An int representing the pre"),a("code",[e._v("dict")]),e._v("ion batch size. Must be divisible by total number of replicas.")]),e._v(" "),a("li",[a("code",[e._v("batch_axis")]),e._v(": A python tuple of int values describing how each tensor produced by the "),a("code",[e._v("Estimator")]),e._v(" "),a("code",[e._v("input_fn")]),e._v(" should be split across the TPU compute shards. For example, if your "),a("code",[e._v("input_fn")]),e._v(" produced (images, labels) where the images tensor is in "),a("code",[e._v("HWCN")]),e._v(" format, your shard dimensions would be [3, 0], where 3 corresponds to the "),a("code",[e._v("N")]),e._v(" dimension of your images Tensor, and 0 corresponds to the dimension along which to split the labels to match up with the corresponding images. If "),a("code",[e._v("None")]),e._v(" is supplied, and per_host_input_for_training is "),a("code",[e._v("True")]),e._v(", batches will be sharded based on the major dimension. If tpu_"),a("code",[e._v("config")]),e._v(".per_host_input_for_training is False or "),a("code",[e._v("PER_HOST_V2")]),e._v(", "),a("code",[e._v("batch_axis")]),e._v(" is ignored.")]),e._v(" "),a("li",[a("code",[e._v("eval_on_tpu")]),e._v(": If False, evaluation runs on CPU or GPU. In this case, the "),a("code",[e._v("model_fn")]),e._v(" must return "),a("code",[e._v("Estimator")]),e._v("Spec when called with "),a("code",[e._v("mode")]),e._v(" as "),a("code",[e._v("EVAL")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("export_to_tpu")]),e._v(": If "),a("code",[e._v("True")]),e._v(", "),a("code",[e._v("export_saved_model")]),e._v("() exports a metagraph for serving on TPU. "),a("code",[e._v("N")]),e._v("ote that unsupported export "),a("code",[e._v("mode")]),e._v("s such as "),a("code",[e._v("EVAL")]),e._v(" will be ignored. For those "),a("code",[e._v("mode")]),e._v("s, only a CPU "),a("code",[e._v("mode")]),e._v("l will be exported. Currently, "),a("code",[e._v("export_to_tpu")]),e._v(" only supports PREDICT.")]),e._v(" "),a("li",[a("code",[e._v("export_to_cpu")]),e._v(": If "),a("code",[e._v("True")]),e._v(", "),a("code",[e._v("export_saved_model")]),e._v("() exports a metagraph for serving on CPU.")]),e._v(" "),a("li",[a("code",[e._v("warm_start_from")]),e._v(": Optional string filepath to a checkpoint or SavedModel to warm-start from, or a "),a("code",[e._v("tf.estimator.WarmStartSettings")]),e._v(" object to fully "),a("code",[e._v("config")]),e._v("ure warm-starting. If the string filepath is provided instead of a "),a("code",[e._v("WarmStartSettings")]),e._v(", then all variables are warm-started, and it is assumed that vocabularies and Tensor names are unchanged.")]),e._v(" "),a("li",[a("code",[e._v("embedding_config_spec")]),e._v(": Optional EmbeddingConfigSpec instance to support using TPU embedding.")]),e._v(" "),a("li",[a("code",[e._v("export_saved_model")]),e._v("_api_version: ExportSavedModelApiVersion, V1 or V2. With V1, "),a("code",[e._v("export_saved_model")]),e._v("() adds rewrite() and TPUPartitionedCallOp() for user; while in v2, user is expected to add rewrite(), TPUPartitionedCallOp() etc in their "),a("code",[e._v("model_fn")]),e._v(". A helper function "),a("code",[e._v("inference_on_tpu")]),e._v(" is provided for V2. brn_tpu_estimator.py includes examples for both versions i.e. "),a("code",[e._v("TPUEstimator")]),e._v("ExportTest and "),a("code",[e._v("TPUEstimator")]),e._v("ExportV2Test.")])]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": "),a("code",[e._v("params")]),e._v(" has reserved keys already.")])]),e._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),a("h3",{attrs:{id:"config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#config","aria-hidden":"true"}},[e._v("#")]),e._v(" config")]),e._v(" "),a("h3",{attrs:{id:"model-dir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#model-dir","aria-hidden":"true"}},[e._v("#")]),e._v(" model_dir")]),e._v(" "),a("h3",{attrs:{id:"model-fn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#model-fn","aria-hidden":"true"}},[e._v("#")]),e._v(" model_fn")]),e._v(" "),a("p",[e._v("Returns the model_fn which is bound to self.params.")]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The model_fn with following signature: def model_fn(features, labels, mode, config)")]),e._v(" "),a("h3",{attrs:{id:"params"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#params","aria-hidden":"true"}},[e._v("#")]),e._v(" params")]),e._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),a("h3",{attrs:{id:"eval-dir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eval-dir","aria-hidden":"true"}},[e._v("#")]),e._v(" eval_dir")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/estimator.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" eval_dir(name=None)\n")])])]),a("p",[e._v("Shows the directory name where evaluation metrics are dumped.")]),e._v(" "),a("h4",{attrs:{id:"args-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": Name of the evaluation if user needs to run multiple evaluations on different data sets, such as on training data vs test data. Metrics for different evaluations are saved in separate folders, and appear separately in tensorboard.")])]),e._v(" "),a("h4",{attrs:{id:"returns-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A string which is the path of directory contains evaluation metrics.")]),e._v(" "),a("h3",{attrs:{id:"evaluate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#evaluate","aria-hidden":"true"}},[e._v("#")]),e._v(" evaluate")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/tpu/tpu_estimator.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" evaluate(\n    input_fn,\n    steps=None,\n    hooks=None,\n    checkpoint_path=None,\n    name=None\n)\n")])])]),a("p",[e._v("Evaluates the model given evaluation data input_fn.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/errors/OutOfRangeError",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.errors.OutOfRangeError"),a("OutboundLink")],1),e._v("For each step, calls input_fn, which returns one batch of data. Evaluates until: - steps batches are processed, or - input_fn raises an end-of-input exception ( or StopIteration).")]),e._v(" "),a("h4",{attrs:{id:"args-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("input_fn")]),e._v(": A function that constructs the input data for evaluation. See Premade Estimators for more information. The function should construct and return one of the following: * A "),a("code",[e._v("tf.data.Dataset")]),e._v(" object: Outputs of "),a("code",[e._v("Dataset")]),e._v(" object must be a tuple ("),a("code",[e._v("features, labels")]),e._v(") with same constraints as below. * A tuple ("),a("code",[e._v("features, labels")]),e._v("): Where "),a("code",[e._v("features")]),e._v(" is a "),a("code",[e._v("tf.Tensor")]),e._v(" or a dictionary of string feature name to "),a("code",[e._v("Tensor")]),e._v(" and "),a("code",[e._v("labels")]),e._v(" is a "),a("code",[e._v("Tensor")]),e._v(" or a dictionary of string label name to "),a("code",[e._v("Tensor")]),e._v(". Both "),a("code",[e._v("features")]),e._v(" and "),a("code",[e._v("labels")]),e._v(" are consumed by "),a("code",[e._v("model_fn")]),e._v(". They should satisfy the expectation of "),a("code",[e._v("model_fn")]),e._v(" from inputs.")]),e._v(" "),a("li",[a("code",[e._v("steps")]),e._v(": Number of "),a("code",[e._v("steps")]),e._v(" for which to evaluate model. If "),a("code",[e._v("None")]),e._v(", evaluates until "),a("code",[e._v("input_fn")]),e._v(" raises an end-of-input exception.")]),e._v(" "),a("li",[a("code",[e._v("hooks")]),e._v(": List of "),a("code",[e._v("tf.train.SessionRunHook")]),e._v(" subclass instances. Used for callbacks inside the evaluation call.")]),e._v(" "),a("li",[a("code",[e._v("checkpoint_path")]),e._v(": Path of a specific checkpoint to evaluate. If "),a("code",[e._v("None")]),e._v(", the latest checkpoint in "),a("code",[e._v("model_dir")]),e._v(" is used. If there are no checkpoints in "),a("code",[e._v("model_dir")]),e._v(", evaluation is run with newly initialized "),a("code",[e._v("Variables")]),e._v(" instead of ones restored from checkpoint.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": Name of the evaluation if user needs to run multiple evaluations on different data sets, such as on training data vs test data. Metrics for different evaluations are saved in separate folders, and appear separately in tensorboard.")])]),e._v(" "),a("h4",{attrs:{id:"returns-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A dict containing the evaluation metrics specified in model_fn keyed by name, as well as an entry global_step which contains the value of the global step for which this evaluation was performed. For canned estimators, the dict contains the loss (mean loss per mini-batch) and the average_loss (mean loss per sample). Canned classifiers also return the accuracy. Canned regressors also return the label/mean and the prediction/mean.")]),e._v(" "),a("h4",{attrs:{id:"raises-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If "),a("code",[e._v("steps <= 0")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"experimental-export-all-saved-models"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#experimental-export-all-saved-models","aria-hidden":"true"}},[e._v("#")]),e._v(" experimental_export_all_saved_models")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/estimator.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" experimental_export_all_saved_models(\n    export_dir_base,\n    input_receiver_fn_map,\n    assets_extra=None,\n    as_text=False,\n    checkpoint_path=None\n)\n")])])]),a("p",[e._v("Exports a SavedModel with tf.MetaGraphDefs for each requested mode.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/estimator/ModeKeys#TRAIN",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.estimator.ModeKeys.TRAIN"),a("OutboundLink")],1),e._v("For each mode passed in via the input_receiver_fn_map, this method builds a new graph by calling the input_receiver_fn to obtain feature and label Tensors. Next, this method calls the Estimator's model_fn in the passed mode to generate the model graph based on those features and labels, and restores the given checkpoint (or, lacking that, the most recent checkpoint) into the graph. Only one of the modes is used for saving variables to the SavedModel (order of preference: , tf.estimator.ModeKeys.EVAL, then tf.estimator.ModeKeys.PREDICT), such that up to three tf.MetaGraphDefs are saved with a single set of variables in a single SavedModel directory.")]),e._v(" "),a("p",[e._v("For the variables and tf.MetaGraphDefs, a timestamped export directory below export_dir_base, and writes a SavedModel into it containing the tf.MetaGraphDef for the given mode and its associated signatures.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/estimator/export/ExportOutput",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.estimator.export.ExportOutput"),a("OutboundLink")],1),e._v("For prediction, the exported MetaGraphDef will provide one SignatureDef for each element of the export_outputs dict returned from the model_fn, named using the same keys. One of these keys is always tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY, indicating which signature will be served when a serving request does not specify one. For each signature, the outputs are provided by the corresponding s, and the inputs are always the input receivers provided by the serving_input_receiver_fn.")]),e._v(" "),a("p",[e._v("For training and evaluation, the train_op is stored in an extra collection, and loss, metrics, and predictions are included in a SignatureDef for the mode in question.")]),e._v(" "),a("p",[e._v("Extra assets may be written into the SavedModel via the assets_extra argument. This should be a dict, where each key gives a destination path (including the filename) relative to the assets.extra directory. The corresponding value gives the full path of the source file to be copied. For example, the simple case of copying a single file without renaming it is specified as {'my_asset_file.txt': '/path/to/my_asset_file.txt'}.")]),e._v(" "),a("h4",{attrs:{id:"args-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("export_dir_base")]),e._v(": A string containing a directory in which to create timestamped subdirectories containing exported "),a("code",[e._v("SavedModel")]),e._v("s.")]),e._v(" "),a("li",[a("code",[e._v("input_receiver_fn_map")]),e._v(": dict of "),a("code",[e._v("tf.estimator.ModeKeys")]),e._v(" to "),a("code",[e._v("input_receiver_fn")]),e._v(" mappings, where the "),a("code",[e._v("input_receiver_fn")]),e._v(" is a function that takes no arguments and returns the appropriate subclass of "),a("code",[e._v("InputReceiver")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("assets_extra")]),e._v(": A dict specifying how to populate the assets.extra directory within the exported "),a("code",[e._v("SavedModel")]),e._v(", or "),a("code",[e._v("None")]),e._v(" if no extra assets are needed.")]),e._v(" "),a("li",[a("code",[e._v("as_text")]),e._v(": whether to write the "),a("code",[e._v("SavedModel")]),e._v(" proto in text format.")]),e._v(" "),a("li",[a("code",[e._v("checkpoint_path")]),e._v(": The checkpoint path to export. If "),a("code",[e._v("None")]),e._v(" (the default), the most recent checkpoint found within the model directory is chosen.")])]),e._v(" "),a("h4",{attrs:{id:"returns-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The string path to the exported directory.")]),e._v(" "),a("h4",{attrs:{id:"raises-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": if any "),a("code",[e._v("input_receiver_fn")]),e._v(" is "),a("code",[e._v("None")]),e._v(", no "),a("code",[e._v("export_outputs")]),e._v(" are provided, or no checkpoint can be found.")])]),e._v(" "),a("h3",{attrs:{id:"export-saved-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-saved-model","aria-hidden":"true"}},[e._v("#")]),e._v(" export_saved_model")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/estimator.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" export_saved_model(\n    export_dir_base,\n    serving_input_receiver_fn,\n    assets_extra=None,\n    as_text=False,\n    checkpoint_path=None,\n    experimental_mode=ModeKeys.PREDICT\n)\n")])])]),a("p",[e._v("Exports inference graph as a SavedModel into the given dir.\n"),a("a",{attrs:{href:"https://tensorflow.org/guide/saved_model#using_savedmodel_with_estimators",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using SavedModel with Estimators"),a("OutboundLink")],1),e._v("For a detailed guide, see .")]),e._v(" "),a("p",[e._v("This method builds a new graph by first calling the serving_input_receiver_fn to obtain feature Tensors, and then calling this Estimator's model_fn to generate the model graph based on those features. It restores the given checkpoint (or, lacking that, the most recent checkpoint) into this graph in a fresh session. Finally it creates a timestamped export directory below the given export_dir_base, and writes a SavedModel into it containing a single tf.MetaGraphDef saved from this session.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/estimator/export/ExportOutput",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.estimator.export.ExportOutput"),a("OutboundLink")],1),e._v("The exported MetaGraphDef will provide one SignatureDef for each element of the export_outputs dict returned from the model_fn, named using the same keys. One of these keys is always tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY, indicating which signature will be served when a serving request does not specify one. For each signature, the outputs are provided by the corresponding s, and the inputs are always the input receivers provided by the serving_input_receiver_fn.")]),e._v(" "),a("p",[e._v("Extra assets may be written into the SavedModel via the assets_extra argument. This should be a dict, where each key gives a destination path (including the filename) relative to the assets.extra directory. The corresponding value gives the full path of the source file to be copied. For example, the simple case of copying a single file without renaming it is specified as {'my_asset_file.txt': '/path/to/my_asset_file.txt'}.")]),e._v(" "),a("p",[e._v("The experimental_mode parameter can be used to export a single train/eval/predict graph as a SavedModel. See experimental_export_all_saved_models for full docs.")]),e._v(" "),a("h4",{attrs:{id:"args-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("export_dir_base")]),e._v(": A string containing a directory in which to create timestamped subdirectories containing exported "),a("code",[e._v("SavedModel")]),e._v("s.")]),e._v(" "),a("li",[a("code",[e._v("serving_input_receiver_fn")]),e._v(": A function that takes no argument and returns a "),a("code",[e._v("tf.estimator.export.ServingInputReceiver")]),e._v(" or "),a("code",[e._v("tf.estimator.export.TensorServingInputReceiver")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("assets_extra")]),e._v(": A dict specifying how to populate the assets.extra directory within the exported "),a("code",[e._v("SavedModel")]),e._v(", or "),a("code",[e._v("None")]),e._v(" if no extra assets are needed.")]),e._v(" "),a("li",[a("code",[e._v("as_text")]),e._v(": whether to write the "),a("code",[e._v("SavedModel")]),e._v(" proto in text format.")]),e._v(" "),a("li",[a("code",[e._v("checkpoint_path")]),e._v(": The checkpoint path to export. If "),a("code",[e._v("None")]),e._v(" (the default), the most recent checkpoint found within the model directory is chosen.")]),e._v(" "),a("li",[a("code",[e._v("experimental_mode")]),e._v(": "),a("code",[e._v("tf.estimator.ModeKeys")]),e._v(" value indicating with mode will be exported. Note that this feature is experimental.")])]),e._v(" "),a("h4",{attrs:{id:"returns-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The string path to the exported directory.")]),e._v(" "),a("h4",{attrs:{id:"raises-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": if no "),a("code",[e._v("serving_input_receiver_fn")]),e._v(" is provided, no "),a("code",[e._v("export_outputs")]),e._v(" are provided, or no checkpoint can be found.")])]),e._v(" "),a("h3",{attrs:{id:"export-savedmodel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-savedmodel","aria-hidden":"true"}},[e._v("#")]),e._v(" export_savedmodel")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/estimator.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" export_savedmodel(\n    export_dir_base,\n    serving_input_receiver_fn,\n    assets_extra=None,\n    as_text=False,\n    checkpoint_path=None,\n    strip_default_attrs=False\n)\n")])])]),a("p",[e._v("Exports inference graph as a SavedModel into the given dir. (deprecated)\n"),a("a",{attrs:{href:"https://tensorflow.org/guide/saved_model#using_savedmodel_with_estimators",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using SavedModel with Estimators"),a("OutboundLink")],1),e._v("For a detailed guide, see .")]),e._v(" "),a("p",[e._v("This method builds a new graph by first calling the serving_input_receiver_fn to obtain feature Tensors, and then calling this Estimator's model_fn to generate the model graph based on those features. It restores the given checkpoint (or, lacking that, the most recent checkpoint) into this graph in a fresh session. Finally it creates a timestamped export directory below the given export_dir_base, and writes a SavedModel into it containing a single tf.MetaGraphDef saved from this session.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/estimator/export/ExportOutput",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.estimator.export.ExportOutput"),a("OutboundLink")],1),e._v("The exported MetaGraphDef will provide one SignatureDef for each element of the export_outputs dict returned from the model_fn, named using the same keys. One of these keys is always tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY, indicating which signature will be served when a serving request does not specify one. For each signature, the outputs are provided by the corresponding s, and the inputs are always the input receivers provided by the serving_input_receiver_fn.")]),e._v(" "),a("p",[e._v("Extra assets may be written into the SavedModel via the assets_extra argument. This should be a dict, where each key gives a destination path (including the filename) relative to the assets.extra directory. The corresponding value gives the full path of the source file to be copied. For example, the simple case of copying a single file without renaming it is specified as {'my_asset_file.txt': '/path/to/my_asset_file.txt'}.")]),e._v(" "),a("h4",{attrs:{id:"args-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("export_dir_base")]),e._v(": A string containing a directory in which to create timestamped subdirectories containing exported "),a("code",[e._v("SavedModel")]),e._v("s.")]),e._v(" "),a("li",[a("code",[e._v("serving_input_receiver_fn")]),e._v(": A function that takes no argument and returns a "),a("code",[e._v("tf.estimator.export.ServingInputReceiver")]),e._v(" or "),a("code",[e._v("tf.estimator.export.TensorServingInputReceiver")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("assets_extra")]),e._v(": A dict specifying how to populate the assets.extra directory within the exported "),a("code",[e._v("SavedModel")]),e._v(", or "),a("code",[e._v("None")]),e._v(" if no extra assets are needed.")]),e._v(" "),a("li",[a("code",[e._v("as_text")]),e._v(": whether to write the "),a("code",[e._v("SavedModel")]),e._v(" proto in text format.")]),e._v(" "),a("li",[a("code",[e._v("checkpoint_path")]),e._v(": The checkpoint path to export. If "),a("code",[e._v("None")]),e._v(" (the default), the most recent checkpoint found within the model directory is chosen.")]),e._v(" "),a("li",[a("code",[e._v("strip_default_attrs")]),e._v(": Boolean. If "),a("code",[e._v("True")]),e._v(", default-valued attributes will be removed from the "),a("code",[e._v("NodeDef")]),e._v("s. For a detailed guide, see Stripping Default-Valued Attributes.")])]),e._v(" "),a("h4",{attrs:{id:"returns-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The string path to the exported directory.")]),e._v(" "),a("h4",{attrs:{id:"raises-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": if no "),a("code",[e._v("serving_input_receiver_fn")]),e._v(" is provided, no "),a("code",[e._v("export_outputs")]),e._v(" are provided, or no checkpoint can be found.")])]),e._v(" "),a("h3",{attrs:{id:"get-variable-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-names","aria-hidden":"true"}},[e._v("#")]),e._v(" get_variable_names")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/estimator.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_variable_names()\n")])])]),a("p",[e._v("Returns list of all variable names in this model.")]),e._v(" "),a("h4",{attrs:{id:"returns-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("List of names.")]),e._v(" "),a("h4",{attrs:{id:"raises-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If the "),a("code",[e._v("Estimator")]),e._v(" has not produced a checkpoint yet.")])]),e._v(" "),a("h3",{attrs:{id:"get-variable-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-variable-value","aria-hidden":"true"}},[e._v("#")]),e._v(" get_variable_value")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/estimator.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_variable_value(name)\n")])])]),a("p",[e._v("Returns value of the variable given by name.")]),e._v(" "),a("h4",{attrs:{id:"args-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": string or a list of string, "),a("code",[e._v("name")]),e._v(" of the tensor.")])]),e._v(" "),a("h4",{attrs:{id:"returns-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Numpy array - value of the tensor.")]),e._v(" "),a("h4",{attrs:{id:"raises-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If the "),a("code",[e._v("Estimator")]),e._v(" has not produced a checkpoint yet.")])]),e._v(" "),a("h3",{attrs:{id:"latest-checkpoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#latest-checkpoint","aria-hidden":"true"}},[e._v("#")]),e._v(" latest_checkpoint")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/estimator.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" latest_checkpoint()\n")])])]),a("p",[e._v("Finds the filename of the latest saved checkpoint file in model_dir.")]),e._v(" "),a("h4",{attrs:{id:"returns-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The full path to the latest checkpoint or None if no checkpoint was found.")]),e._v(" "),a("h3",{attrs:{id:"predict"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#predict","aria-hidden":"true"}},[e._v("#")]),e._v(" predict")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/tpu/tpu_estimator.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" predict(\n    input_fn,\n    predict_keys=None,\n    hooks=None,\n    checkpoint_path=None,\n    yield_single_examples=True\n)\n")])])]),a("p",[e._v("Yields predictions for given features.\n"),a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/issues/20506#issuecomment-422208517",target:"_blank",rel:"noopener noreferrer"}},[e._v("issue/20506"),a("OutboundLink")],1),e._v("Please note that interleaving two predict outputs does not work. See:")]),e._v(" "),a("h4",{attrs:{id:"args-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("input_fn")]),e._v(": A function that constructs the features. Prediction continues until "),a("code",[e._v("input_fn")]),e._v(" raises an end-of-input exception ("),a("code",[e._v("tf.errors.OutOfRangeError")]),e._v(" or "),a("code",[e._v("StopIteration")]),e._v("). See Premade Estimators for more information. The function should construct and return one of the following:\nA "),a("code",[e._v("tf.data.Dataset")]),e._v(" object: Outputs of "),a("code",[e._v("Dataset")]),e._v(" object must have same constraints as below.\nfeatures: A "),a("code",[e._v("tf.Tensor")]),e._v(" or a dictionary of string feature name to "),a("code",[e._v("Tensor")]),e._v(". features are consumed by "),a("code",[e._v("model_fn")]),e._v(". They should satisfy the expectation of "),a("code",[e._v("model_fn")]),e._v(" from inputs.\nA tuple, in which case the first item is extracted as features.")]),e._v(" "),a("li",[e._v("A "),a("code",[e._v("tf.data.Dataset")]),e._v(" object: Outputs of "),a("code",[e._v("Dataset")]),e._v(" object must have same constraints as below.")]),e._v(" "),a("li",[e._v("features: A "),a("code",[e._v("tf.Tensor")]),e._v(" or a dictionary of string feature name to "),a("code",[e._v("Tensor")]),e._v(". features are consumed by "),a("code",[e._v("model_fn")]),e._v(". They should satisfy the expectation of "),a("code",[e._v("model_fn")]),e._v(" from inputs.")]),e._v(" "),a("li",[e._v("A tuple, in which case the first item is extracted as features.")]),e._v(" "),a("li",[a("code",[e._v("predict_keys")]),e._v(": list of "),a("code",[e._v("str")]),e._v(", name of the keys to pre"),a("code",[e._v("dict")]),e._v(". It is used if the "),a("code",[e._v("tf.estimator.EstimatorSpec.predictions")]),e._v(" is a "),a("code",[e._v("dict")]),e._v(". If "),a("code",[e._v("predict_keys")]),e._v(" is used then rest of the pre"),a("code",[e._v("dict")]),e._v("ions will be filtered from the "),a("code",[e._v("dict")]),e._v("ionary. If "),a("code",[e._v("None")]),e._v(", returns all.")]),e._v(" "),a("li",[a("code",[e._v("hooks")]),e._v(": List of "),a("code",[e._v("tf.train.SessionRunHook")]),e._v(" subclass instances. Used for callbacks inside the pre"),a("code",[e._v("dict")]),e._v("ion call.")]),e._v(" "),a("li",[a("code",[e._v("checkpoint_path")]),e._v(": Path of a specific checkpoint to pre"),a("code",[e._v("dict")]),e._v(". If "),a("code",[e._v("None")]),e._v(", the latest checkpoint in "),a("code",[e._v("model_dir")]),e._v(" is used. If there are no checkpoints in "),a("code",[e._v("model_dir")]),e._v(", pre"),a("code",[e._v("dict")]),e._v("ion is run with newly initialized "),a("code",[e._v("Variables")]),e._v(" instead of ones restored from checkpoint.")]),e._v(" "),a("li",[a("code",[e._v("yield_single_examples")]),e._v(": If "),a("code",[e._v("False")]),e._v(", yields the whole batch as returned by the "),a("code",[e._v("model_fn")]),e._v(" instead of decomposing the batch into individual elements. This is useful if "),a("code",[e._v("model_fn")]),e._v(" returns some tensors whose first dimension is not equal to the batch size.")])]),e._v(" "),a("h4",{attrs:{id:"yields"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yields","aria-hidden":"true"}},[e._v("#")]),e._v(" Yields:")]),e._v(" "),a("p",[e._v("Evaluated values of predictions tensors.")]),e._v(" "),a("h4",{attrs:{id:"raises-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If batch length of predictions is not the same and "),a("code",[e._v("yield_single_examples")]),e._v(" is "),a("code",[e._v("True")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": If there is a conflict between "),a("code",[e._v("predict_keys")]),e._v(" and "),a("code",[e._v("predictions")]),e._v(". For example if "),a("code",[e._v("predict_keys")]),e._v(" is not "),a("code",[e._v("None")]),e._v(" but "),a("code",[e._v("tf.estimator.EstimatorSpec.predictions")]),e._v(" is not a "),a("code",[e._v("dict")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"train"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#train","aria-hidden":"true"}},[e._v("#")]),e._v(" train")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/tpu/tpu_estimator.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" train(\n    input_fn,\n    hooks=None,\n    steps=None,\n    max_steps=None,\n    saving_listeners=None\n)\n")])])]),a("p",[e._v("Trains a model given training data input_fn.")]),e._v(" "),a("h4",{attrs:{id:"args-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("input_fn")]),e._v(": A function that provides input data for training as minibatches. See Premade Estimators for more information. The function should construct and return one of the following:\nA "),a("code",[e._v("tf.data.Dataset")]),e._v(" object: Outputs of "),a("code",[e._v("Dataset")]),e._v(" object must be a tuple ("),a("code",[e._v("features, labels")]),e._v(") with same constraints as below.\nA tuple ("),a("code",[e._v("features, labels")]),e._v("): Where "),a("code",[e._v("features")]),e._v(" is a "),a("code",[e._v("tf.Tensor")]),e._v(" or a dictionary of string feature name to "),a("code",[e._v("Tensor")]),e._v(" and "),a("code",[e._v("labels")]),e._v(" is a "),a("code",[e._v("Tensor")]),e._v(" or a dictionary of string label name to "),a("code",[e._v("Tensor")]),e._v(". Both "),a("code",[e._v("features")]),e._v(" and "),a("code",[e._v("labels")]),e._v(" are consumed by "),a("code",[e._v("model_fn")]),e._v(". They should satisfy the expectation of "),a("code",[e._v("model_fn")]),e._v(" from inputs.")]),e._v(" "),a("li",[e._v("A "),a("code",[e._v("tf.data.Dataset")]),e._v(" object: Outputs of "),a("code",[e._v("Dataset")]),e._v(" object must be a tuple ("),a("code",[e._v("features, labels")]),e._v(") with same constraints as below.")]),e._v(" "),a("li",[e._v("A tuple ("),a("code",[e._v("features, labels")]),e._v("): Where "),a("code",[e._v("features")]),e._v(" is a "),a("code",[e._v("tf.Tensor")]),e._v(" or a dictionary of string feature name to "),a("code",[e._v("Tensor")]),e._v(" and "),a("code",[e._v("labels")]),e._v(" is a "),a("code",[e._v("Tensor")]),e._v(" or a dictionary of string label name to "),a("code",[e._v("Tensor")]),e._v(". Both "),a("code",[e._v("features")]),e._v(" and "),a("code",[e._v("labels")]),e._v(" are consumed by "),a("code",[e._v("model_fn")]),e._v(". They should satisfy the expectation of "),a("code",[e._v("model_fn")]),e._v(" from inputs.")]),e._v(" "),a("li",[a("code",[e._v("hooks")]),e._v(": List of "),a("code",[e._v("tf.train.SessionRunHook")]),e._v(" subclass instances. Used for callbacks inside the training loop.")]),e._v(" "),a("li",[a("code",[e._v("steps")]),e._v(": Number of "),a("code",[e._v("steps")]),e._v(" for which to train the model. If "),a("code",[e._v("None")]),e._v(", train forever or train until "),a("code",[e._v("input_fn")]),e._v(" generates the "),a("code",[e._v("tf.errors.OutOfRange")]),e._v(" error or "),a("code",[e._v("StopIteration")]),e._v(" exception. "),a("code",[e._v("steps")]),e._v(" works incrementally. If you call two times train("),a("code",[e._v("steps")]),e._v("=10) then training occurs in total 20 "),a("code",[e._v("steps")]),e._v(". If "),a("code",[e._v("OutOfRange")]),e._v(" or "),a("code",[e._v("StopIteration")]),e._v(" occurs in the middle, training stops before 20 "),a("code",[e._v("steps")]),e._v(". If you don't want to have incremental behavior please set "),a("code",[e._v("max_steps")]),e._v(" instead. If set, "),a("code",[e._v("max_steps")]),e._v(" must be "),a("code",[e._v("None")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("max_steps")]),e._v(": Number of total "),a("code",[e._v("steps")]),e._v(" for which to train model. If "),a("code",[e._v("None")]),e._v(", train forever or train until "),a("code",[e._v("input_fn")]),e._v(" generates the "),a("code",[e._v("tf.errors.OutOfRange")]),e._v(" error or "),a("code",[e._v("StopIteration")]),e._v(" exception. If set, "),a("code",[e._v("steps")]),e._v(" must be "),a("code",[e._v("None")]),e._v(". If "),a("code",[e._v("OutOfRange")]),e._v(" or "),a("code",[e._v("StopIteration")]),e._v(" occurs in the middle, training stops before "),a("code",[e._v("max_steps")]),e._v(" "),a("code",[e._v("steps")]),e._v(". Two calls to train("),a("code",[e._v("steps")]),e._v("=100) means 200 training iterations. On the other hand, two calls to train("),a("code",[e._v("max_steps")]),e._v("=100) means that the second call will not do any iteration since first call did all 100 "),a("code",[e._v("steps")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("saving_listeners")]),e._v(": list of "),a("code",[e._v("CheckpointSaverListener")]),e._v(" objects. Used for callbacks that run immediately before or after checkpoint savings.")])]),e._v(" "),a("h4",{attrs:{id:"returns-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-10","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("self, for chaining.")]),e._v(" "),a("h4",{attrs:{id:"raises-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If both "),a("code",[e._v("steps")]),e._v(" and "),a("code",[e._v("max_steps")]),e._v(" are not "),a("code",[e._v("None")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": If either "),a("code",[e._v("steps")]),e._v(" or "),a("code",[e._v("max_steps")]),e._v(" <= 0.")])])])}),[],!1,null,null,null);t.default=s.exports}}]);