(window.webpackJsonp=window.webpackJsonp||[]).push([[2349],{2537:function(e,s,r){"use strict";r.r(s);var a=r(0),t=Object(a.a)({},(function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Computes the sum of elements across dimensions of a SparseTensor.")]),e._v(" "),r("h3",{attrs:{id:"aliases"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("tf.compat.v2.sparse.reduce_sum")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" tf.sparse.reduce_sum(\n    sp_input,\n    axis=None,\n    keepdims=None,\n    output_is_sparse=False,\n    name=None\n)\n")])])]),r("p",[r("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/math/reduce_sum",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.reduce_sum()"),r("OutboundLink")],1),e._v("This Op takes a SparseTensor and is the sparse counterpart to . In particular, this Op also returns a dense Tensor if output_is_sparse is False, or a SparseTensor if output_is_sparse is True.")]),e._v(" "),r("p",[e._v("Reduces sp_input along the dimensions given in axis. Unless keepdims is true, the rank of the tensor is reduced by 1 for each entry in axis. If keepdims is true, the reduced dimensions are retained with length 1.")]),e._v(" "),r("p",[e._v("If axis has no entries, all dimensions are reduced, and a tensor with a single element is returned. Additionally, the axes can be negative, similar to the indexing rules in Python.")]),e._v(" "),r("h4",{attrs:{id:"for-example"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" # 'x' represents [[1, ?, 1]\n#                 [?, 1, ?]]\n# where ? is implicitly-zero.\ntf.sparse.reduce_sum(x) ==> 3\ntf.sparse.reduce_sum(x, 0) ==> [1, 1, 1]\ntf.sparse.reduce_sum(x, 1) ==> [2, 1]  # Can also use -1 as the axis.\ntf.sparse.reduce_sum(x, 1, keepdims=True) ==> [[2], [1]]\ntf.sparse.reduce_sum(x, [0, 1]) ==> 3\n")])])]),r("h4",{attrs:{id:"args"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("sp_input")]),e._v(": The SparseTensor to reduce. Should have numeric type.")]),e._v(" "),r("li",[r("code",[e._v("axis")]),e._v(": The dimensions to reduce; list or scalar. If "),r("code",[e._v("None")]),e._v(" (the default), reduces all dimensions.")]),e._v(" "),r("li",[r("code",[e._v("keepdims")]),e._v(": If true, retain reduced dimensions with length 1.")]),e._v(" "),r("li",[r("code",[e._v("output_is_sparse")]),e._v(": If true, returns a "),r("code",[e._v("SparseTensor")]),e._v(" instead of a dense "),r("code",[e._v("Tensor")]),e._v(" (the default).")]),e._v(" "),r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),r("h4",{attrs:{id:"returns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("The reduced Tensor or the reduced SparseTensor if output_is_sparse is True.")])])}),[],!1,null,null,null);s.default=t.exports}}]);