(window.webpackJsonp=window.webpackJsonp||[]).push([[703],{891:function(e,t,n){"use strict";n.r(t);var o=n(0),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Wraps a python function and uses it as a TensorFlow op.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.compat.v1.py_func(\n    func,\n    inp,\n    Tout,\n    stateful=True,\n    name=None\n)\n")])])]),n("p",[e._v("Given a python function func, which takes numpy arrays as its arguments and returns numpy arrays as its outputs, wrap this function as an operation in a TensorFlow graph. The following snippet constructs a simple TensorFlow graph that invokes the np.sinh() NumPy function as a operation in the graph:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" def my_func(x):\n  # x will be a numpy array with the contents of the placeholder below\n  return np.sinh(x)\ninput = tf.compat.v1.placeholder(tf.float32)\ny = tf.compat.v1.py_func(my_func, [input], tf.float32)\n")])])]),n("p",[n("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/py_func",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.compat.v1.py_func()"),n("OutboundLink")],1),e._v("N.B. The  operation has the following known limitations:")]),e._v(" "),n("ul",[n("li",[e._v("The body of the "),n("code",[e._v("func")]),e._v("tion (i.e. "),n("code",[e._v("func")]),e._v(") will not be serialized in a "),n("code",[e._v("GraphDef")]),e._v(". Therefore, you should not use this "),n("code",[e._v("func")]),e._v("tion if you need to serialize your model and restore it in a different environment.")]),e._v(" "),n("li",[e._v("The operation must run in the same address space as the Python program that calls "),n("code",[e._v("tf.compat.v1.py_func")]),e._v("(). If you are using distributed TensorFlow, you must run a "),n("code",[e._v("tf.distribute.Server")]),e._v(" in the same process as the program that calls "),n("code",[e._v("tf.compat.v1.py_func")]),e._v("() and you must pin the created operation to a device in that server (e.g. using with tf.device()ðŸ˜ƒ.")])]),e._v(" "),n("h4",{attrs:{id:"args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("func")]),e._v(": A Python "),n("code",[e._v("func")]),e._v("tion, which accepts "),n("code",[e._v("ndarray")]),e._v(" objects as arguments and returns a list of "),n("code",[e._v("ndarray")]),e._v(" objects (or a single "),n("code",[e._v("ndarray")]),e._v("). This "),n("code",[e._v("func")]),e._v("tion must accept as many arguments as there are tensors in "),n("code",[e._v("inp")]),e._v(", and these argument types will match the corresponding "),n("code",[e._v("tf.Tensor")]),e._v(" objects in "),n("code",[e._v("inp")]),e._v(". The returns "),n("code",[e._v("ndarray")]),e._v("s must match the number and types defined "),n("code",[e._v("Tout")]),e._v(". Important Note: Input and output numpy "),n("code",[e._v("ndarray")]),e._v("s of "),n("code",[e._v("func")]),e._v(" are not guaranteed to be copies. In some cases their underlying memory will be shared with the corresponding TensorFlow tensors. In-place modification or storing "),n("code",[e._v("func")]),e._v(" "),n("code",[e._v("inp")]),e._v("ut or return values in python datastructures without explicit (np.)copy can have non-deterministic consequences.")]),e._v(" "),n("li",[n("code",[e._v("inp")]),e._v(": A list of "),n("code",[e._v("Tensor")]),e._v(" objects.")]),e._v(" "),n("li",[n("code",[e._v("Tout")]),e._v(": A list or tuple of tensorflow data types or a single tensorflow data type if there is only one, indicating what "),n("code",[e._v("func")]),e._v(" returns.")]),e._v(" "),n("li",[n("code",[e._v("stateful")]),e._v(": (Boolean.) If True, the "),n("code",[e._v("func")]),e._v("tion should be considered "),n("code",[e._v("stateful")]),e._v(". If a "),n("code",[e._v("func")]),e._v("tion is stateless, when given the same "),n("code",[e._v("inp")]),e._v("ut it will return the same output and have no observable side effects. Optimizations such as common subexpression elimination are only performed on stateless operations.")]),e._v(" "),n("li",[n("code",[e._v("name")]),e._v(": A "),n("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),n("h4",{attrs:{id:"returns"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),n("p",[e._v("A list of Tensor or a single Tensor which func computes.")])])}),[],!1,null,null,null);t.default=a.exports}}]);