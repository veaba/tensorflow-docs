(window.webpackJsonp=window.webpackJsonp||[]).push([[1355],{1546:function(e,a,t){"use strict";t.r(a);var n=t(0),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Returns the Peak Signal-to-Noise Ratio between a and b.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.image.psnr")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.image.psnr")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.image.psnr(\n    a,\n    b,\n    max_val,\n    name=None\n)\n")])])]),t("p",[e._v("This is intended to be used on signals (or images). Produces a PSNR value for each image in batch.")]),e._v(" "),t("p",[e._v("The last three dimensions of input are expected to be [height, width, depth].")]),e._v(" "),t("h4",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("     # Read images from file.\n    im1 = tf.decode_png('path/to/im1.png')\n    im2 = tf.decode_png('path/to/im2.png')\n    # Compute PSNR over tf.uint8 Tensors.\n    psnr1 = tf.image.psnr(im1, im2, max_val=255)\n\n    # Compute PSNR over tf.float32 Tensors.\n    im1 = tf.image.convert_image_dtype(im1, tf.float32)\n    im2 = tf.image.convert_image_dtype(im2, tf.float32)\n    psnr2 = tf.image.psnr(im1, im2, max_val=1.0)\n    # psnr1 and psnr2 both have type tf.float32 and are almost equal.\n")])])]),t("h4",{attrs:{id:"arguments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("a")]),e._v(": First set of im"),t("code",[e._v("a")]),e._v("ges.")]),e._v(" "),t("li",[t("code",[e._v("b")]),e._v(": Second set of im"),t("code",[e._v("a")]),e._v("ges.")]),e._v(" "),t("li",[t("code",[e._v("max_val")]),e._v(": The dyn"),t("code",[e._v("a")]),e._v("mic r"),t("code",[e._v("a")]),e._v("nge of the im"),t("code",[e._v("a")]),e._v("ges (i.e., the difference "),t("code",[e._v("b")]),e._v("etween the m"),t("code",[e._v("a")]),e._v("ximum the "),t("code",[e._v("a")]),e._v("nd minimum "),t("code",[e._v("a")]),e._v("llowed v"),t("code",[e._v("a")]),e._v("lues).")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": N"),t("code",[e._v("a")]),e._v("mesp"),t("code",[e._v("a")]),e._v("ce to em"),t("code",[e._v("b")]),e._v("ed the comput"),t("code",[e._v("a")]),e._v("tion in.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf#float32",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.float32"),t("OutboundLink")],1),e._v("The scalar PSNR between a and b. The returned tensor has type  and shape [batch_size, 1].")])])}),[],!1,null,null,null);a.default=s.exports}}]);