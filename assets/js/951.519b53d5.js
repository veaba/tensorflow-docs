(window.webpackJsonp=window.webpackJsonp||[]).push([[951],{1138:function(e,t,n){"use strict";n.r(t);var a=n(0),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Wraps the TF 1.x function fn into a graph function.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.compat.v1.wrap_function(\n    fn,\n    signature,\n    name=None\n)\n")])])]),n("h3",{attrs:{id:"used-in-the-guide"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("M")]),e._v("i"),n("code",[e._v("g")]),e._v("r"),n("code",[e._v("a")]),e._v("t"),n("code",[e._v("e")]),e._v(" "),n("code",[e._v("y")]),e._v("o"),n("code",[e._v("u")]),e._v("r"),n("code"),e._v("T"),n("code",[e._v("e")]),e._v("n"),n("code",[e._v("s")]),e._v("o"),n("code",[e._v("r")]),e._v("F"),n("code",[e._v("l")]),e._v("o"),n("code",[e._v("w")]),e._v(" "),n("code",[e._v("1")]),e._v(" "),n("code",[e._v("c")]),e._v("o"),n("code",[e._v("d")]),e._v("e"),n("code"),e._v("t"),n("code",[e._v("o")]),e._v(" "),n("code",[e._v("T")]),e._v("e"),n("code",[e._v("n")]),e._v("s"),n("code",[e._v("o")]),e._v("r"),n("code",[e._v("F")]),e._v("l"),n("code",[e._v("o")]),e._v("w"),n("code"),e._v("2``")])]),e._v(" "),n("p",[e._v("The python function fn will be called once with symbolic arguments specified in the signature, traced, and turned into a graph function. Any variables created by fn will be owned by the object returned by wrap_function. The resulting graph function can be called with tensors which match the signature.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" def f(x, do_add):\n  v = tf.Variable(5.0)\n  if do_add:\n    op = v.assign_add(x)\n  else:\n    op = v.assign_sub(x)\n  with tf.control_dependencies([op]):\n    return v.read_value()\n\nf_add = tf.compat.v1.wrap_function(f, [tf.TensorSpec((), tf.float32), True])\n\nassert float(f_add(1.0)) == 6.0\nassert float(f_add(1.0)) == 7.0\n\n# Can call tf.compat.v1.wrap_function again to get a new trace, a new set\n# of variables, and possibly different non-template arguments.\nf_sub= tf.compat.v1.wrap_function(f, [tf.TensorSpec((), tf.float32), False])\n\nassert float(f_sub(1.0)) == 4.0\nassert float(f_sub(1.0)) == 3.0\n")])])]),n("p",[n("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/wrap_function",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.compat.v1.wrap_function"),n("OutboundLink")],1),e._v("Both  and tf.function create a callable TensorFlow graph. But while tf.function runs all stateful operations (e.g. tf.print) and sequences operations to provide the same semantics as eager execution, wrap_function is closer to the behavior of session.run in TensorFlow 1.x. It will not run any operations unless they are required to compute the function's outputs, either through a data dependency or a control dependency. Nor will it sequence operations.")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/function",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.function"),n("OutboundLink")],1),e._v("Unlike , wrap_function will only trace the Python function once. As with placeholders in TF 1.x, shapes and dtypes must be provided to wrap_function's signature argument.")]),e._v(" "),n("p",[e._v("Since it is only traced once, variables and state may be created inside the function and owned by the function wrapper object.")]),e._v(" "),n("h4",{attrs:{id:"args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("fn")]),e._v(": python function to be wrapped")]),e._v(" "),n("li",[n("code",[e._v("signature")]),e._v(": the placeholder and python arguments to be passed to the wrapped function")]),e._v(" "),n("li",[n("code",[e._v("name")]),e._v(": Optional. The "),n("code",[e._v("name")]),e._v(" of the function.")])]),e._v(" "),n("h4",{attrs:{id:"returns"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),n("p",[e._v("the wrapped graph function.")])])}),[],!1,null,null,null);t.default=o.exports}}]);