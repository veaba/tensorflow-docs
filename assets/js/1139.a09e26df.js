(window.webpackJsonp=window.webpackJsonp||[]).push([[1139],{1328:function(a,e,t){"use strict";t.r(e);var n=t(0),s=Object(n.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("Splits elements of a dataset into multiple elements on the batch dimension. (deprecated)")]),a._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[a._v("#")]),a._v(" Aliases:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("tf.compat.v1.data.experimental.unbatch")])]),a._v(" "),t("li",[t("code",[a._v("tf.compat.v2.data.experimental.unbatch")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" tf.data.experimental.unbatch()\n")])])]),t("p",[a._v("For example, if elements of the dataset are shaped [B, a0, a1, ...], where B may vary for each input element, then for each element in the dataset, the unbatched dataset will contain B consecutive elements of shape [a0, a1, ...].")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" # NOTE: The following example uses `{ ... }` to represent the contents\n# of a dataset.\na = { ['a', 'b', 'c'], ['a', 'b'], ['a', 'b', 'c', 'd'] }\n\na.apply(tf.data.experimental.unbatch()) == {\n    'a', 'b', 'c', 'a', 'b', 'a', 'b', 'c', 'd'}\n")])])]),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[a._v("#")]),a._v(" Returns:")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/data/Dataset#apply",target:"_blank",rel:"noopener noreferrer"}},[a._v("tf.data.Dataset.apply"),t("OutboundLink")],1),a._v("A Dataset transformation function, which can be passed to .")])])}),[],!1,null,null,null);e.default=s.exports}}]);