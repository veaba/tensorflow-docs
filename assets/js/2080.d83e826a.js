(window.webpackJsonp=window.webpackJsonp||[]).push([[2080],{2268:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Compute the cumulative product of the tensor x along axis.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.cumprod")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v1.math.cumprod")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.math.cumprod")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.math.cumprod(\n    x,\n    axis=0,\n    exclusive=False,\n    reverse=False,\n    name=None\n)\n")])])]),a("p",[e._v("By default, this op performs an inclusive cumprod, which means that the first element of the input is identical to the first element of the output:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.math.cumprod([a, b, c])  # [a, a * b, a * b * c]\n")])])]),a("p",[e._v("By setting the exclusive kwarg to True, an exclusive cumprod is performed instead:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.math.cumprod([a, b, c], exclusive=True)  # [1, a, a * b]\n")])])]),a("p",[e._v("By setting the reverse kwarg to True, the cumprod is performed in the opposite direction:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.math.cumprod([a, b, c], reverse=True)  # [a * b * c, b * c, c]\n")])])]),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/reverse",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.reverse"),a("OutboundLink")],1),e._v("This is more efficient than using separate  ops. The reverse and exclusive kwargs can also be combined:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.math.cumprod([a, b, c], exclusive=True, reverse=True)  # [b * c, c, 1]\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("x")]),e._v(": A "),a("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),a("code",[e._v("float32")]),e._v(", "),a("code",[e._v("float64")]),e._v(", "),a("code",[e._v("int64")]),e._v(", "),a("code",[e._v("int32")]),e._v(", "),a("code",[e._v("uint8")]),e._v(", "),a("code",[e._v("uint16")]),e._v(", "),a("code",[e._v("int16")]),e._v(", "),a("code",[e._v("int8")]),e._v(", "),a("code",[e._v("complex64")]),e._v(", "),a("code",[e._v("complex128")]),e._v(", "),a("code",[e._v("qint8")]),e._v(", "),a("code",[e._v("quint8")]),e._v(", "),a("code",[e._v("qint32")]),e._v(", "),a("code",[e._v("half")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A Tensor. Has the same type as x.")])])}),[],!1,null,null,null);t.default=r.exports}}]);