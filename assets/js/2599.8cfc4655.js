(window.webpackJsonp=window.webpackJsonp||[]).push([[2599],{2790:function(e,t,s){"use strict";s.r(t);var a=s(0),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Defined in generated file: "),s("code",[e._v("python/ops/gen_array_ops.py")]),e._v("\nSubtracts sparse "),s("code",[e._v("updates")]),e._v(" from an existing tensor according to "),s("code",[e._v("indices")]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("tf.compat.v1.tensor_scatter_nd_sub")])]),e._v(" "),s("li",[s("code",[e._v("tf.compat.v1.tensor_scatter_sub")])]),e._v(" "),s("li",[s("code",[e._v("tf.compat.v2.tensor_scatter_nd_sub")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.tensor_scatter_nd_sub(\n    tensor,\n    indices,\n    updates,\n    name=None\n)\n")])])]),s("p",[e._v("This operation creates a new "),s("code",[e._v("tensor")]),e._v(" by subtracting sparse "),s("code",[e._v("updates")]),e._v(" from the passed in "),s("code",[e._v("tensor")]),e._v(". This operation is very similar to "),s("code",[e._v("tf.scatter_nd_sub")]),e._v(", except that the "),s("code",[e._v("updates")]),e._v(" are subtracted from an existing "),s("code",[e._v("tensor")]),e._v(" (as opposed to a variable). If the memory for the existing "),s("code",[e._v("tensor")]),e._v(" cannot be re-used, a copy is made and updated.\n"),s("code",[e._v("indices")]),e._v(" is an integer tensor containing "),s("code",[e._v("indices")]),e._v(" into a new tensor of "),s("code",[e._v("shape")]),e._v(" "),s("code",[e._v("shape")]),e._v(". The last dimension of "),s("code",[e._v("indices")]),e._v(" can be at most the rank of "),s("code",[e._v("shape")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" indices.shape[-1] <= shape.rank\n")])])]),s("p",[e._v("The last dimension of "),s("code",[e._v("indices")]),e._v(" corresponds to "),s("code",[e._v("indices")]),e._v(" into elements (if "),s("code",[e._v("indices")]),e._v("."),s("code",[e._v("shape")]),e._v("[-1] = "),s("code",[e._v("shape")]),e._v(".rank) or slices (if "),s("code",[e._v("indices")]),e._v("."),s("code",[e._v("shape")]),e._v("[-1] < "),s("code",[e._v("shape")]),e._v(".rank) along dimension "),s("code",[e._v("indices")]),e._v("."),s("code",[e._v("shape")]),e._v("[-1] of "),s("code",[e._v("shape")]),e._v(". "),s("code",[e._v("updates")]),e._v(" is a tensor with "),s("code",[e._v("shape")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" indices.shape[:-1] + shape[indices.shape[-1]:]\n")])])]),s("p",[e._v("The simplest form of tensor_scatter_sub is to subtract individual elements from a tensor by index. For example, say we want to insert 4 scattered elements in a rank-1 tensor with 8 elements.\nIn Python, this scatter subtract operation would look like this:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("     indices = tf.constant([[4], [3], [1], [7]])\n    updates = tf.constant([9, 10, 11, 12])\n    tensor = tf.ones([8], dtype=tf.int32)\n    updated = tf.tensor_scatter_sub(tensor, indices, updates)\n    with tf.Session() as sess:\n      print(sess.run(scatter))\n")])])]),s("p",[e._v("The resulting tensor would look like this:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" [1, -10, 1, -9, -8, 1, 1, -11]\n")])])]),s("p",[e._v("We can also, insert entire slices of a higher rank tensor all at once. For example, if we wanted to insert two slices in the first dimension of a rank-3 tensor with two matrices of new values.\nIn Python, this scatter add operation would look like this:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("     indices = tf.constant([[0], [2]])\n    updates = tf.constant([[[5, 5, 5, 5], [6, 6, 6, 6],\n                            [7, 7, 7, 7], [8, 8, 8, 8]],\n                           [[5, 5, 5, 5], [6, 6, 6, 6],\n                            [7, 7, 7, 7], [8, 8, 8, 8]]])\n    tensor = tf.ones([4, 4, 4])\n    updated = tf.tensor_scatter_sub(tensor, indices, updates)\n    with tf.Session() as sess:\n      print(sess.run(scatter))\n")])])]),s("p",[e._v("The resulting tensor would look like this:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" [[[-4, -4, -4, -4], [-5, -5, -5, -5], [-6, -6, -6, -6], [-7, -7, -7, -7]],\n [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]],\n [[-4, -4, -4, -4], [-5, -5, -5, -5], [-6, -6, -6, -6], [-7, -7, -7, -7]],\n [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]]\n")])])]),s("p",[e._v("Note that on CPU, if an out of bound index is found, an error is returned. On GPU, if an out of bound index is found, the index is ignored.")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("tensor")]),e._v(": A "),s("code",[e._v("Tensor")]),e._v(". "),s("code",[e._v("Tensor")]),e._v(" to copy/update.")]),e._v(" "),s("li",[s("code",[e._v("indices")]),e._v(": A "),s("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),s("code",[e._v("int32")]),e._v(", "),s("code",[e._v("int64")]),e._v(". Index "),s("code",[e._v("tensor")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("updates")]),e._v(": A "),s("code",[e._v("Tensor")]),e._v(". Must have the same type as "),s("code",[e._v("tensor")]),e._v(". Updates to scatter into output.")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(": A "),s("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A "),s("code",[e._v("Tensor")]),e._v(". Has the same type as "),s("code",[e._v("tensor")]),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);