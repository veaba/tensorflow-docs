(window.webpackJsonp=window.webpackJsonp||[]).push([[1906],{2097:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"class-optimizer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-optimizer","aria-hidden":"true"}},[e._v("#")]),e._v(" Class Optimizer")]),e._v(" "),a("p",[e._v("Updated base class for optimizers.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[e._v("Class "),a("code",[e._v("tf.compat.v1.keras.optimizers.Optimizer")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.compat.v2.keras.optimizers.Optimizer")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.compat.v2.optimizers.Optimizer")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.optimizers.Optimizer")]),e._v(" "),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/SGD",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.keras.optimizers.SGD"),a("OutboundLink")],1),e._v("This class defines the API to add Ops to train a model. You never use this class directly, but instead instantiate one of its subclasses such as , tf.keras.optimizers.Adam.")])]),e._v(" "),a("h3",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage","aria-hidden":"true"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" # Create an optimizer with the desired parameters.\nopt = tf.keras.optimizers.SGD(learning_rate=0.1)\n# `loss` is a callable that takes no argument and returns the value\n# to minimize.\nloss = lambda: 3 * var1 * var1 + 2 * var2 * var2\n# In graph mode, returns op that minimizes the loss by updating the listed\n# variables.\nopt_op = opt.minimize(loss, var_list=[var1, var2])\nopt_op.run()\n# In eager mode, simply call minimize to update the list of variables.\nopt.minimize(loss, var_list=[var1, var2])\n")])])]),a("h3",{attrs:{id:"custom-training-loop-with-keras-models"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#custom-training-loop-with-keras-models","aria-hidden":"true"}},[e._v("#")]),e._v(" Custom training loop with Keras models")]),e._v(" "),a("p",[e._v("In Keras models, sometimes variables are created when the model is first called, instead of construction time. Examples include 1) sequential models without input shape pre-defined, or 2) subclassed models. Pass var_list as callable in these cases.")]),e._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" opt = tf.keras.optimizers.SGD(learning_rate=0.1)\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(num_hidden, activation='relu'))\nmodel.add(tf.keras.layers.Dense(num_classes, activation='sigmoid'))\nloss_fn = lambda: tf.keras.losses.mse(model(input), output)\nvar_list_fn = lambda: model.trainable_weights\nfor input, output in data:\n  opt.minimize(loss_fn, var_list_fn)\n")])])]),a("h3",{attrs:{id:"processing-gradients-before-applying-them"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#processing-gradients-before-applying-them","aria-hidden":"true"}},[e._v("#")]),e._v(" Processing gradients before applying them.")]),e._v(" "),a("p",[e._v("Calling minimize() takes care of both computing the gradients and applying them to the variables. If you want to process the gradients before applying them you can instead use the optimizer in three steps:")]),e._v(" "),a("h4",{attrs:{id:"example-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" # Create an optimizer.\nopt = tf.keras.optimizers.SGD(learning_rate=0.1)\n\n# Compute the gradients for a list of variables.\nwith tf.GradientTape() as tape:\n  loss = <call_loss_function>\nvars = <list_of_variables>\ngrads = tape.gradient(loss, vars)\nprocessed_grads = [process_gradient(g) for g in grads]\ngrads_and_vars = zip(processed_grads, var_list)\n\n# grads_and_vars is a list of tuples (gradient, variable).  Do whatever you\n# need to the 'gradient' part, for example cap them, etc.\ncapped_grads_and_vars = [(MyCapper(gv[0]), gv[1]) for gv in grads_and_vars]\n\n# Ask the optimizer to apply the capped gradients.\nopt.apply_gradients(capped_grads_and_vars)\n")])])]),a("h3",{attrs:{id:"use-with-tf-distribute-strategy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-with-tf-distribute-strategy","aria-hidden":"true"}},[e._v("#")]),e._v(" Use with tf.distribute.Strategy.")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/distribute/Strategy",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.distribute.Strategy"),a("OutboundLink")],1),e._v("This optimizer class is  aware, which means it automatically sums gradients across all replicas. To average gradients, you divide your loss by the global batch size, which is done automatically if you use tf.keras built-in training or evaluation loops. See the reduction argument of your loss which should be set to tf.keras.losses.Reduction.SUM_OVER_BATCH_SIZE for averaging or tf.keras.losses.Reduction.SUM for not.")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/math/reduce_sum",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.math.reduce_sum"),a("OutboundLink")],1),e._v("If you are not using these and you want to average gradients, you should use  to add up your per-example losses and then divide by the global batch size. Note that when using tf.distribute.Strategy, the first component of a tensor's shape is the replica-local batch size, which is off by a factor equal to the number of replicas being used to compute a single step. As a result, using tf.math.reduce_mean will give the wrong answer, resulting in gradients that can be many times too big.")]),e._v(" "),a("h3",{attrs:{id:"variable-constraint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variable-constraint","aria-hidden":"true"}},[e._v("#")]),e._v(" Variable Constraint")]),e._v(" "),a("p",[e._v("All Keras optimizers respect variable constraints. If constraint function is passed to any variable, the constraint will be applied to the variable after the gradient has been applied to the variable. Important: If gradient is sparse tensor, variable constraint is not supported.")]),e._v(" "),a("h3",{attrs:{id:"thread-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thread-compatibility","aria-hidden":"true"}},[e._v("#")]),e._v(" Thread Compatibility")]),e._v(" "),a("p",[e._v("The entire optimizer is currently thread compatible, not thread-safe. The user needs to perform synchronization if necessary.")]),e._v(" "),a("h3",{attrs:{id:"slots"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slots","aria-hidden":"true"}},[e._v("#")]),e._v(" Slots")]),e._v(" "),a("p",[e._v("Many optimizer subclasses, such as Adam and Adagrad allocate and manage additional variables associated with the variables to train. These are called Slots. Slots have names and you can ask the optimizer for the names of the slots that it uses. Once you have a slot name you can ask the optimizer for the variable it created to hold the slot value.")]),e._v(" "),a("p",[e._v("This can be useful if you want to log debug a training algorithm, report stats about the slots, etc.")]),e._v(" "),a("h3",{attrs:{id:"hyper-parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hyper-parameters","aria-hidden":"true"}},[e._v("#")]),e._v(" Hyper parameters")]),e._v(" "),a("p",[e._v("These are arguments passed to the optimizer subclass constructor (the "),a("strong",[e._v("init")]),e._v(" method), and then passed to self._set_hyper(). They can be either regular Python values (like 1.0), tensors, or callables. If they are callable, the callable will be called during apply_gradients() to get the value for the hyper parameter.")]),e._v(" "),a("p",[e._v("Hyper parameters can be overwritten through user code:")]),e._v(" "),a("h4",{attrs:{id:"example-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" # Create an optimizer with the desired parameters.\nopt = tf.keras.optimizers.SGD(learning_rate=0.1)\n# `loss` is a callable that takes no argument and returns the value\n# to minimize.\nloss = lambda: 3 * var1 + 2 * var2\n# In eager mode, simply call minimize to update the list of variables.\nopt.minimize(loss, var_list=[var1, var2])\n# update learning rate\nopt.learning_rate = 0.05\nopt.minimize(loss, var_list=[var1, var2])\n")])])]),a("h3",{attrs:{id:"write-a-customized-optimizer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#write-a-customized-optimizer","aria-hidden":"true"}},[e._v("#")]),e._v(" Write a customized optimizer.")]),e._v(" "),a("p",[e._v("If you intend to create your own optimization algorithm, simply inherit from this class and override the following methods:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("r")]),e._v("e"),a("code",[e._v("s")]),e._v("o"),a("code",[e._v("u")]),e._v("r"),a("code",[e._v("c")]),e._v("e"),a("code",[e._v("_")]),e._v("a"),a("code",[e._v("p")]),e._v("p"),a("code",[e._v("l")]),e._v("y"),a("code",[e._v("_")]),e._v("d"),a("code",[e._v("e")]),e._v("n"),a("code",[e._v("s")]),e._v("e"),a("code"),e._v("("),a("code",[e._v("u")]),e._v("p"),a("code",[e._v("d")]),e._v("a"),a("code",[e._v("t")]),e._v("e"),a("code"),e._v("v"),a("code",[e._v("a")]),e._v("r"),a("code",[e._v("i")]),e._v("a"),a("code",[e._v("b")]),e._v("l"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("g")]),e._v("i"),a("code",[e._v("v")]),e._v("e"),a("code",[e._v("n")]),e._v(" "),a("code",[e._v("g")]),e._v("r"),a("code",[e._v("a")]),e._v("d"),a("code",[e._v("i")]),e._v("e"),a("code",[e._v("n")]),e._v("t"),a("code"),e._v("t"),a("code",[e._v("e")]),e._v("n"),a("code",[e._v("s")]),e._v("o"),a("code",[e._v("r")]),e._v(" "),a("code",[e._v("i")]),e._v("s"),a("code"),e._v("d"),a("code",[e._v("e")]),e._v("n"),a("code",[e._v("s")]),e._v("e"),a("code",[e._v(")")])]),e._v(" "),a("li",[a("code",[e._v("r")]),e._v("e"),a("code",[e._v("s")]),e._v("o"),a("code",[e._v("u")]),e._v("r"),a("code",[e._v("c")]),e._v("e"),a("code",[e._v("_")]),e._v("a"),a("code",[e._v("p")]),e._v("p"),a("code",[e._v("l")]),e._v("y"),a("code",[e._v("_")]),e._v("s"),a("code",[e._v("p")]),e._v("a"),a("code",[e._v("r")]),e._v("s"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("(")]),e._v("u"),a("code",[e._v("p")]),e._v("d"),a("code",[e._v("a")]),e._v("t"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("v")]),e._v("a"),a("code",[e._v("r")]),e._v("i"),a("code",[e._v("a")]),e._v("b"),a("code",[e._v("l")]),e._v("e"),a("code"),e._v("g"),a("code",[e._v("i")]),e._v("v"),a("code",[e._v("e")]),e._v("n"),a("code"),e._v("g"),a("code",[e._v("r")]),e._v("a"),a("code",[e._v("d")]),e._v("i"),a("code",[e._v("e")]),e._v("n"),a("code",[e._v("t")]),e._v(" "),a("code",[e._v("t")]),e._v("e"),a("code",[e._v("n")]),e._v("s"),a("code",[e._v("o")]),e._v("r"),a("code"),e._v("i"),a("code",[e._v("s")]),e._v(" "),a("code",[e._v("s")]),e._v("p"),a("code",[e._v("a")]),e._v("r"),a("code",[e._v("s")]),e._v("e"),a("code",[e._v(")")])]),e._v(" "),a("li",[a("code",[e._v("c")]),e._v("r"),a("code",[e._v("e")]),e._v("a"),a("code",[e._v("t")]),e._v("e"),a("code",[e._v("_")]),e._v("s"),a("code",[e._v("l")]),e._v("o"),a("code",[e._v("t")]),e._v("s"),a("code"),e._v("("),a("code",[e._v("i")]),e._v("f"),a("code"),e._v("y"),a("code",[e._v("o")]),e._v("u"),a("code",[e._v("r")]),e._v(" "),a("code",[e._v("o")]),e._v("p"),a("code",[e._v("t")]),e._v("i"),a("code",[e._v("m")]),e._v("i"),a("code",[e._v("z")]),e._v("e"),a("code",[e._v("r")]),e._v(" "),a("code",[e._v("a")]),e._v("l"),a("code",[e._v("g")]),e._v("o"),a("code",[e._v("r")]),e._v("i"),a("code",[e._v("t")]),e._v("h"),a("code",[e._v("m")]),e._v(" "),a("code",[e._v("r")]),e._v("e"),a("code",[e._v("q")]),e._v("u"),a("code",[e._v("i")]),e._v("r"),a("code",[e._v("e")]),e._v("s"),a("code"),e._v("a"),a("code",[e._v("d")]),e._v("d"),a("code",[e._v("i")]),e._v("t"),a("code",[e._v("i")]),e._v("o"),a("code",[e._v("n")]),e._v("a"),a("code",[e._v("l")]),e._v(" "),a("code",[e._v("v")]),e._v("a"),a("code",[e._v("r")]),e._v("i"),a("code",[e._v("a")]),e._v("b"),a("code",[e._v("l")]),e._v("e"),a("code",[e._v("s")]),e._v(")``")]),e._v(" "),a("li",[a("code",[e._v("g")]),e._v("e"),a("code",[e._v("t")]),e._v("_"),a("code",[e._v("c")]),e._v("o"),a("code",[e._v("n")]),e._v("f"),a("code",[e._v("i")]),e._v("g"),a("code"),e._v("("),a("code",[e._v("s")]),e._v("e"),a("code",[e._v("r")]),e._v("i"),a("code",[e._v("a")]),e._v("l"),a("code",[e._v("i")]),e._v("z"),a("code",[e._v("a")]),e._v("t"),a("code",[e._v("i")]),e._v("o"),a("code",[e._v("n")]),e._v(" "),a("code",[e._v("o")]),e._v("f"),a("code"),e._v("t"),a("code",[e._v("h")]),e._v("e"),a("code"),e._v("o"),a("code",[e._v("p")]),e._v("t"),a("code",[e._v("i")]),e._v("m"),a("code",[e._v("i")]),e._v("z"),a("code",[e._v("e")]),e._v("r"),a("code",[e._v(",")]),e._v(" "),a("code",[e._v("i")]),e._v("n"),a("code",[e._v("c")]),e._v("l"),a("code",[e._v("u")]),e._v("d"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("a")]),e._v("l"),a("code",[e._v("l")]),e._v(" "),a("code",[e._v("h")]),e._v("y"),a("code",[e._v("p")]),e._v("e"),a("code",[e._v("r")]),e._v(" "),a("code",[e._v("p")]),e._v("a"),a("code",[e._v("r")]),e._v("a"),a("code",[e._v("m")]),e._v("e"),a("code",[e._v("t")]),e._v("e"),a("code",[e._v("r")]),e._v("s"),a("code",[e._v(")")])])]),e._v(" "),a("h2",{attrs:{id:"init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("strong",[e._v("init")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L228-L288",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" __init__(\n    name,\n    **kwargs\n)\n")])])]),a("p",[e._v("Create a new Optimizer.")]),e._v(" "),a("p",[e._v("This must be called by the constructors of subclasses. Note that Optimizer instances should not bind to a single graph, and so shouldn't keep Tensors as member variables. Generally you should be able to use the _set_hyper()/state.get_hyper() facility instead.")]),e._v(" "),a("p",[e._v("This class in stateful and thread-compatible.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")]),e._v(": A non-empty string. The "),a("code",[e._v("name")]),e._v(" to use for accumulators created for the optimizer.")])]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If name is malformed.")]),e._v(" "),a("li",[a("code",[e._v("RuntimeError")]),e._v(": If _create_slots has been overridden instead of _create_vars.")])]),e._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),a("h3",{attrs:{id:"iterations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterations","aria-hidden":"true"}},[e._v("#")]),e._v(" iterations")]),e._v(" "),a("p",[e._v("Variable. The number of training steps this Optimizer has run.")]),e._v(" "),a("h3",{attrs:{id:"weights"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weights","aria-hidden":"true"}},[e._v("#")]),e._v(" weights")]),e._v(" "),a("p",[e._v("Returns variables of this Optimizer based on the order created.")]),e._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),a("h3",{attrs:{id:"add-slot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-slot","aria-hidden":"true"}},[e._v("#")]),e._v(" add_slot")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L567-L594",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" add_slot(\n    var,\n    slot_name,\n    initializer='zeros'\n)\n")])])]),a("p",[e._v("Add a new slot variable for var.")]),e._v(" "),a("h3",{attrs:{id:"add-weight"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-weight","aria-hidden":"true"}},[e._v("#")]),e._v(" add_weight")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L768-L808",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" add_weight(\n    name,\n    shape,\n    dtype=None,\n    initializer='zeros',\n    trainable=None,\n    synchronization=tf.VariableSynchronization.AUTO,\n    aggregation=tf.compat.v1.VariableAggregation.NONE\n)\n")])])]),a("h3",{attrs:{id:"apply-gradients"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apply-gradients","aria-hidden":"true"}},[e._v("#")]),e._v(" apply_gradients")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L408-L441",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" apply_gradients(\n    grads_and_vars,\n    name=None\n)\n")])])]),a("p",[e._v("Apply gradients to variables.")]),e._v(" "),a("p",[e._v("This is the second part of minimize(). It returns an Operation that applies gradients.")]),e._v(" "),a("h4",{attrs:{id:"args-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("grads_and_vars")]),e._v(": List of (gradient, variable) pairs.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": Optional "),a("code",[e._v("name")]),e._v(" for the returned operation. Default to the "),a("code",[e._v("name")]),e._v(" passed to the "),a("code",[e._v("Optimizer")]),e._v(" constructor.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("An Operation that applies the specified gradients. If global_step was not None, that operation also increments global_step.")]),e._v(" "),a("h4",{attrs:{id:"raises-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TypeError")]),e._v(": If "),a("code",[e._v("grads_and_vars")]),e._v(" is malformed.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": If none of the variables have gradients.")])]),e._v(" "),a("h3",{attrs:{id:"from-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from-config","aria-hidden":"true"}},[e._v("#")]),e._v(" from_config")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L698-L721",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" @classmethod\nfrom_config(\n    cls,\n    config,\n    custom_objects=None\n)\n")])])]),a("p",[e._v("Creates an optimizer from its config.")]),e._v(" "),a("p",[e._v("This method is the reverse of get_config, capable of instantiating the same optimizer from the config dictionary.")]),e._v(" "),a("h4",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("config")]),e._v(": A Python dictionary, typically the output of get_"),a("code",[e._v("config")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("custom_objects")]),e._v(": A Python dictionary mapping names to additional Python objects used to create this optimizer, such as a function used for a hyperparameter.")])]),e._v(" "),a("h4",{attrs:{id:"returns-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("An optimizer instance.")]),e._v(" "),a("h3",{attrs:{id:"get-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-config","aria-hidden":"true"}},[e._v("#")]),e._v(" get_config")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L679-L696",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_config()\n")])])]),a("p",[e._v("Returns the config of the optimimizer.")]),e._v(" "),a("p",[e._v("An optimizer config is a Python dictionary (serializable) containing the configuration of an optimizer. The same optimizer can be reinstantiated later (without any saved state) from this configuration.")]),e._v(" "),a("h4",{attrs:{id:"returns-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Python dictionary.")]),e._v(" "),a("h3",{attrs:{id:"get-gradients"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-gradients","aria-hidden":"true"}},[e._v("#")]),e._v(" get_gradients")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L374-L406",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_gradients(\n    loss,\n    params\n)\n")])])]),a("p",[e._v("Returns gradients of loss with respect to params.")]),e._v(" "),a("h4",{attrs:{id:"arguments-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("loss")]),e._v(": Loss tensor.")]),e._v(" "),a("li",[a("code",[e._v("params")]),e._v(": List of variables.")])]),e._v(" "),a("h4",{attrs:{id:"returns-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("List of gradient tensors.")]),e._v(" "),a("h4",{attrs:{id:"raises-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": In case any gradient cannot be computed (e.g. if gradient function not implemented).")])]),e._v(" "),a("h3",{attrs:{id:"get-slot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-slot","aria-hidden":"true"}},[e._v("#")]),e._v(" get_slot")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L596-L599",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_slot(\n    var,\n    slot_name\n)\n")])])]),a("h3",{attrs:{id:"get-slot-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-slot-names","aria-hidden":"true"}},[e._v("#")]),e._v(" get_slot_names")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L563-L565",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_slot_names()\n")])])]),a("p",[e._v("A list of names for this optimizer's slots.")]),e._v(" "),a("h3",{attrs:{id:"get-updates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-updates","aria-hidden":"true"}},[e._v("#")]),e._v(" get_updates")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L499-L506",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_updates(\n    loss,\n    params\n)\n")])])]),a("h3",{attrs:{id:"get-weights"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-weights","aria-hidden":"true"}},[e._v("#")]),e._v(" get_weights")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L743-L745",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" get_weights()\n")])])]),a("h3",{attrs:{id:"minimize"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minimize","aria-hidden":"true"}},[e._v("#")]),e._v(" minimize")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L290-L319",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" minimize(\n    loss,\n    var_list,\n    grad_loss=None,\n    name=None\n)\n")])])]),a("p",[e._v("Minimize loss by updating var_list.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/GradientTape",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.GradientTape"),a("OutboundLink")],1),e._v("This method simply computes gradient using  and calls apply_gradients(). If you want to process the gradient before applying then call  and apply_gradients() explicitly instead of using this function.")]),e._v(" "),a("h4",{attrs:{id:"args-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("loss")]),e._v(": A callable taking no arguments which returns the value to minimize.")]),e._v(" "),a("li",[a("code",[e._v("var_list")]),e._v(": list or tuple of "),a("code",[e._v("Variable")]),e._v(" objects to update to "),a("code",[e._v("minimize")]),e._v(" "),a("code",[e._v("loss")]),e._v(", or a callable returning the list or tuple of "),a("code",[e._v("Variable")]),e._v(" objects. Use callable when the variable list would otherwise be incomplete before "),a("code",[e._v("minimize")]),e._v(" since the variables are created at the first time "),a("code",[e._v("loss")]),e._v(" is called.")]),e._v(" "),a("li",[a("code",[e._v("grad_loss")]),e._v(": Optional. A "),a("code",[e._v("Tensor")]),e._v(" holding the gradient computed for "),a("code",[e._v("loss")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": Optional "),a("code",[e._v("name")]),e._v(" for the returned operation.")])]),e._v(" "),a("h4",{attrs:{id:"returns-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("An Operation that updates the variables in var_list. If global_step was not None, that operation also increments global_step.")]),e._v(" "),a("h4",{attrs:{id:"raises-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If some of the variables are not "),a("code",[e._v("Variable")]),e._v(" objects.")])]),e._v(" "),a("h3",{attrs:{id:"set-weights"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-weights","aria-hidden":"true"}},[e._v("#")]),e._v(" set_weights")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L748-L766",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" set_weights(weights)\n")])])]),a("h3",{attrs:{id:"variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variables","aria-hidden":"true"}},[e._v("#")]),e._v(" variables")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/optimizer_v2/optimizer_v2.py#L734-L736",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" variables()\n")])])]),a("p",[e._v("Returns variables of this Optimizer based on the order created.")])])}),[],!1,null,null,null);t.default=s.exports}}]);