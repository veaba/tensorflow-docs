(window.webpackJsonp=window.webpackJsonp||[]).push([[1313],{1502:function(e,_,a){"use strict";a.r(_);var o=a(0),s=Object(o.a)({},(function(){var e=this,_=e.$createElement,a=e._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Returns a column for performing crosses of categorical features.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.feature_column.crossed_column")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.feature_column.crossed_column")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.feature_column.crossed_column(\n    keys,\n    hash_bucket_size,\n    hash_key=None\n)\n")])])]),a("h3",{attrs:{id:"used-in-the-tutorials"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("B")]),e._v("u"),a("code",[e._v("i")]),e._v("l"),a("code",[e._v("d")]),e._v(" "),a("code",[e._v("a")]),e._v(" "),a("code",[e._v("l")]),e._v("i"),a("code",[e._v("n")]),e._v("e"),a("code",[e._v("a")]),e._v("r"),a("code"),e._v("m"),a("code",[e._v("o")]),e._v("d"),a("code",[e._v("e")]),e._v("l"),a("code"),e._v("w"),a("code",[e._v("i")]),e._v("t"),a("code",[e._v("h")]),e._v(" "),a("code",[e._v("E")]),e._v("s"),a("code",[e._v("t")]),e._v("i"),a("code",[e._v("m")]),e._v("a"),a("code",[e._v("t")]),e._v("o"),a("code",[e._v("r")]),e._v("s``")]),e._v(" "),a("li",[a("code",[e._v("C")]),e._v("l"),a("code",[e._v("a")]),e._v("s"),a("code",[e._v("s")]),e._v("i"),a("code",[e._v("f")]),e._v("y"),a("code"),e._v("s"),a("code",[e._v("t")]),e._v("r"),a("code",[e._v("u")]),e._v("c"),a("code",[e._v("t")]),e._v("u"),a("code",[e._v("r")]),e._v("e"),a("code",[e._v("d")]),e._v(" "),a("code",[e._v("d")]),e._v("a"),a("code",[e._v("t")]),e._v("a"),a("code"),e._v("w"),a("code",[e._v("i")]),e._v("t"),a("code",[e._v("h")]),e._v(" "),a("code",[e._v("f")]),e._v("e"),a("code",[e._v("a")]),e._v("t"),a("code",[e._v("u")]),e._v("r"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("c")]),e._v("o"),a("code",[e._v("l")]),e._v("u"),a("code",[e._v("m")]),e._v("n"),a("code",[e._v("s")])])]),e._v(" "),a("p",[e._v("Crossed features will be hashed according to hash_bucket_size. Conceptually, the transformation can be thought of as: Hash(cartesian product of features) % hash_bucket_size")]),e._v(" "),a("p",[e._v("For example, if the input features are:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("S")]),e._v("p"),a("code",[e._v("a")]),e._v("r"),a("code",[e._v("s")]),e._v("e"),a("code",[e._v("T")]),e._v("e"),a("code",[e._v("n")]),e._v("s"),a("code",[e._v("o")]),e._v("r"),a("code"),e._v("r"),a("code",[e._v("e")]),e._v("f"),a("code",[e._v("e")]),e._v("r"),a("code",[e._v("r")]),e._v("e"),a("code",[e._v("d")]),e._v(" "),a("code",[e._v("b")]),e._v("y"),a("code"),e._v("f"),a("code",[e._v("i")]),e._v("r"),a("code",[e._v("s")]),e._v("t"),a("code"),e._v("k"),a("code",[e._v("e")]),e._v("y"),a("code",[e._v(":")])]),e._v(" "),a("li",[a("code",[e._v("S")]),e._v("p"),a("code",[e._v("a")]),e._v("r"),a("code",[e._v("s")]),e._v("e"),a("code",[e._v("T")]),e._v("e"),a("code",[e._v("n")]),e._v("s"),a("code",[e._v("o")]),e._v("r"),a("code"),e._v("r"),a("code",[e._v("e")]),e._v("f"),a("code",[e._v("e")]),e._v("r"),a("code",[e._v("r")]),e._v("e"),a("code",[e._v("d")]),e._v(" "),a("code",[e._v("b")]),e._v("y"),a("code"),e._v("s"),a("code",[e._v("e")]),e._v("c"),a("code",[e._v("o")]),e._v("n"),a("code",[e._v("d")]),e._v(" "),a("code",[e._v("k")]),e._v("e"),a("code",[e._v("y")]),e._v(":``")])]),e._v(" "),a("p",[e._v("then crossed feature will look like:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('  shape = [2, 2]\n{\n    [0, 0]: Hash64("d", Hash64("a")) % hash_bucket_size\n    [1, 0]: Hash64("e", Hash64("b")) % hash_bucket_size\n    [1, 1]: Hash64("e", Hash64("c")) % hash_bucket_size\n}\n')])])]),a("p",[e._v("Here is an example to create a linear model with crosses of string features:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" keywords_x_doc_terms = crossed_column(['keywords', 'doc_terms'], 50K)\ncolumns = [keywords_x_doc_terms, ...]\nfeatures = tf.io.parse_example(..., features=make_parse_example_spec(columns))\nlinear_prediction = linear_model(features, columns)\n")])])]),a("p",[e._v("You could also use vocabulary lookup before crossing:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" keywords = categorical_column_with_vocabulary_file(\n    'keywords', '/path/to/vocabulary/file', vocabulary_size=1K)\nkeywords_x_doc_terms = crossed_column([keywords, 'doc_terms'], 50K)\ncolumns = [keywords_x_doc_terms, ...]\nfeatures = tf.io.parse_example(..., features=make_parse_example_spec(columns))\nlinear_prediction = linear_model(features, columns)\n")])])]),a("p",[e._v("If an input feature is of numeric type, you can use categorical_column_with_identity, or bucketized_column, as in the example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" # vertical_id is an integer categorical feature.\nvertical_id = categorical_column_with_identity('vertical_id', 10K)\nprice = numeric_column('price')\n# bucketized_column converts numerical feature to a categorical one.\nbucketized_price = bucketized_column(price, boundaries=[...])\nvertical_id_x_price = crossed_column([vertical_id, bucketized_price], 50K)\ncolumns = [vertical_id_x_price, ...]\nfeatures = tf.io.parse_example(..., features=make_parse_example_spec(columns))\nlinear_prediction = linear_model(features, columns)\n")])])]),a("p",[e._v("To use crossed column in DNN model, you need to add it in an embedding column as in this example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" vertical_id_x_price = crossed_column([vertical_id, bucketized_price], 50K)\nvertical_id_x_price_embedded = embedding_column(vertical_id_x_price, 10)\ndense_tensor = input_layer(features, [vertical_id_x_price_embedded, ...])\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("keys")]),e._v(": An iterable identifying the features to be crossed. Each element can be either:\nstring: Will use the corresponding feature which must be of string type.\n"),a("code",[e._v("CategoricalColumn")]),e._v(": Will use the transformed tensor produced by this column. Does not support hashed categorical column.")]),e._v(" "),a("li",[e._v("string: Will use the corresponding feature which must be of string type.")]),e._v(" "),a("li",[a("code",[e._v("CategoricalColumn")]),e._v(": Will use the transformed tensor produced by this column. Does not support hashed categorical column.")]),e._v(" "),a("li",[a("code",[e._v("hash_bucket_size")]),e._v(": An int > 1. The number of buckets.")]),e._v(" "),a("li",[a("code",[e._v("hash_key")]),e._v(": Specify the "),a("code",[e._v("hash_key")]),e._v(" that will be used by the "),a("code",[e._v("FingerprintCat64")]),e._v(" function to combine the crosses fingerprints on SparseCrossOp (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A CrossedColumn.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If len(keys) < 2.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": If any of the keys is neither a string nor "),a("code",[e._v("CategoricalColumn")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": If any of the keys is "),a("code",[e._v("HashedCategoricalColumn")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": If "),a("code",[e._v("hash_bucket_size < 1")]),e._v(".")])])])}),[],!1,null,null,null);_.default=s.exports}}]);