(window.webpackJsonp=window.webpackJsonp||[]).push([[1836],{2027:function(e,s,t){"use strict";t.r(s);var i=t(0),a=Object(i.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Computes the cosine similarity between labels and predictions.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.keras.losses.cosine")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v1.keras.losses.cosine")]),e._v("_proximity")]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v1.keras.losses.cosine")]),e._v("_similarity")]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v1.keras.metrics.cosine")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v1.keras.metrics.cosine")]),e._v("_proximity")]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.keras.losses.cosine_similarity")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.losses.cosine_similarity")])]),e._v(" "),t("li",[t("code",[e._v("tf.losses.cosine_similarity")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.keras.losses.cosine_similarity(\n    y_true,\n    y_pred,\n    axis=-1\n)\n")])])]),t("p",[e._v("Note that it is a negative quantity between -1 and 0, where 0 indicates orthogonality and values closer to -1 indicate greater similarity. This makes it usable as a loss function in a setting where you try to maximize the proximity between predictions and targets.")]),e._v(" "),t("p",[e._v("loss = -sum(y_true * y_pred)")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("y_true")]),e._v(": Tensor of true targets.")]),e._v(" "),t("li",[t("code",[e._v("y_pred")]),e._v(": Tensor of predicted targets.")]),e._v(" "),t("li",[t("code",[e._v("axis")]),e._v(": Axis along which to determine similarity.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("Cosine similarity tensor.")])])}),[],!1,null,null,null);s.default=a.exports}}]);