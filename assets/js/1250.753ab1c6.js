(window.webpackJsonp=window.webpackJsonp||[]).push([[1250],{1438:function(e,t,s){"use strict";s.r(t);var a=s(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"class-head"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-head","aria-hidden":"true"}},[e._v("#")]),e._v(" Class Head")]),e._v(" "),s("p",[e._v("Interface for the head/top of a model.")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[e._v("Class "),s("code",[e._v("tf.compat.v1.estimator.Head")])]),e._v(" "),s("li",[e._v("Class "),s("code",[e._v("tf.compat.v2.estimator.Head")])])]),e._v(" "),s("p",[e._v("Head sits on top of the model network and handles computing the outputs of the network. Given logits (or output of a hidden layer), a Head knows how to compute predictions, loss, train_op, metrics and export outputs. It is meant to:")]),e._v(" "),s("h4",{attrs:{id:"common-usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#common-usage","aria-hidden":"true"}},[e._v("#")]),e._v(" Common usage:")]),e._v(" "),s("p",[e._v("Here is simplified model_fn to build a DNN regression model.")]),e._v(" "),s("h2",{attrs:{id:"properties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),s("h3",{attrs:{id:"logits-dimension"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logits-dimension","aria-hidden":"true"}},[e._v("#")]),e._v(" logits_dimension")]),e._v(" "),s("p",[e._v("Size of the last dimension of the logits Tensor.")]),e._v(" "),s("p",[e._v("Often is the number of classes, labels, or real values to be predicted. Typically, logits is of shape [batch_size, logits_dimension].")]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("The expected size of the logits tensor.")]),e._v(" "),s("h3",{attrs:{id:"loss-reduction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loss-reduction","aria-hidden":"true"}},[e._v("#")]),e._v(" loss_reduction")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/keras/losses/Reduction",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.losses.Reduction"),s("OutboundLink")],1),e._v("One of .")]),e._v(" "),s("p",[e._v("Describes how to reduce training loss over batch, such as mean or sum.")]),e._v(" "),s("h4",{attrs:{id:"returns-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("The type of loss reduction used in the head.")]),e._v(" "),s("h3",{attrs:{id:"name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#name","aria-hidden":"true"}},[e._v("#")]),e._v(" name")]),e._v(" "),s("p",[e._v("The name of this head.")]),e._v(" "),s("h4",{attrs:{id:"returns-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A string.")]),e._v(" "),s("h2",{attrs:{id:"methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),s("h3",{attrs:{id:"create-estimator-spec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-estimator-spec","aria-hidden":"true"}},[e._v("#")]),e._v(" create_estimator_spec")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/head/base_head.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" create_estimator_spec(\n    features,\n    mode,\n    logits,\n    labels=None,\n    optimizer=None,\n    trainable_variables=None,\n    train_op_fn=None,\n    update_ops=None,\n    regularization_losses=None\n)\n")])])]),s("p",[e._v("Returns EstimatorSpec that a model_fn can return.")]),e._v(" "),s("p",[e._v("It is recommended to pass all args via name.")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("features")]),e._v(": Input "),s("code",[e._v("dict")]),e._v(" mapping string feature names to "),s("code",[e._v("Tensor")]),e._v(" or "),s("code",[e._v("SparseTensor")]),e._v(" objects containing the values for that feature in a minibatch. Often to be used to fetch example-weight tensor.")]),e._v(" "),s("li",[s("code",[e._v("mode")]),e._v(": Estimator's "),s("code",[e._v("ModeKeys")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("logits")]),e._v(": Logits "),s("code",[e._v("Tensor")]),e._v(" to be used by the head.")]),e._v(" "),s("li",[s("code",[e._v("labels")]),e._v(": Labels "),s("code",[e._v("Tensor")]),e._v(", or "),s("code",[e._v("dict")]),e._v(" mapping string label names to "),s("code",[e._v("Tensor")]),e._v(" objects of the label values.")]),e._v(" "),s("li",[s("code",[e._v("optimizer")]),e._v(": An "),s("code",[e._v("tf.keras.optimizers.Optimizer")]),e._v(" instance to optimize the "),s("code",[e._v("loss")]),e._v(" in TRAIN "),s("code",[e._v("mode")]),e._v(". Namely, sets train_op = "),s("code",[e._v("optimizer")]),e._v(".get_updates("),s("code",[e._v("loss")]),e._v(", trainable_variables), which updates variables to minimize "),s("code",[e._v("loss")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("trainable_variables")]),e._v(": A list or tuple of "),s("code",[e._v("Variable")]),e._v(" objects to update to minimize "),s("code",[e._v("loss")]),e._v(". In "),s("code",[e._v("Tensor")]),e._v("flow 1.x, by default these are the list of variables collected in the graph under the key "),s("code",[e._v("GraphKeys.TRAINABLE_VARIABLES")]),e._v(". As "),s("code",[e._v("Tensor")]),e._v("flow 2.x doesn't have collections and GraphKeys, "),s("code",[e._v("trainable_variables")]),e._v(" need to be passed explicitly here.")]),e._v(" "),s("li",[s("code",[e._v("train_op_fn")]),e._v(": Function that takes a scalar "),s("code",[e._v("loss")]),e._v(" "),s("code",[e._v("Tensor")]),e._v(" and returns an op to optimize the "),s("code",[e._v("mode")]),e._v("l with the "),s("code",[e._v("loss")]),e._v(" in TRAIN "),s("code",[e._v("mode")]),e._v(". Used if "),s("code",[e._v("optimizer")]),e._v(" is "),s("code",[e._v("None")]),e._v(". Exactly one of "),s("code",[e._v("train_op_fn")]),e._v(" and "),s("code",[e._v("optimizer")]),e._v(" must be set in TRAIN "),s("code",[e._v("mode")]),e._v(". By default, it is "),s("code",[e._v("None")]),e._v(" in other "),s("code",[e._v("mode")]),e._v("s. If you want to optimize "),s("code",[e._v("loss")]),e._v(" yourself, you can pass "),s("code",[e._v("lambda _: tf.no_op")]),e._v("() and then use "),s("code",[e._v("EstimatorSpec.loss")]),e._v(" to compute and apply gradients.")]),e._v(" "),s("li",[s("code",[e._v("update_ops")]),e._v(": A list or tuple of update ops to be run at training time. For example, layers such as BatchNormalization create mean and variance update ops that need to be run at training time. In "),s("code",[e._v("Tensor")]),e._v("flow 1.x, these are thrown into an UPDATE_OPS collection. As "),s("code",[e._v("Tensor")]),e._v("flow 2.x doesn't have collections, "),s("code",[e._v("update_ops")]),e._v(" need to be passed explicitly here.")]),e._v(" "),s("li",[s("code",[e._v("regularization_losses")]),e._v(": A list of additional scalar "),s("code",[e._v("loss")]),e._v("es to be added to the training "),s("code",[e._v("loss")]),e._v(", such as regularization "),s("code",[e._v("loss")]),e._v("es.")])]),e._v(" "),s("h4",{attrs:{id:"returns-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("EstimatorSpec.")]),e._v(" "),s("h3",{attrs:{id:"loss"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loss","aria-hidden":"true"}},[e._v("#")]),e._v(" loss")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/head/base_head.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" loss(\n    labels,\n    logits,\n    features=None,\n    mode=None,\n    regularization_losses=None\n)\n")])])]),s("p",[e._v("Returns a loss Tensor from provided arguments.")]),e._v(" "),s("p",[e._v("Note that, the args of features and mode are most likely not used, but some Head implementations may require them.")]),e._v(" "),s("h4",{attrs:{id:"args-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("labels")]),e._v(": Labels "),s("code",[e._v("Tensor")]),e._v(", or "),s("code",[e._v("dict")]),e._v(" mapping string label names to "),s("code",[e._v("Tensor")]),e._v(" objects of the label values.")]),e._v(" "),s("li",[s("code",[e._v("logits")]),e._v(": Logits "),s("code",[e._v("Tensor")]),e._v(" to be used for loss construction.")]),e._v(" "),s("li",[s("code",[e._v("features")]),e._v(": Input "),s("code",[e._v("dict")]),e._v(" mapping string feature names to "),s("code",[e._v("Tensor")]),e._v(" or "),s("code",[e._v("SparseTensor")]),e._v(" objects containing the values for that feature in a minibatch. Often to be used to fetch example-weight tensor.")]),e._v(" "),s("li",[s("code",[e._v("mode")]),e._v(": Estimator's "),s("code",[e._v("ModeKeys")]),e._v(". To be used in case loss calculation is different in Train and Eval "),s("code",[e._v("mode")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("regularization_losses")]),e._v(": A list of additional scalar losses to be added to the training loss, such as regularization losses.")])]),e._v(" "),s("h4",{attrs:{id:"returns-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A scalar Tensor representing regularized training loss used in train and eval.")]),e._v(" "),s("h3",{attrs:{id:"metrics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#metrics","aria-hidden":"true"}},[e._v("#")]),e._v(" metrics")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/head/base_head.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" metrics(regularization_losses=None)\n")])])]),s("p",[e._v("Returns a dict of metric objects.")]),e._v(" "),s("h4",{attrs:{id:"args-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("regularization_losses")]),e._v(": A list of additional scalar losses to be added to the training loss, such as regularization losses.")])]),e._v(" "),s("h4",{attrs:{id:"returns-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A dict of metrics keyed by string name. The value is an instance of Metric class.")]),e._v(" "),s("h3",{attrs:{id:"predictions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#predictions","aria-hidden":"true"}},[e._v("#")]),e._v(" predictions")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/head/base_head.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" predictions(\n    logits,\n    keys=None\n)\n")])])]),s("p",[e._v("Returns a dict of predictions from provided logits.")]),e._v(" "),s("h4",{attrs:{id:"args-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("logits")]),e._v(": Logits "),s("code",[e._v("Tensor")]),e._v(" to be used for prediction construction.")]),e._v(" "),s("li",[s("code",[e._v("keys")]),e._v(": A list of "),s("code",[e._v("string")]),e._v(" for prediction "),s("code",[e._v("keys")]),e._v(". Defaults to "),s("code",[e._v("None")]),e._v(", meaning if not specified, predictions will be created for all the pre-defined valid "),s("code",[e._v("keys")]),e._v(" in the head.")])]),e._v(" "),s("h4",{attrs:{id:"returns-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A dict of predicted Tensor keyed by prediction name.")]),e._v(" "),s("h3",{attrs:{id:"update-metrics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update-metrics","aria-hidden":"true"}},[e._v("#")]),e._v(" update_metrics")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/head/base_head.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" update_metrics(\n    eval_metrics,\n    features,\n    logits,\n    labels,\n    mode=None,\n    regularization_losses=None\n)\n")])])]),s("p",[e._v("Updates metric objects and returns a dict of the updated metrics.")]),e._v(" "),s("h4",{attrs:{id:"args-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("eval_metrics")]),e._v(": A "),s("code",[e._v("dict")]),e._v(" of metrics to be updated.")]),e._v(" "),s("li",[s("code",[e._v("features")]),e._v(": Input "),s("code",[e._v("dict")]),e._v(" mapping string feature names to "),s("code",[e._v("Tensor")]),e._v(" or "),s("code",[e._v("SparseTensor")]),e._v(" objects containing the values for that feature in a minibatch. Often to be used to fetch example-weight tensor.")]),e._v(" "),s("li",[s("code",[e._v("logits")]),e._v(": "),s("code",[e._v("logits")]),e._v(" "),s("code",[e._v("Tensor")]),e._v(" to be used for metrics update.")]),e._v(" "),s("li",[s("code",[e._v("labels")]),e._v(": Labels "),s("code",[e._v("Tensor")]),e._v(", or "),s("code",[e._v("dict")]),e._v(" mapping string label names to "),s("code",[e._v("Tensor")]),e._v(" objects of the label values.")]),e._v(" "),s("li",[s("code",[e._v("mode")]),e._v(": Estimator's "),s("code",[e._v("ModeKeys")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("regularization_losses")]),e._v(": A list of additional scalar losses to be added to the training and evaluation loss, such as regularization losses.")])]),e._v(" "),s("h4",{attrs:{id:"returns-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A dict of updated metrics keyed by name. The value is an instance of Metric class.")])])}),[],!1,null,null,null);t.default=r.exports}}]);