(window.webpackJsonp=window.webpackJsonp||[]).push([[902],{1090:function(e,t,s){"use strict";s.r(t);var a=s(0),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Returns the mtimes (modification timestamps) of the checkpoints. (deprecated)")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.compat.v1.train.get_checkpoint_mtimes(checkpoint_prefixes)\n")])])]),s("p",[e._v("Globs for the checkpoints pointed to by checkpoint_prefixes. If the files exist, collect their mtime. Both V2 and V1 checkpoints are considered, in that priority.")]),e._v(" "),s("p",[e._v("This is the recommended way to get the mtimes, since it takes into account the naming difference between V1 and V2 formats.")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("checkpoint_prefixes")]),e._v(": a list of checkpoint paths, typically the results of "),s("code",[e._v("Saver.save")]),e._v("() or those of "),s("code",[e._v("tf.train.latest_checkpoint")]),e._v("(), regardless of sharded/non-sharded or V1/V2.")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A list of mtimes (in microseconds) of the found checkpoints.")])])}),[],!1,null,null,null);t.default=i.exports}}]);