(window.webpackJsonp=window.webpackJsonp||[]).push([[1537],{1728:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Decodes the output of a softmax.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.keras.backend.ctc_decode")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.keras.backend.ctc_decode")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.keras.backend.ctc_decode(\n    y_pred,\n    input_length,\n    greedy=True,\n    beam_width=100,\n    top_paths=1\n)\n")])])]),a("p",[e._v("Can use either greedy search (also known as best path) or a constrained dictionary search.")]),e._v(" "),a("h4",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("y_pred")]),e._v(": tensor ("),a("code",[e._v("samples, time_steps, num_categories")]),e._v(") containing the prediction, or output of the softmax.")]),e._v(" "),a("li",[a("code",[e._v("input_length")]),e._v(": tensor ("),a("code",[e._v("samples,")]),e._v(") containing the sequence length for each batch item in "),a("code",[e._v("y_pred")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("greedy")]),e._v(": perform much faster best-path search if "),a("code",[e._v("true")]),e._v(". This does not use a dictionary.")]),e._v(" "),a("li",[a("code",[e._v("beam_width")]),e._v(": if "),a("code",[e._v("greedy")]),e._v(" is "),a("code",[e._v("false")]),e._v(": a beam search decoder will be used with a beam of this width.")]),e._v(" "),a("li",[a("code",[e._v("top_paths")]),e._v(": if "),a("code",[e._v("greedy")]),e._v(" is "),a("code",[e._v("false")]),e._v(", how many of the most probable paths will be returned.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Tuple")]),e._v(": List: if "),a("code",[e._v("greedy")]),e._v(" is "),a("code",[e._v("true")]),e._v(", returns a list of one element that contains the decoded sequence. If "),a("code",[e._v("false")]),e._v(", returns the "),a("code",[e._v("top_paths")]),e._v(" most probable decoded sequences. Important: blank labels are returned as "),a("code",[e._v("-1")]),e._v(". Tensor ("),a("code",[e._v("top_paths")]),e._v(", ) that contains the log probability of each decoded sequence.")])])])}),[],!1,null,null,null);t.default=r.exports}}]);