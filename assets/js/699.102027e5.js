(window.webpackJsonp=window.webpackJsonp||[]).push([[699],{887:function(e,r,t){"use strict";t.r(r);var a=t(0),o=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"class-profiler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-profiler","aria-hidden":"true"}},[e._v("#")]),e._v(" Class Profiler")]),e._v(" "),t("p",[e._v("TensorFlow multi-step profiler.")]),e._v(" "),t("p",[e._v("https://github.com/tensorflow/tensorflow/tree/master/tensorflow/core/profiler/README.md")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" Typical use case:\n  # Currently we are only allowed to create 1 profiler per process.\n  profiler = Profiler(sess.graph)\n\n  for i in xrange(total_steps):\n    if i % 10000 == 0:\n      run_meta = tf.compat.v1.RunMetadata()\n      _ = sess.run(...,\n                   options=tf.compat.v1.RunOptions(\n                       trace_level=tf.RunOptions.FULL_TRACE),\n                   run_metadata=run_meta)\n      profiler.add_step(i, run_meta)\n\n      # Profile the parameters of your model.\n      profiler.profile_name_scope(options=(option_builder.ProfileOptionBuilder\n          .trainable_variables_parameter()))\n\n      # Or profile the timing of your model operations.\n      opts = option_builder.ProfileOptionBuilder.time_and_memory()\n      profiler.profile_operations(options=opts)\n\n      # Or you can generate a timeline:\n      opts = (option_builder.ProfileOptionBuilder(\n              option_builder.ProfileOptionBuilder.time_and_memory())\n              .with_step(i)\n              .with_timeline_output(filename).build())\n      profiler.profile_graph(options=opts)\n    else:\n      _ = sess.run(...)\n  # Auto detect problems and generate advice.\n  profiler.advise()\n")])])]),t("h2",{attrs:{id:"init"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),t("strong",[e._v("init")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/profiler/model_analyzer.py#L166-L184",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" __init__(\n    graph=None,\n    op_log=None\n)\n")])])]),t("p",[e._v("Constructor.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("graph")]),e._v(": tf.Graph. If None and eager execution is not enabled, use default "),t("code",[e._v("graph")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("op_log")]),e._v(": optional. tensorflow::tfprof::OpLogProto proto. Used to define extra op types.")])]),e._v(" "),t("h2",{attrs:{id:"methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),t("h3",{attrs:{id:"add-step"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add-step","aria-hidden":"true"}},[e._v("#")]),e._v(" add_step")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/profiler/model_analyzer.py#L189-L205",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" add_step(\n    step,\n    run_meta\n)\n")])])]),t("p",[e._v("Add statistics of a step.")]),e._v(" "),t("h4",{attrs:{id:"args-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("step")]),e._v(": int, An id used to group one or more different "),t("code",[e._v("run_meta")]),e._v(" together. When profiling with the profile_xxx APIs, user can use the "),t("code",[e._v("step")]),e._v(" id in the "),t("code",[e._v("options")]),e._v(" to profile these "),t("code",[e._v("run_meta")]),e._v(" together.")]),e._v(" "),t("li",[t("code",[e._v("run_meta")]),e._v(": RunMetadata proto that contains statistics of a session run.")])]),e._v(" "),t("h3",{attrs:{id:"advise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#advise","aria-hidden":"true"}},[e._v("#")]),e._v(" advise")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/profiler/model_analyzer.py#L279-L291",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" advise(options)\n")])])]),t("p",[e._v("Automatically detect problems and generate reports.")]),e._v(" "),t("h4",{attrs:{id:"args-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("options")]),e._v(": A dict of "),t("code",[e._v("options")]),e._v(". See ALL_ADVICE example above.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A Advise proto that conains the reports from all checkers.")]),e._v(" "),t("h3",{attrs:{id:"profile-graph"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#profile-graph","aria-hidden":"true"}},[e._v("#")]),e._v(" profile_graph")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/profiler/model_analyzer.py#L262-L277",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" profile_graph(options)\n")])])]),t("p",[e._v("Profile the statistics of graph nodes, organized by dataflow graph.")]),e._v(" "),t("h4",{attrs:{id:"args-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("options")]),e._v(": A dict of "),t("code",[e._v("options")]),e._v(". See core/profiler/g3doc/"),t("code",[e._v("options")]),e._v(".md.")])]),e._v(" "),t("h4",{attrs:{id:"returns-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("a GraphNodeProto that records the results.")]),e._v(" "),t("h3",{attrs:{id:"profile-name-scope"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#profile-name-scope","aria-hidden":"true"}},[e._v("#")]),e._v(" profile_name_scope")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/profiler/model_analyzer.py#L245-L260",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" profile_name_scope(options)\n")])])]),t("p",[e._v("Profile the statistics of graph nodes, organized by name scope.")]),e._v(" "),t("h4",{attrs:{id:"args-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("options")]),e._v(": A dict of "),t("code",[e._v("options")]),e._v(". See core/profiler/g3doc/"),t("code",[e._v("options")]),e._v(".md.")])]),e._v(" "),t("h4",{attrs:{id:"returns-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("a GraphNodeProto that records the results.")]),e._v(" "),t("h3",{attrs:{id:"profile-operations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#profile-operations","aria-hidden":"true"}},[e._v("#")]),e._v(" profile_operations")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/profiler/model_analyzer.py#L228-L243",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" profile_operations(options)\n")])])]),t("p",[e._v("Profile the statistics of the Operation types (e.g. MatMul, Conv2D).")]),e._v(" "),t("h4",{attrs:{id:"args-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("options")]),e._v(": A dict of "),t("code",[e._v("options")]),e._v(". See core/profiler/g3doc/"),t("code",[e._v("options")]),e._v(".md.")])]),e._v(" "),t("h4",{attrs:{id:"returns-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("a MultiGraphNodeProto that records the results.")]),e._v(" "),t("h3",{attrs:{id:"profile-python"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#profile-python","aria-hidden":"true"}},[e._v("#")]),e._v(" profile_python")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/profiler/model_analyzer.py#L207-L226",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" profile_python(options)\n")])])]),t("p",[e._v("Profile the statistics of the Python codes.")]),e._v(" "),t("p",[e._v("By default, it shows the call stack from root. To avoid redundant output, you may use options to filter as below options['show_name_regexes'] = ['.my_code.py.']")]),e._v(" "),t("h4",{attrs:{id:"args-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("options")]),e._v(": A dict of "),t("code",[e._v("options")]),e._v(". See core/profiler/g3doc/"),t("code",[e._v("options")]),e._v(".md.")])]),e._v(" "),t("h4",{attrs:{id:"returns-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("a MultiGraphNodeProto that records the results.")]),e._v(" "),t("h3",{attrs:{id:"serialize-to-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serialize-to-string","aria-hidden":"true"}},[e._v("#")]),e._v(" serialize_to_string")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/profiler/model_analyzer.py#L293-L302",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" serialize_to_string()\n")])])]),t("p",[e._v("Serialize the ProfileProto to a binary string.")]),e._v(" "),t("p",[e._v("Users can write it to file for offline analysis by tfprof commandline or graphical interface.")]),e._v(" "),t("h4",{attrs:{id:"returns-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("ProfileProto binary string.")])])}),[],!1,null,null,null);r.default=o.exports}}]);