(window.webpackJsonp=window.webpackJsonp||[]).push([[850],{1038:function(e,t,o){"use strict";o.r(t);var s=o(0),i=Object(s.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Initializes a distributed TPU system for use with TensorFlow.")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" tf.compat.v1.tpu.initialize_system(\n    embedding_config=None,\n    job=None\n)\n")])])]),o("h4",{attrs:{id:"args"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("embedding_config")]),e._v(": If not None, a "),o("code",[e._v("TPUEmbeddingConfiguration")]),e._v(" proto describing the desired configuration of the hardware embedding lookup tables. If "),o("code",[e._v("embedding_config")]),e._v(" is None, no hardware embeddings can be used.")]),e._v(" "),o("li",[o("code",[e._v("job")]),e._v(": The "),o("code",[e._v("job")]),e._v(" (the XXX in TensorFlow device specification /"),o("code",[e._v("job")]),e._v(":XXX) that contains the TPU devices that will be initialized. If "),o("code",[e._v("job")]),e._v("=None it is assumed there is only one "),o("code",[e._v("job")]),e._v(" in the TensorFlow flock, and an error will be returned if this assumption does not hold.")])]),e._v(" "),o("h4",{attrs:{id:"returns"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),o("p",[e._v("A serialized TopologyProto that describes the TPU system. Note: the topology must be evaluated using Session.run before it can be used.")])])}),[],!1,null,null,null);t.default=i.exports}}]);