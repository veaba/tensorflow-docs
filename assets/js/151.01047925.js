(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{339:function(e,t,r){"use strict";r.r(t);var s=r(0),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Converts value to a SparseTensor or Tensor.")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" tf.compat.v1.convert_to_tensor_or_sparse_tensor(\n    value,\n    dtype=None,\n    name=None\n)\n")])])]),r("h4",{attrs:{id:"args"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("value")]),e._v(": A "),r("code",[e._v("SparseTensor")]),e._v(", "),r("code",[e._v("SparseTensor")]),e._v("Value, or an object whose type has a registered "),r("code",[e._v("Tensor")]),e._v(" conversion function.")]),e._v(" "),r("li",[r("code",[e._v("dtype")]),e._v(": Optional element type for the returned tensor. If missing, the type is inferred from the type of "),r("code",[e._v("value")]),e._v(".")]),e._v(" "),r("li",[r("code",[e._v("name")]),e._v(": Optional "),r("code",[e._v("name")]),e._v(" to use if a new "),r("code",[e._v("Tensor")]),e._v(" is created.")])]),e._v(" "),r("h4",{attrs:{id:"returns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("A SparseTensor or Tensor based on value.")]),e._v(" "),r("h4",{attrs:{id:"raises"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("RuntimeError")]),e._v(": If result type is incompatible with "),r("code",[e._v("dtype")]),e._v(".")])])])}),[],!1,null,null,null);t.default=a.exports}}]);