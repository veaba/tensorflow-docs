(window.webpackJsonp=window.webpackJsonp||[]).push([[2586],{2777:function(t,e,a){"use strict";a.r(e);var s=a(0),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Returns shape of tensors.")]),t._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[t._v("#")]),t._v(" Aliases:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("tf.compat.v1.shape_n")])]),t._v(" "),a("li",[a("code",[t._v("tf.compat.v2.shape_n")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" tf.shape_n(\n    input,\n    out_type=tf.dtypes.int32,\n    name=None\n)\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[t._v("#")]),t._v(" Args:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("input")]),t._v(": A list of at least 1 "),a("code",[t._v("Tensor")]),t._v(" object with the same type.")]),t._v(" "),a("li",[a("code",[t._v("out_type")]),t._v(": The specified output type of the operation ("),a("code",[t._v("int32")]),t._v(" or "),a("code",[t._v("int64")]),t._v("). Defaults to "),a("code",[t._v("tf.int32")]),t._v("(optional).")]),t._v(" "),a("li",[a("code",[t._v("name")]),t._v(": A "),a("code",[t._v("name")]),t._v(" for the operation (optional).")])]),t._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns:")]),t._v(" "),a("p",[t._v("A list with the same length as "),a("code",[t._v("input")]),t._v(" of "),a("code",[t._v("Tensor")]),t._v(" objects with type "),a("code",[t._v("out_type")]),t._v(".")])])}),[],!1,null,null,null);e.default=o.exports}}]);