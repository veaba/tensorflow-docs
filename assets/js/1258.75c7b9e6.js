(window.webpackJsonp=window.webpackJsonp||[]).push([[1258],{1447:function(e,t,s){"use strict";s.r(t);var a=s(0),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"class-multiclasshead"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-multiclasshead","aria-hidden":"true"}},[e._v("#")]),e._v(" Class MultiClassHead")]),e._v(" "),s("p",[e._v("Creates a Head for multi class classification.\n"),s("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/estimator/Head",target:"_blank",rel:"noopener noreferrer"}},[e._v("Head"),s("OutboundLink")],1),e._v("Inherits From:")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[e._v("Class "),s("code",[e._v("tf.compat.v1.estimator.MultiClassHead")])]),e._v(" "),s("li",[e._v("Class "),s("code",[e._v("tf.compat.v2.estimator.MultiClassHead")])])]),e._v(" "),s("p",[e._v("Uses sparse_softmax_cross_entropy loss.")]),e._v(" "),s("p",[e._v("The head expects logits with shape [D0, D1, ... DN, n_classes]. In many applications, the shape is [batch_size, n_classes].")]),e._v(" "),s("p",[e._v("labels must be a dense Tensor with shape matching logits, namely [D0, D1, ... DN, 1]. If label_vocabulary given, labels must be a string Tensor with values from the vocabulary. If label_vocabulary is not given, labels must be an integer Tensor with values specifying the class index.")]),e._v(" "),s("p",[e._v("If weight_column is specified, weights must be of shape [D0, D1, ... DN], or [D0, D1, ... DN, 1].")]),e._v(" "),s("p",[e._v("The loss is the weighted sum over the input dimensions. Namely, if the input labels have shape [batch_size, 1], the loss is the weighted sum over batch_size.")]),e._v(" "),s("p",[e._v("Also supports custom loss_fn. loss_fn takes (labels, logits) or (labels, logits, features, loss_reduction) as arguments and returns unreduced loss with shape [D0, D1, ... DN, 1]. loss_fn must support integer labels with shape [D0, D1, ... DN, 1]. Namely, the head applies label_vocabulary to the input labels before passing them to loss_fn.")]),e._v(" "),s("p",[e._v("The head can be used with a canned estimator. Example:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" my_head = tf.estimator.MultiClassHead(n_classes=3)\nmy_estimator = tf.estimator.DNNEstimator(\n    head=my_head,\n    hidden_units=...,\n    feature_columns=...)\n")])])]),s("p",[e._v("It can also be used with a custom model_fn. Example:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" def _my_model_fn(features, labels, mode):\n  my_head = tf.estimator.MultiClassHead(n_classes=3)\n  logits = tf.keras.Model(...)(features)\n\n  return my_head.create_estimator_spec(\n      features=features,\n      mode=mode,\n      labels=labels,\n      optimizer=tf.keras.optimizers.Adagrad(lr=0.1),\n      logits=logits)\n\nmy_estimator = tf.estimator.Estimator(model_fn=_my_model_fn)\n")])])]),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("n_classes")]),e._v(": Number of classes, must be greater than 2 (for 2 classes, use "),s("code",[e._v("BinaryClassHead")]),e._v(").")]),e._v(" "),s("li",[s("code",[e._v("weight_column")]),e._v(": A string or a "),s("code",[e._v("NumericColumn")]),e._v(" created by "),s("code",[e._v("tf.feature_column.numeric_column")]),e._v(" defining feature column representing weights. It is used to down weight or boost examples during training. It will be multiplied by the loss of the example.")]),e._v(" "),s("li",[s("code",[e._v("label_vocabulary")]),e._v(": A list or tuple of strings representing possible label values. If it is not given, that means labels are already encoded as an integer within [0, "),s("code",[e._v("n_classes")]),e._v("). If given, labels must be of string type and have any value in "),s("code",[e._v("label_vocabulary")]),e._v(". Note that errors will be raised if "),s("code",[e._v("label_vocabulary")]),e._v(" is not provided but labels are strings. If both "),s("code",[e._v("n_classes")]),e._v(" and "),s("code",[e._v("label_vocabulary")]),e._v(" are provided, "),s("code",[e._v("label_vocabulary")]),e._v(" should contain exactly "),s("code",[e._v("n_classes")]),e._v(" items.")]),e._v(" "),s("li",[s("code",[e._v("loss_reduction")]),e._v(": One of "),s("code",[e._v("tf.losses.Reduction")]),e._v(" except "),s("code",[e._v("NONE")]),e._v(". Decides how to reduce training loss over batch. Defaults to "),s("code",[e._v("SUM_OVER_BATCH_SIZE")]),e._v(", namely weighted sum of losses divided by batch size * label_dimension.")]),e._v(" "),s("li",[s("code",[e._v("loss_fn")]),e._v(": Optional loss function.")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(': Name of the head. If provided, summary and metrics keys will be suffixed by "/" + '),s("code",[e._v("name")]),e._v(". Also used as "),s("code",[e._v("name")]),e._v("_scope when creating ops.")])]),e._v(" "),s("h2",{attrs:{id:"init"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),s("strong",[e._v("init")])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/head/multi_class_head.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" __init__(\n    n_classes,\n    weight_column=None,\n    label_vocabulary=None,\n    loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,\n    loss_fn=None,\n    name=None\n)\n")])])]),s("p",[e._v("Initialize self. See help(type(self)) for accurate signature.")]),e._v(" "),s("h2",{attrs:{id:"properties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),s("h3",{attrs:{id:"logits-dimension"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logits-dimension","aria-hidden":"true"}},[e._v("#")]),e._v(" logits_dimension")]),e._v(" "),s("p",[e._v("See base_head.Head for details.")]),e._v(" "),s("h3",{attrs:{id:"loss-reduction"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loss-reduction","aria-hidden":"true"}},[e._v("#")]),e._v(" loss_reduction")]),e._v(" "),s("p",[e._v("See base_head.Head for details.")]),e._v(" "),s("h3",{attrs:{id:"name"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#name","aria-hidden":"true"}},[e._v("#")]),e._v(" name")]),e._v(" "),s("p",[e._v("See base_head.Head for details.")]),e._v(" "),s("h2",{attrs:{id:"methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),s("h3",{attrs:{id:"create-estimator-spec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-estimator-spec","aria-hidden":"true"}},[e._v("#")]),e._v(" create_estimator_spec")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/head/base_head.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" create_estimator_spec(\n    features,\n    mode,\n    logits,\n    labels=None,\n    optimizer=None,\n    trainable_variables=None,\n    train_op_fn=None,\n    update_ops=None,\n    regularization_losses=None\n)\n")])])]),s("p",[e._v("Returns EstimatorSpec that a model_fn can return.")]),e._v(" "),s("p",[e._v("It is recommended to pass all args via name.")]),e._v(" "),s("h4",{attrs:{id:"args-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("features")]),e._v(": Input "),s("code",[e._v("dict")]),e._v(" mapping string feature names to "),s("code",[e._v("Tensor")]),e._v(" or "),s("code",[e._v("SparseTensor")]),e._v(" objects containing the values for that feature in a minibatch. Often to be used to fetch example-weight tensor.")]),e._v(" "),s("li",[s("code",[e._v("mode")]),e._v(": Estimator's "),s("code",[e._v("ModeKeys")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("logits")]),e._v(": Logits "),s("code",[e._v("Tensor")]),e._v(" to be used by the head.")]),e._v(" "),s("li",[s("code",[e._v("labels")]),e._v(": Labels "),s("code",[e._v("Tensor")]),e._v(", or "),s("code",[e._v("dict")]),e._v(" mapping string label names to "),s("code",[e._v("Tensor")]),e._v(" objects of the label values.")]),e._v(" "),s("li",[s("code",[e._v("optimizer")]),e._v(": An "),s("code",[e._v("tf.keras.optimizers.Optimizer")]),e._v(" instance to optimize the "),s("code",[e._v("loss")]),e._v(" in TRAIN "),s("code",[e._v("mode")]),e._v(". Namely, sets train_op = "),s("code",[e._v("optimizer")]),e._v(".get_updates("),s("code",[e._v("loss")]),e._v(", trainable_variables), which updates variables to minimize "),s("code",[e._v("loss")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("trainable_variables")]),e._v(": A list or tuple of "),s("code",[e._v("Variable")]),e._v(" objects to update to minimize "),s("code",[e._v("loss")]),e._v(". In "),s("code",[e._v("Tensor")]),e._v("flow 1.x, by default these are the list of variables collected in the graph under the key "),s("code",[e._v("GraphKeys.TRAINABLE_VARIABLES")]),e._v(". As "),s("code",[e._v("Tensor")]),e._v("flow 2.x doesn't have collections and GraphKeys, "),s("code",[e._v("trainable_variables")]),e._v(" need to be passed explicitly here.")]),e._v(" "),s("li",[s("code",[e._v("train_op_fn")]),e._v(": Function that takes a scalar "),s("code",[e._v("loss")]),e._v(" "),s("code",[e._v("Tensor")]),e._v(" and returns an op to optimize the "),s("code",[e._v("mode")]),e._v("l with the "),s("code",[e._v("loss")]),e._v(" in TRAIN "),s("code",[e._v("mode")]),e._v(". Used if "),s("code",[e._v("optimizer")]),e._v(" is "),s("code",[e._v("None")]),e._v(". Exactly one of "),s("code",[e._v("train_op_fn")]),e._v(" and "),s("code",[e._v("optimizer")]),e._v(" must be set in TRAIN "),s("code",[e._v("mode")]),e._v(". By default, it is "),s("code",[e._v("None")]),e._v(" in other "),s("code",[e._v("mode")]),e._v("s. If you want to optimize "),s("code",[e._v("loss")]),e._v(" yourself, you can pass "),s("code",[e._v("lambda _: tf.no_op")]),e._v("() and then use "),s("code",[e._v("EstimatorSpec.loss")]),e._v(" to compute and apply gradients.")]),e._v(" "),s("li",[s("code",[e._v("update_ops")]),e._v(": A list or tuple of update ops to be run at training time. For example, layers such as BatchNormalization create mean and variance update ops that need to be run at training time. In "),s("code",[e._v("Tensor")]),e._v("flow 1.x, these are thrown into an UPDATE_OPS collection. As "),s("code",[e._v("Tensor")]),e._v("flow 2.x doesn't have collections, "),s("code",[e._v("update_ops")]),e._v(" need to be passed explicitly here.")]),e._v(" "),s("li",[s("code",[e._v("regularization_losses")]),e._v(": A list of additional scalar "),s("code",[e._v("loss")]),e._v("es to be added to the training "),s("code",[e._v("loss")]),e._v(", such as regularization "),s("code",[e._v("loss")]),e._v("es.")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("EstimatorSpec.")]),e._v(" "),s("h3",{attrs:{id:"loss"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loss","aria-hidden":"true"}},[e._v("#")]),e._v(" loss")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/head/multi_class_head.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" loss(\n    labels,\n    logits,\n    features=None,\n    mode=None,\n    regularization_losses=None\n)\n")])])]),s("p",[e._v("Returns regularized training loss. See base_head.Head for details.")]),e._v(" "),s("h3",{attrs:{id:"metrics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#metrics","aria-hidden":"true"}},[e._v("#")]),e._v(" metrics")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/head/multi_class_head.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" metrics(regularization_losses=None)\n")])])]),s("p",[e._v("Creates metrics. See base_head.Head for details.")]),e._v(" "),s("h3",{attrs:{id:"predictions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#predictions","aria-hidden":"true"}},[e._v("#")]),e._v(" predictions")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/head/multi_class_head.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" predictions(\n    logits,\n    keys=None\n)\n")])])]),s("p",[e._v("Return predictions based on keys. See base_head.Head for details.")]),e._v(" "),s("h4",{attrs:{id:"args-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("logits")]),e._v(":"),s("code",[e._v("``logits`` ``Tensor``")]),e._v("w"),s("code",[e._v("i``t``h`` ``s``h``a")]),e._v("p"),s("code",[e._v("e``")]),e._v("["),s("code",[e._v("D``0``,`` ``D``1``,`` ``.``.``.`` ``D``N``,`` ``logits``_``d``i``m``e``n``s``i``o``n")]),e._v("]"),s("code",[e._v(".``")]),e._v("F"),s("code",[e._v("o")]),e._v("r"),s("code",[e._v("``m``a``n")]),e._v("y"),s("code",[e._v("``a")]),e._v("pp"),s("code",[e._v("l``i``c``a``t``i``o``n``s``,`` ``t``h``e`` ``s``h``a")]),e._v("p"),s("code",[e._v("e`` ``i``s``")]),e._v("["),s("code",[e._v("b``a``t``c``h``_``s``i``z``e``,`` ``logits``_``d``i``m``e``n``s``i``o``n")]),e._v("]"),s("code",[e._v(".")])]),e._v(" "),s("li",[s("code",[e._v("keys")]),e._v(":"),s("code",[e._v("``a`` ``l``i``s``t`` ``o")]),e._v("r"),s("code",[e._v("``t")]),e._v("up"),s("code",[e._v("l``e`` ``o")]),e._v("f"),s("code"),e._v("pr"),s("code",[e._v("e``d``i``c``t``i``o``n`` ``keys``.``")]),e._v("E"),s("code",[e._v("a``c``h``")]),e._v("k"),s("code",[e._v("e")]),e._v("y"),s("code",[e._v("``c``a``n`` ``b``e`` ``e``i``t``h``e")]),e._v("r"),s("code",[e._v("``t``h``e`` ``c``l``a``s``s``")]),e._v("v"),s("code",[e._v("a")]),e._v("r"),s("code",[e._v("i``a``b``l``e`` ``o")]),e._v("f"),s("code"),e._v("pr"),s("code",[e._v("e``d``i``c``t``i``o``n``_``keys``.")]),e._v("Pr"),s("code",[e._v("e``d``i``c``t``i``o``n")]),e._v("K"),s("code",[e._v("e")]),e._v("y"),s("code",[e._v("s`` ``o")]),e._v("r"),s("code",[e._v("``i``t``s`` ``s``t")]),e._v("r"),s("code",[e._v("i``n``g``")]),e._v("v"),s("code",[e._v("a``l")]),e._v("u"),s("code",[e._v("e``,`` ``s")]),e._v("u"),s("code",[e._v("c``h`` ``a``s")]),e._v(":"),s("code"),e._v("pr"),s("code",[e._v("e``d``i``c``t``i``o``n``_``keys``.")]),e._v("Pr"),s("code",[e._v("e``d``i``c``t``i``o``n")]),e._v("K"),s("code",[e._v("e")]),e._v("y"),s("code",[e._v("s``.")]),e._v("CLASSES"),s("code",[e._v("``o")]),e._v("r"),s("code"),e._v("'"),s("code",[e._v("c``l``a``s``s``e``s")]),e._v("'"),s("code",[e._v(".``")]),e._v("If"),s("code",[e._v("``n``o``t`` ``s")]),e._v("p"),s("code",[e._v("e``c``i")]),e._v("f"),s("code",[e._v("i``e``d``,`` ``i``t``")]),e._v("w"),s("code",[e._v("i``l``l``")]),e._v("r"),s("code",[e._v("e``t")]),e._v("ur"),s("code",[e._v("n`` ``t``h``e``")]),e._v("pr"),s("code",[e._v("e``d``i``c``t``i``o``n``s``")]),e._v("f"),s("code",[e._v("o")]),e._v("r"),s("code",[e._v("``a``l``l``")]),e._v("v"),s("code",[e._v("a``l``i``d`` ``keys``.")])])]),e._v(" "),s("h4",{attrs:{id:"returns-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A dict of predictions.")]),e._v(" "),s("h3",{attrs:{id:"update-metrics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update-metrics","aria-hidden":"true"}},[e._v("#")]),e._v(" update_metrics")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/head/multi_class_head.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" update_metrics(\n    eval_metrics,\n    features,\n    logits,\n    labels,\n    regularization_losses=None\n)\n")])])]),s("p",[e._v("Updates eval metrics. See base_head.Head for details.")])])}),[],!1,null,null,null);t.default=o.exports}}]);