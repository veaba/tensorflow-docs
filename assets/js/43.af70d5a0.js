(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{234:function(e,r,t){"use strict";t.r(r);var a=t(0),s=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"class-devicespec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-devicespec","aria-hidden":"true"}},[e._v("#")]),e._v(" Class DeviceSpec")]),e._v(" "),t("p",[e._v("Represents a (possibly partial) specification for a TensorFlow device.\n"),t("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/DeviceSpec",target:"_blank",rel:"noopener noreferrer"}},[e._v("DeviceSpec"),t("OutboundLink")],1),e._v("Inherits From:")]),e._v(" "),t("p",[e._v("DeviceSpecs are used throughout TensorFlow to describe where state is stored and computations occur. Using DeviceSpec allows you to parse device spec strings to verify their validity, merge them or compose them programmatically.")]),e._v(" "),t("h4",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' # Place the operations on device "GPU:0" in the "ps" job.\ndevice_spec = DeviceSpec(job="ps", device_type="GPU", device_index=0)\nwith tf.device(device_spec):\n  # Both my_var and squared_var will be placed on /job:ps/device:GPU:0.\n  my_var = tf.Variable(..., name="my_variable")\n  squared_var = tf.square(my_var)\n')])])]),t("p",[e._v("If a DeviceSpec is partially specified, it will be merged with other DeviceSpecs according to the scope in which it is defined. DeviceSpec components defined in inner scopes take precedence over those defined in outer scopes.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' with tf.device(DeviceSpec(job="train", )):\n  with tf.device(DeviceSpec(job="ps", device_type="GPU", device_index=0):\n    # Nodes created here will be assigned to /job:ps/device:GPU:0.\n  with tf.device(DeviceSpec(device_type="GPU", device_index=1):\n    # Nodes created here will be assigned to /job:train/device:GPU:1.\n')])])]),t("p",[e._v("A DeviceSpec consists of 5 components -- each of which is optionally specified:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("J")]),e._v("o"),t("code",[e._v("b")]),e._v(":"),t("code"),e._v("T"),t("code",[e._v("h")]),e._v("e"),t("code"),e._v("j"),t("code",[e._v("o")]),e._v("b"),t("code"),e._v("n"),t("code",[e._v("a")]),e._v("m"),t("code",[e._v("e")]),e._v(".``")]),e._v(" "),t("li",[t("code",[e._v("R")]),e._v("e"),t("code",[e._v("p")]),e._v("l"),t("code",[e._v("i")]),e._v("c"),t("code",[e._v("a")]),e._v(":"),t("code"),e._v("T"),t("code",[e._v("h")]),e._v("e"),t("code"),e._v("r"),t("code",[e._v("e")]),e._v("p"),t("code",[e._v("l")]),e._v("i"),t("code",[e._v("c")]),e._v("a"),t("code"),e._v("i"),t("code",[e._v("n")]),e._v("d"),t("code",[e._v("e")]),e._v("x"),t("code",[e._v(".")])]),e._v(" "),t("li",[t("code",[e._v("T")]),e._v("a"),t("code",[e._v("s")]),e._v("k"),t("code",[e._v(":")]),e._v(" "),t("code",[e._v("T")]),e._v("h"),t("code",[e._v("e")]),e._v(" "),t("code",[e._v("t")]),e._v("a"),t("code",[e._v("s")]),e._v("k"),t("code"),e._v("i"),t("code",[e._v("n")]),e._v("d"),t("code",[e._v("e")]),e._v("x"),t("code",[e._v(".")])]),e._v(" "),t("li",[t("code",[e._v("D")]),e._v("e"),t("code",[e._v("v")]),e._v("i"),t("code",[e._v("c")]),e._v("e"),t("code"),e._v("t"),t("code",[e._v("y")]),e._v("p"),t("code",[e._v("e")]),e._v(":"),t("code"),e._v("T"),t("code",[e._v("h")]),e._v("e"),t("code"),e._v("d"),t("code",[e._v("e")]),e._v("v"),t("code",[e._v("i")]),e._v("c"),t("code",[e._v("e")]),e._v(" "),t("code",[e._v("t")]),e._v("y"),t("code",[e._v("p")]),e._v("e"),t("code"),e._v("s"),t("code",[e._v("t")]),e._v("r"),t("code",[e._v("i")]),e._v("n"),t("code",[e._v("g")]),e._v(" "),t("code",[e._v("(")]),e._v("e"),t("code",[e._v(".")]),e._v("g"),t("code",[e._v(".")]),e._v(" "),t("code",[e._v('"')]),e._v("C"),t("code",[e._v("P")]),e._v("U"),t("code",[e._v('"')]),e._v(" "),t("code",[e._v("o")]),e._v("r"),t("code"),e._v('"'),t("code",[e._v("G")]),e._v("P"),t("code",[e._v("U")]),e._v('"'),t("code",[e._v(")")]),e._v(".``")]),e._v(" "),t("li",[t("code",[e._v("D")]),e._v("e"),t("code",[e._v("v")]),e._v("i"),t("code",[e._v("c")]),e._v("e"),t("code"),e._v("i"),t("code",[e._v("n")]),e._v("d"),t("code",[e._v("e")]),e._v("x"),t("code",[e._v(":")]),e._v(" "),t("code",[e._v("T")]),e._v("h"),t("code",[e._v("e")]),e._v(" "),t("code",[e._v("d")]),e._v("e"),t("code",[e._v("v")]),e._v("i"),t("code",[e._v("c")]),e._v("e"),t("code"),e._v("i"),t("code",[e._v("n")]),e._v("d"),t("code",[e._v("e")]),e._v("x"),t("code",[e._v(".")])])]),e._v(" "),t("h2",{attrs:{id:"init"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),t("strong",[e._v("init")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L92-L112",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" __init__(\n    job=None,\n    replica=None,\n    task=None,\n    device_type=None,\n    device_index=None\n)\n")])])]),t("p",[e._v("Create a new DeviceSpec object.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("job")]),e._v(": string. Optional "),t("code",[e._v("job")]),e._v(" name.")]),e._v(" "),t("li",[t("code",[e._v("replica")]),e._v(": int. Optional "),t("code",[e._v("replica")]),e._v(" index.")]),e._v(" "),t("li",[t("code",[e._v("task")]),e._v(": int. Optional "),t("code",[e._v("task")]),e._v(" index.")]),e._v(" "),t("li",[t("code",[e._v("device_type")]),e._v(': Optional device type string (e.g. "CPU" or "GPU")')]),e._v(" "),t("li",[t("code",[e._v("device_index")]),e._v(": int. Optional device index. If left unspecified, device represents 'any' "),t("code",[e._v("device_index")]),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"properties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),t("h3",{attrs:{id:"device-index"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#device-index","aria-hidden":"true"}},[e._v("#")]),e._v(" device_index")]),e._v(" "),t("h3",{attrs:{id:"device-type"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#device-type","aria-hidden":"true"}},[e._v("#")]),e._v(" device_type")]),e._v(" "),t("h3",{attrs:{id:"job"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#job","aria-hidden":"true"}},[e._v("#")]),e._v(" job")]),e._v(" "),t("h3",{attrs:{id:"replica"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#replica","aria-hidden":"true"}},[e._v("#")]),e._v(" replica")]),e._v(" "),t("h3",{attrs:{id:"task"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#task","aria-hidden":"true"}},[e._v("#")]),e._v(" task")]),e._v(" "),t("h2",{attrs:{id:"methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),t("h3",{attrs:{id:"eq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eq","aria-hidden":"true"}},[e._v("#")]),e._v(" "),t("strong",[e._v("eq")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L358-L372",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" __eq__(other)\n")])])]),t("p",[e._v("Checks if the other DeviceSpec is same as the current instance, eg have")]),e._v(" "),t("p",[e._v("same value for all the internal fields.")]),e._v(" "),t("h4",{attrs:{id:"args-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("other")]),e._v(": An"),t("code",[e._v("other")]),e._v(" DeviceSpec")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("Return True if other is also a DeviceSpec instance and has same value as the current instance. Return False otherwise.")]),e._v(" "),t("h3",{attrs:{id:"from-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-string","aria-hidden":"true"}},[e._v("#")]),e._v(" from_string")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L123-L138",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" from_string(\n    cls,\n    spec\n)\n")])])]),t("p",[e._v("Construct a DeviceSpec from a string.")]),e._v(" "),t("h4",{attrs:{id:"args-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("spec")]),e._v(": a string of the form /job:/replica:/task:/device:CPU: or /job:/replica:/task:/device:GPU: as cpu and gpu are mutually exclusive. All entries are optional.")])]),e._v(" "),t("h4",{attrs:{id:"returns-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A DeviceSpec.")]),e._v(" "),t("h3",{attrs:{id:"make-merged-spec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#make-merged-spec","aria-hidden":"true"}},[e._v("#")]),e._v(" make_merged_spec")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L193-L215",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" make_merged_spec(dev)\n")])])]),t("p",[e._v("Returns a new DeviceSpec which incorporates dev.")]),e._v(" "),t("p",[e._v("When combining specs, dev will take precidence over the current spec. So for instance:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' first_spec = tf.DeviceSpec(job=0, device_type="CPU")\nsecond_spec = tf.DeviceSpec(device_type="GPU")\ncombined_spec = first_spec.make_merged_spec(second_spec)\n')])])]),t("p",[e._v("is equivalent to:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' combined_spec = tf.DeviceSpec(job=0, device_type="GPU")\n')])])]),t("h4",{attrs:{id:"args-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("dev")]),e._v(": a "),t("code",[e._v("DeviceSpec")])])]),e._v(" "),t("h4",{attrs:{id:"returns-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A new DeviceSpec which combines self and dev")]),e._v(" "),t("h3",{attrs:{id:"merge-from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#merge-from","aria-hidden":"true"}},[e._v("#")]),e._v(" merge_from")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L426-L436",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" merge_from(dev)\n")])])]),t("p",[e._v('Merge the properties of "dev" into this DeviceSpec.')]),e._v(" "),t("h4",{attrs:{id:"args-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("dev")]),e._v(": a "),t("code",[e._v("DeviceSpec")]),e._v(".")])]),e._v(" "),t("h3",{attrs:{id:"parse-from-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parse-from-string","aria-hidden":"true"}},[e._v("#")]),e._v(" parse_from_string")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L420-L424",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" parse_from_string(spec)\n")])])]),t("p",[e._v("Parse a DeviceSpec name into its components.")]),e._v(" "),t("p",[e._v("2.x behavior change: In TensorFlow 1.x, this function mutates its own state and returns itself. In 2.x, DeviceSpecs are immutable, and this function will return a DeviceSpec which contains the spec.")]),e._v(" "),t("p",[e._v("Recommended:")]),e._v(" "),t("p",[e._v("Will work in 1.x and 2.x (though deprecated in 2.x):")]),e._v(" "),t("p",[e._v("Will NOT work in 2.x:")]),e._v(" "),t("p",[e._v("In general, DeviceSpec.from_string should completely replace DeviceSpec.parse_from_string, and DeviceSpec.replace should completely replace setting attributes directly.")]),e._v(" "),t("h4",{attrs:{id:"args-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("spec")]),e._v(": an optional string of the form /job:/replica:/task:/device:CPU: or /job:/replica:/task:/device:GPU: as cpu and gpu are mutually exclusive. All entries are optional.")])]),e._v(" "),t("h4",{attrs:{id:"returns-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("The DeviceSpec.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": if the spec was not valid.")])]),e._v(" "),t("h3",{attrs:{id:"replace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#replace","aria-hidden":"true"}},[e._v("#")]),e._v(" replace")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L217-L239",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" replace(**kwargs)\n")])])]),t("p",[e._v("Convenience method for making a new DeviceSpec by overriding fields.")]),e._v(" "),t("h4",{attrs:{id:"for-instance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-instance","aria-hidden":"true"}},[e._v("#")]),e._v(" For instance:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' my_spec = DeviceSpec=(job="my_job", device="CPU")\nmy_updated_spec = my_spec.replace(device="GPU")\nmy_other_spec = my_spec.replace(device=None)\n')])])]),t("h4",{attrs:{id:"args-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("h4",{attrs:{id:"returns-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A DeviceSpec with the fields specified in kwargs overridden.")]),e._v(" "),t("h3",{attrs:{id:"to-string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#to-string","aria-hidden":"true"}},[e._v("#")]),e._v(" to_string")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/framework/device_spec.py#L413-L418",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" to_string()\n")])])]),t("p",[e._v("Return a string representation of this DeviceSpec.")]),e._v(" "),t("h4",{attrs:{id:"returns-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("a string of the form /job:/replica:/task:/device::.")])])}),[],!1,null,null,null);r.default=s.exports}}]);