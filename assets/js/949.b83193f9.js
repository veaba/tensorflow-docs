(window.webpackJsonp=window.webpackJsonp||[]).push([[949],{1136:function(e,t,n){"use strict";n.r(t);var o=n(0),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Return the elements, either from x or y, depending on the condition.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.compat.v1.where(\n    condition,\n    x=None,\n    y=None,\n    name=None\n)\n")])])]),n("p",[e._v("If both x and y are None, then this operation returns the coordinates of true elements of condition. The coordinates are returned in a 2-D tensor where the first dimension (rows) represents the number of true elements, and the second dimension (columns) represents the coordinates of the true elements. Keep in mind, the shape of the output tensor can vary depending on how many true values there are in input. Indices are output in row-major order.")]),e._v(" "),n("p",[e._v("If both non-None, x and y must have the same shape. The condition tensor must be a scalar if x and y are scalar. If x and y are tensors of higher rank, then condition must be either a vector with size matching the first dimension of x, or must have the same shape as x.")]),e._v(" "),n("p",[e._v("The condition tensor acts as a mask that chooses, based on the value at each element, whether the corresponding element / row in the output should be taken from x (if true) or y (if false).")]),e._v(" "),n("p",[e._v("If condition is a vector and x and y are higher rank matrices, then it chooses which row (outer dimension) to copy from x and y. If condition has the same shape as x and y, then it chooses which element to copy from x and y.")]),e._v(" "),n("h4",{attrs:{id:"args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("condition")]),e._v(": A "),n("code",[e._v("Tensor")]),e._v(" of type "),n("code",[e._v("bool")])]),e._v(" "),n("li",[n("code",[e._v("x")]),e._v(": A "),n("code",[e._v("Tensor")]),e._v(" which may have the same shape as "),n("code",[e._v("condition")]),e._v(". If "),n("code",[e._v("condition")]),e._v(" is rank 1, "),n("code",[e._v("x")]),e._v(" may have higher rank, but its first dimension must match the size of "),n("code",[e._v("condition")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("y")]),e._v(": A "),n("code",[e._v("tensor")]),e._v(" with the same shape and t"),n("code",[e._v("y")]),e._v("pe as "),n("code",[e._v("x")]),e._v(".")]),e._v(" "),n("li",[n("code",[e._v("name")]),e._v(": A "),n("code",[e._v("name")]),e._v(" of the operation (optional)")])]),e._v(" "),n("h4",{attrs:{id:"returns"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),n("p",[e._v("A Tensor with the same type and shape as x, y if they are non-None. Otherwise, a Tensor with shape (num_true, rank(condition)).")]),e._v(" "),n("h4",{attrs:{id:"raises"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("ValueError")]),e._v(": When e"),n("code",[e._v("x")]),e._v("actl"),n("code",[e._v("y")]),e._v(" one of "),n("code",[e._v("x")]),e._v(" or "),n("code",[e._v("y")]),e._v(" is non-None.")])])])}),[],!1,null,null,null);t.default=a.exports}}]);