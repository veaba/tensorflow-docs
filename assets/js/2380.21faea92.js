(window.webpackJsonp=window.webpackJsonp||[]).push([[2380],{2568:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Defined in generated file: python/ops/gen_string_ops.py")]),t._v(" "),s("p",[t._v("Converts each string in the input Tensor to its hash mod by a number of buckets.")]),t._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[t._v("#")]),t._v(" Aliases:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("tf.compat.v1.string_to_hash_bucket_strong")])]),t._v(" "),s("li",[s("code",[t._v("tf.compat.v1.strings.to_hash_bucket_strong")])]),t._v(" "),s("li",[s("code",[t._v("tf.compat.v2.strings.to_hash_bucket_strong")])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" tf.strings.to_hash_bucket_strong(\n    input,\n    num_buckets,\n    key,\n    name=None\n)\n")])])]),s("p",[t._v("The hash function is deterministic on the content of the string within the process. The hash function is a keyed hash function, where attribute key defines the key of the hash function. key is an array of 2 elements.")]),t._v(" "),s("p",[t._v('A strong hash is important when inputs may be malicious, e.g. URLs with additional components. Adversaries could try to make their inputs hash to the same bucket for a denial-of-service attack or to skew the results. A strong hash can be used to make it difficult to find inputs with a skewed hash value distribution over buckets. This requires that the hash function is seeded by a high-entropy (random) "key" unknown to the adversary.')]),t._v(" "),s("p",[t._v("The additional robustness comes at a cost of roughly 4x higher compute time than tf.string_to_hash_bucket_fast.")]),t._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[t._v("#")]),t._v(" Args:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("input")]),t._v(": A "),s("code",[t._v("Tensor")]),t._v(" of type "),s("code",[t._v("string")]),t._v(". The "),s("code",[t._v("string")]),t._v("s to assign a hash bucket.")]),t._v(" "),s("li",[s("code",[t._v("num_buckets")]),t._v(": An "),s("code",[t._v("int")]),t._v(" that is "),s("code",[t._v(">= 1")]),t._v(". The number of buckets.")]),t._v(" "),s("li",[s("code",[t._v("key")]),t._v(": A list of "),s("code",[t._v("int")]),t._v("s. The "),s("code",[t._v("key")]),t._v(" used to seed the hash function, passed as a list of two u"),s("code",[t._v("int")]),t._v("64 elements.")]),t._v(" "),s("li",[s("code",[t._v("name")]),t._v(": A "),s("code",[t._v("name")]),t._v(" for the operation (optional).")])]),t._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns:")]),t._v(" "),s("p",[t._v("A Tensor of type int64.")])])}),[],!1,null,null,null);e.default=n.exports}}]);