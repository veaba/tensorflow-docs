(window.webpackJsonp=window.webpackJsonp||[]).push([[2166],{2354:function(e,t,o){"use strict";o.r(t);var n=o(0),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Defined in generated file: python/ops/gen_math_ops.py")]),e._v(" "),o("p",[e._v("Computes the product along segments of a tensor.")]),e._v(" "),o("h3",{attrs:{id:"aliases"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("tf.compat.v1.math.unsorted_segment_prod")])]),e._v(" "),o("li",[o("code",[e._v("tf.compat.v1.unsorted_segment_prod")])]),e._v(" "),o("li",[o("code",[e._v("tf.compat.v2.math.unsorted_segment_prod")])])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" tf.math.unsorted_segment_prod(\n    data,\n    segment_ids,\n    num_segments,\n    name=None\n)\n")])])]),o("p",[o("a",{attrs:{href:"https://tensorflow.org/api_docs/python/tf/math#Segmentation",target:"_blank",rel:"noopener noreferrer"}},[e._v("the section on segmentation"),o("OutboundLink")],1),e._v("Read  for an explanation of segments.")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://www.tensorflow.org/api_docs/api_docs/python/math_ops#UnsortedSegmentSum",target:"_blank",rel:"noopener noreferrer"}},[e._v("(here)"),o("OutboundLink")],1),e._v("This operator is similar to the unsorted segment sum operator found . Instead of computing the sum over segments, it computes the product of all entries belonging to a segment such that:")]),e._v(" "),o("p",[e._v("where the product is over tuples j... such that segment_ids[j...] == i.")]),e._v(" "),o("h4",{attrs:{id:"for-example"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v(" c = tf.constant([[1,2,3,4], [5,6,7,8], [4,3,2,1]])\ntf.unsorted_segment_prod(c, tf.constant([0, 1, 0]), num_segments=2)\n# ==> [[ 4,  6, 6, 4],\n#       [5,  6, 7, 8]]\n")])])]),o("p",[e._v("If there is no entry for a given segment ID i, it outputs 1.")]),e._v(" "),o("p",[e._v("If the given segment ID i is negative, then the corresponding value is dropped, and will not be included in the result.")]),e._v(" "),o("h4",{attrs:{id:"args"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("data")]),e._v(": A "),o("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),o("code",[e._v("float32")]),e._v(", "),o("code",[e._v("float64")]),e._v(", "),o("code",[e._v("int32")]),e._v(", "),o("code",[e._v("uint8")]),e._v(", "),o("code",[e._v("int16")]),e._v(", "),o("code",[e._v("int8")]),e._v(", "),o("code",[e._v("complex64")]),e._v(", "),o("code",[e._v("int64")]),e._v(", "),o("code",[e._v("qint8")]),e._v(", "),o("code",[e._v("quint8")]),e._v(", "),o("code",[e._v("qint32")]),e._v(", "),o("code",[e._v("bfloat16")]),e._v(", "),o("code",[e._v("uint16")]),e._v(", "),o("code",[e._v("complex128")]),e._v(", "),o("code",[e._v("half")]),e._v(", "),o("code",[e._v("uint32")]),e._v(", "),o("code",[e._v("uint64")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("segment_ids")]),e._v(": A "),o("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),o("code",[e._v("int32")]),e._v(", "),o("code",[e._v("int64")]),e._v(". A tensor whose shape is a prefix of "),o("code",[e._v("data")]),e._v(".shape.")]),e._v(" "),o("li",[o("code",[e._v("num_segments")]),e._v(": A "),o("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),o("code",[e._v("int32")]),e._v(", "),o("code",[e._v("int64")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("name")]),e._v(": A "),o("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),o("h4",{attrs:{id:"returns"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),o("p",[e._v("A Tensor. Has the same type as data.")])])}),[],!1,null,null,null);t.default=s.exports}}]);