(window.webpackJsonp=window.webpackJsonp||[]).push([[1724],{1915:function(e,t,s){"use strict";s.r(t);var a=s(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"class-abstractrnncell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class-abstractrnncell","aria-hidden":"true"}},[e._v("#")]),e._v(" Class AbstractRNNCell")]),e._v(" "),s("p",[e._v("Abstract object representing an RNN cell.\n"),s("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/keras/layers/Layer",target:"_blank",rel:"noopener noreferrer"}},[e._v("Layer"),s("OutboundLink")],1),e._v("Inherits From:")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[e._v("Class "),s("code",[e._v("tf.compat.v1.keras.layers.AbstractRNNCell")])]),e._v(" "),s("li",[e._v("Class "),s("code",[e._v("tf.compat.v2.keras.layers.AbstractRNNCell")])])]),e._v(" "),s("p",[e._v("This is the base class for implementing RNN cells with custom behavior.")]),e._v(" "),s("p",[e._v("Every RNNCell must have the properties below and implement call with the signature (output, next_state) = call(input, state).")]),e._v(" "),s("h4",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("   class MinimalRNNCell(AbstractRNNCell):\n\n    def __init__(self, units, **kwargs):\n      self.units = units\n      super(MinimalRNNCell, self).__init__(**kwargs)\n\n    @property\n    def state_size(self):\n      return self.units\n\n    def build(self, input_shape):\n      self.kernel = self.add_weight(shape=(input_shape[-1], self.units),\n                                    initializer='uniform',\n                                    name='kernel')\n      self.recurrent_kernel = self.add_weight(\n          shape=(self.units, self.units),\n          initializer='uniform',\n          name='recurrent_kernel')\n      self.built = True\n\n    def call(self, inputs, states):\n      prev_output = states[0]\n      h = K.dot(inputs, self.kernel)\n      output = h + K.dot(prev_output, self.recurrent_kernel)\n      return output, output\n")])])]),s("p",[e._v("This definition of cell differs from the definition used in the literature. In the literature, 'cell' refers to an object with a single scalar output. This definition refers to a horizontal array of such units.")]),e._v(" "),s("p",[e._v("An RNN cell, in the most abstract setting, is anything that has a state and performs some operation that takes a matrix of inputs. This operation results in an output matrix with self.output_size columns. If self.state_size is an integer, this operation also results in a new state matrix with self.state_size columns. If self.state_size is a (possibly nested tuple of) TensorShape object(s), then it should return a matching structure of Tensors having shape [batch_size].concatenate(s) for each s in self.batch_size.")]),e._v(" "),s("h2",{attrs:{id:"init"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),s("strong",[e._v("init")])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/engine/base_layer.py#L277-L363",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" __init__(\n    trainable=True,\n    name=None,\n    dtype=None,\n    dynamic=False,\n    **kwargs\n)\n")])])]),s("h2",{attrs:{id:"properties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),s("h3",{attrs:{id:"output-size"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#output-size","aria-hidden":"true"}},[e._v("#")]),e._v(" output_size")]),e._v(" "),s("p",[e._v("Integer or TensorShape: size of outputs produced by this cell.")]),e._v(" "),s("h3",{attrs:{id:"state-size"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#state-size","aria-hidden":"true"}},[e._v("#")]),e._v(" state_size")]),e._v(" "),s("p",[e._v("size(s) of state(s) used by this cell.")]),e._v(" "),s("p",[e._v("It can be represented by an Integer, a TensorShape or a tuple of Integers or TensorShapes.")]),e._v(" "),s("h2",{attrs:{id:"methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),s("h3",{attrs:{id:"get-initial-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-initial-state","aria-hidden":"true"}},[e._v("#")]),e._v(" get_initial_state")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/layers/recurrent.py#L976-L977",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" get_initial_state(\n    inputs=None,\n    batch_size=None,\n    dtype=None\n)\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);