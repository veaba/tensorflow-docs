(window.webpackJsonp=window.webpackJsonp||[]).push([[2032],{2223:function(e,t,a){"use strict";a.r(t);var o=a(0),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Defined in generated file: python/ops/gen_linalg_ops.py")]),e._v(" "),a("p",[e._v("Solves systems of linear equations with upper or lower triangular matrices by backsubstitution.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.linalg.triangular_solve")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v1.matrix_triangular_solve")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.linalg.triangular_solve")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.linalg.triangular_solve(\n    matrix,\n    rhs,\n    lower=True,\n    adjoint=False,\n    name=None\n)\n")])])]),a("p",[e._v("matrix is a tensor of shape [..., M, M] whose inner-most 2 dimensions form square matrices. If lower is True then the strictly upper triangular part of each inner-most matrix is assumed to be zero and not accessed. If lower is False then the strictly lower triangular part of each inner-most matrix is assumed to be zero and not accessed. rhs is a tensor of shape [..., M, K].")]),e._v(" "),a("p",[e._v("The output is a tensor of shape [..., M, K]. If adjoint is True then the innermost matrices in output satisfy matrix equations matrix[..., :, :] * output[..., :, :] = rhs[..., :, :]. If adjoint is False then the strictly then the innermost matrices in output satisfy matrix equations adjoint(matrix[..., i, k]) * output[..., k, j] = rhs[..., i, j].")]),e._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" a = tf.constant([[3,  0,  0,  0],\n                 [2,  1,  0,  0],\n                 [1,  0,  1,  0],\n                 [1,  1,  1,  1]], dtype=tf.float32)\n\nb = tf.constant([[4],\n                 [2],\n                 [4],\n                 [2]], dtype=tf.float32)\n\nx = tf.linalg.triangular_solve(a, b, lower=True)\nx\n# <tf.Tensor: id=257, shape=(4, 1), dtype=float32, numpy=\n# array([[ 1.3333334 ],\n#        [-0.66666675],\n#        [ 2.6666665 ],\n#        [-1.3333331 ]], dtype=float32)>\n\n# in python3 one can use `a@x`\ntf.matmul(a, x)\n# <tf.Tensor: id=263, shape=(4, 1), dtype=float32, numpy=\n# array([[4.       ],\n#        [2.       ],\n#        [4.       ],\n#        [1.9999999]], dtype=float32)>\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("matrix")]),e._v(":"),a("code"),e._v("A"),a("code",[e._v("``Tensor``.`` ``M")]),e._v("ust"),a("code"),e._v("be"),a("code"),e._v("one"),a("code"),e._v("of"),a("code"),e._v("the"),a("code"),e._v("following"),a("code"),e._v("types:"),a("code",[e._v("``float64``,`` ``float32``,`` ``half``,`` ``complex64``,`` ``complex128``.``")]),e._v("Shape"),a("code"),e._v("is"),a("code"),e._v("["),a("code",[e._v(".``.``.``,`` ``M``,`` ``M")]),e._v("]"),a("code",[e._v(".")])]),e._v(" "),a("li",[a("code",[e._v("rhs")]),e._v(":"),a("code"),e._v("A"),a("code",[e._v("``Tensor``.`` ``M")]),e._v("ust"),a("code"),e._v("have"),a("code"),e._v("the"),a("code"),e._v("same"),a("code"),e._v("type"),a("code"),e._v("as"),a("code",[e._v("``matrix``.``")]),e._v("Shape"),a("code"),e._v("is"),a("code"),e._v("["),a("code",[e._v(".``.``.``,`` ``M``,`` ``K")]),e._v("]"),a("code",[e._v(".")])]),e._v(" "),a("li",[a("code",[e._v("lower")]),e._v(":"),a("code"),e._v("An"),a("code"),e._v("optional"),a("code",[e._v("``bool``.``")]),e._v("Defaults"),a("code"),e._v("to"),a("code",[e._v("``True``.``")]),e._v("Boolean"),a("code"),e._v("indicating"),a("code"),e._v("whether"),a("code"),e._v("the"),a("code"),e._v("innermost"),a("code"),e._v("matrices"),a("code"),e._v("in"),a("code",[e._v("``matrix``")]),e._v("are"),a("code",[e._v("``lower``")]),e._v("or"),a("code"),e._v("upper"),a("code"),e._v("triangular"),a("code",[e._v(".")])]),e._v(" "),a("li",[a("code",[e._v("adjoint")]),e._v(":"),a("code"),e._v("An"),a("code"),e._v("optional"),a("code",[e._v("``bool``.``")]),e._v("Defaults"),a("code"),e._v("to"),a("code",[e._v("``False``.``")]),e._v("Boolean"),a("code"),e._v("indicating"),a("code"),e._v("whether"),a("code"),e._v("to"),a("code"),e._v("solve"),a("code"),e._v("with"),a("code",[e._v("``matrix``")]),e._v("or"),a("code"),e._v("its"),a("code"),e._v("(block-wise)"),a("code",[e._v("``adjoint``.")])]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(":"),a("code"),e._v("A"),a("code",[e._v("``name``")]),e._v("for"),a("code"),e._v("the"),a("code"),e._v("operation"),a("code"),e._v("(optional)"),a("code",[e._v(".")])])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A Tensor. Has the same type as matrix.")]),e._v(" "),a("h4",{attrs:{id:"numpy-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#numpy-compatibility","aria-hidden":"true"}},[e._v("#")]),e._v(" Numpy Compatibility")]),e._v(" "),a("p",[e._v("Equivalent to scipy.linalg.solve_triangular")])])}),[],!1,null,null,null);t.default=s.exports}}]);