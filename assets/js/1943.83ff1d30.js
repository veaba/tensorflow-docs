(window.webpackJsonp=window.webpackJsonp||[]).push([[1943],{2134:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Pads sequences to the same length.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.keras.preprocessing.sequence.pad_sequences")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.keras.preprocessing.sequence.pad_sequences")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.keras.preprocessing.sequence.pad_sequences(\n    sequences,\n    maxlen=None,\n    dtype='int32',\n    padding='pre',\n    truncating='pre',\n    value=0.0\n)\n")])])]),a("h3",{attrs:{id:"used-in-the-guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("M")]),e._v("a"),a("code",[e._v("s")]),e._v("k"),a("code",[e._v("i")]),e._v("n"),a("code",[e._v("g")]),e._v(" "),a("code",[e._v("a")]),e._v("n"),a("code",[e._v("d")]),e._v(" "),a("code",[e._v("p")]),e._v("a"),a("code",[e._v("d")]),e._v("d"),a("code",[e._v("i")]),e._v("n"),a("code",[e._v("g")]),e._v(" "),a("code",[e._v("w")]),e._v("i"),a("code",[e._v("t")]),e._v("h"),a("code"),e._v("K"),a("code",[e._v("e")]),e._v("r"),a("code",[e._v("a")]),e._v("s``")])]),e._v(" "),a("h3",{attrs:{id:"used-in-the-tutorials"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("I")]),e._v("m"),a("code",[e._v("a")]),e._v("g"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("c")]),e._v("a"),a("code",[e._v("p")]),e._v("t"),a("code",[e._v("i")]),e._v("o"),a("code",[e._v("n")]),e._v("i"),a("code",[e._v("n")]),e._v("g"),a("code"),e._v("w"),a("code",[e._v("i")]),e._v("t"),a("code",[e._v("h")]),e._v(" "),a("code",[e._v("v")]),e._v("i"),a("code",[e._v("s")]),e._v("u"),a("code",[e._v("a")]),e._v("l"),a("code"),e._v("a"),a("code",[e._v("t")]),e._v("t"),a("code",[e._v("e")]),e._v("n"),a("code",[e._v("t")]),e._v("i"),a("code",[e._v("o")]),e._v("n``")]),e._v(" "),a("li",[a("code",[e._v("N")]),e._v("e"),a("code",[e._v("u")]),e._v("r"),a("code",[e._v("a")]),e._v("l"),a("code"),e._v("m"),a("code",[e._v("a")]),e._v("c"),a("code",[e._v("h")]),e._v("i"),a("code",[e._v("n")]),e._v("e"),a("code"),e._v("t"),a("code",[e._v("r")]),e._v("a"),a("code",[e._v("n")]),e._v("s"),a("code",[e._v("l")]),e._v("a"),a("code",[e._v("t")]),e._v("i"),a("code",[e._v("o")]),e._v("n"),a("code"),e._v("w"),a("code",[e._v("i")]),e._v("t"),a("code",[e._v("h")]),e._v(" "),a("code",[e._v("a")]),e._v("t"),a("code",[e._v("t")]),e._v("e"),a("code",[e._v("n")]),e._v("t"),a("code",[e._v("i")]),e._v("o"),a("code",[e._v("n")])])]),e._v(" "),a("p",[e._v("This function transforms a list of num_samples sequences (lists of integers) into a 2D Numpy array of shape (num_samples, num_timesteps). num_timesteps is either the maxlen argument if provided, or the length of the longest sequence otherwise.")]),e._v(" "),a("p",[e._v("Sequences that are shorter than num_timesteps are padded with value at the end.")]),e._v(" "),a("p",[e._v("Sequences longer than num_timesteps are truncated so that they fit the desired length. The position where padding or truncation happens is determined by the arguments padding and truncating, respectively.")]),e._v(" "),a("p",[e._v("Pre-padding is the default.")]),e._v(" "),a("h1",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" sequences: List of lists, where each element is a sequence.\nmaxlen: Int, maximum length of all sequences.\ndtype: Type of the output sequences.\n    To pad sequences with variable length strings, you can use `object`.\npadding: String, 'pre' or 'post':\n    pad either before or after each sequence.\ntruncating: String, 'pre' or 'post':\n    remove values from sequences larger than\n    `maxlen`, either at the beginning or at the end of the sequences.\nvalue: Float or String, padding value.\n")])])]),a("h1",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" x: Numpy array with shape `(len(sequences), maxlen)`\n")])])]),a("h1",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" ValueError: In case of invalid values for `truncating` or `padding`,\n    or in case of invalid shape for a `sequences` entry.\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);