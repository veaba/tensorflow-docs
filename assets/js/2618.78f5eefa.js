(window.webpackJsonp=window.webpackJsonp||[]).push([[2618],{2809:function(e,t,v){"use strict";v.r(t);var o=v(0),_=Object(o.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("Creates a tensor with all elements set to zero.")]),e._v(" "),v("h3",{attrs:{id:"aliases"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("tf.compat.v2.zeros_like")])])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v(" tf.zeros_like(\n    input,\n    dtype=None,\n    name=None\n)\n")])])]),v("h3",{attrs:{id:"used-in-the-tutorials"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("C")]),e._v("y"),v("code",[e._v("c")]),e._v("l"),v("code",[e._v("e")]),e._v("G"),v("code",[e._v("A")]),e._v("N``")]),e._v(" "),v("li",[v("code",[e._v("D")]),e._v("e"),v("code",[e._v("e")]),e._v("p"),v("code"),e._v("C"),v("code",[e._v("o")]),e._v("n"),v("code",[e._v("v")]),e._v("o"),v("code",[e._v("l")]),e._v("u"),v("code",[e._v("t")]),e._v("i"),v("code",[e._v("o")]),e._v("n"),v("code",[e._v("a")]),e._v("l"),v("code"),e._v("G"),v("code",[e._v("e")]),e._v("n"),v("code",[e._v("e")]),e._v("r"),v("code",[e._v("a")]),e._v("t"),v("code",[e._v("i")]),e._v("v"),v("code",[e._v("e")]),e._v(" "),v("code",[e._v("A")]),e._v("d"),v("code",[e._v("v")]),e._v("e"),v("code",[e._v("r")]),e._v("s"),v("code",[e._v("a")]),e._v("r"),v("code",[e._v("i")]),e._v("a"),v("code",[e._v("l")]),e._v(" "),v("code",[e._v("N")]),e._v("e"),v("code",[e._v("t")]),e._v("w"),v("code",[e._v("o")]),e._v("r"),v("code",[e._v("k")])]),e._v(" "),v("li",[v("code",[e._v("D")]),e._v("e"),v("code",[e._v("e")]),e._v("p"),v("code",[e._v("D")]),e._v("r"),v("code",[e._v("e")]),e._v("a"),v("code",[e._v("m")])]),e._v(" "),v("li",[v("code",[e._v("P")]),e._v("i"),v("code",[e._v("x")]),e._v("2"),v("code",[e._v("P")]),e._v("i"),v("code",[e._v("x")]),e._v("\nGiven a single "),v("code",[e._v("tensor")]),e._v(" ("),v("code",[e._v("tensor")]),e._v("), this operation returns a "),v("code",[e._v("tensor")]),e._v(" of the same type and shape as "),v("code",[e._v("tensor")]),e._v(" with all elements set to zero. Optionally, you can use "),v("code",[e._v("dtype")]),e._v(" to specify a new type for the returned "),v("code",[e._v("tensor")]),e._v(".")])]),e._v(" "),v("h4",{attrs:{id:"for-example"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v(" tensor = tf.constant([[1, 2, 3], [4, 5, 6]])\ntf.zeros_like(tensor)  # [[0, 0, 0], [0, 0, 0]] with dtype=int32\n\nIf dtype of input `tensor` is `float32`, then the output is also of `float32`\ntensor = tf.constant([[1.0, 2.0, 3.0], [4, 5, 6]])\ntf.zeros_like(tensor)  # [[0., 0., 0.], [0., 0., 0.]] with dtype=floa32\n\nIf you want to specify desired dtype of output `tensor`, then specify it in\nthe op tensor = tf.constant([[1.0, 2.0, 3.0], [4, 5, 6]])\ntf.zeros_like(tensor,dtype=tf.int32)  # [[0, 0, 0], [0, 0, 0]] with\ndtype=int32\n")])])]),v("h4",{attrs:{id:"args"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("input")]),e._v(": A "),v("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("dtype")]),e._v(": A type for the returned "),v("code",[e._v("Tensor")]),e._v(". Must be "),v("code",[e._v("float16")]),e._v(", "),v("code",[e._v("float32")]),e._v(", "),v("code",[e._v("float64")]),e._v(", "),v("code",[e._v("int8")]),e._v(", "),v("code",[e._v("uint8")]),e._v(", "),v("code",[e._v("int16")]),e._v(", "),v("code",[e._v("uint16")]),e._v(", "),v("code",[e._v("int32")]),e._v(", "),v("code",[e._v("int64")]),e._v(", "),v("code",[e._v("complex64")]),e._v(", "),v("code",[e._v("complex128")]),e._v(", "),v("code",[e._v("bool")]),e._v(" or "),v("code",[e._v("string")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("name")]),e._v(": A "),v("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),v("h4",{attrs:{id:"returns"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),v("p",[e._v("A "),v("code",[e._v("Tensor")]),e._v(" with all elements set to zero.")])])}),[],!1,null,null,null);t.default=_.exports}}]);