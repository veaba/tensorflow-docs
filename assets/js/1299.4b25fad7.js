(window.webpackJsonp=window.webpackJsonp||[]).push([[1299],{1488:function(e,r,t){"use strict";t.r(r);var s=t(0),a=Object(s.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"class-servinginputreceiver"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-servinginputreceiver","aria-hidden":"true"}},[e._v("#")]),e._v(" Class ServingInputReceiver")]),e._v(" "),t("p",[e._v("A return type for a serving_input_receiver_fn.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[e._v("Class "),t("code",[e._v("tf.compat.v1.estimator.export.ServingInputReceiver")])]),e._v(" "),t("li",[e._v("Class "),t("code",[e._v("tf.compat.v2.estimator.export.ServingInputReceiver")])])]),e._v(" "),t("p",[e._v("The expected return values are: features: A Tensor, SparseTensor, or dict of string or int to Tensor or SparseTensor, specifying the features to be passed to the model. Note: if features passed is not a dict, it will be wrapped in a dict with a single entry, using 'feature' as the key. Consequently, the model must accept a feature dict of the form {'feature': tensor}. You may use TensorServingInputReceiver if you want the tensor to be passed as is. receiver_tensors: A Tensor, SparseTensor, or dict of string to Tensor or SparseTensor, specifying input nodes where this receiver expects to be fed by default. Typically, this is a single placeholder expecting serialized tf.Example protos. receiver_tensors_alternatives: a dict of string to additional groups of receiver tensors, each of which may be a Tensor, SparseTensor, or dict of string to Tensor orSparseTensor. These named receiver tensor alternatives generate additional serving signatures, which may be used to feed inputs at different points within the input receiver subgraph. A typical usage is to allow feeding raw feature Tensors downstream of the tf.parse_example() op. Defaults to None.")]),e._v(" "),t("h2",{attrs:{id:"new"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new","aria-hidden":"true"}},[e._v("#")]),e._v(" "),t("strong",[e._v("new")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/export/export.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" @staticmethod\n__new__(\n    cls,\n    features,\n    receiver_tensors,\n    receiver_tensors_alternatives=None\n)\n")])])]),t("p",[e._v("Create new instance of ServingInputReceiver(features, receiver_tensors, receiver_tensors_alternatives)")]),e._v(" "),t("h2",{attrs:{id:"properties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),t("h3",{attrs:{id:"features"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#features","aria-hidden":"true"}},[e._v("#")]),e._v(" features")]),e._v(" "),t("h3",{attrs:{id:"receiver-tensors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#receiver-tensors","aria-hidden":"true"}},[e._v("#")]),e._v(" receiver_tensors")]),e._v(" "),t("h3",{attrs:{id:"receiver-tensors-alternatives"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#receiver-tensors-alternatives","aria-hidden":"true"}},[e._v("#")]),e._v(" receiver_tensors_alternatives")])])}),[],!1,null,null,null);r.default=a.exports}}]);