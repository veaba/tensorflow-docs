(window.webpackJsonp=window.webpackJsonp||[]).push([[803],{991:function(e,t,s){"use strict";s.r(t);var a=s(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Split elements of input based on sep.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.compat.v1.strings.split(\n    input=None,\n    sep=None,\n    maxsplit=-1,\n    result_type='SparseTensor',\n    source=None,\n    name=None\n)\n")])])]),s("p",[e._v("Let N be the size of input (typically N will be the batch size). Split each element of input based on sep and return a SparseTensor or RaggedTensor containing the split tokens. Empty tokens are ignored.")]),e._v(" "),s("h4",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.strings.split(['hello world', 'a b c'])\ntf.SparseTensor(indices=[[0, 0], [0, 1], [1, 0], [1, 1], [1, 2]],\n                values=['hello', 'world', 'a', 'b', 'c']\n                dense_shape=[2, 3])\n\n")])])]),s("p",[e._v("tf.strings.split(['hello world', 'a b c'], result_type=\"RaggedTensor\")\n<tf.RaggedTensor [['hello', 'world'], ['a', 'b', 'c']]>")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\n")])])]),s("p",[e._v("If "),s("code",[e._v("sep")]),e._v(" is given, consecutive delimiters are not grouped together and are\ndeemed to delimit empty strings. For example, "),s("code",[e._v("input")]),e._v(" of "),s("code",[e._v('"1<>2<><>3"')]),e._v(" and\n"),s("code",[e._v("sep")]),e._v(" of "),s("code",[e._v('"<>"')]),e._v(" returns "),s("code",[e._v('["1", "2", "", "3"]')]),e._v(". If "),s("code",[e._v("sep")]),e._v(" is None or an empty\nstring, consecutive whitespace are regarded as a single separator, and the\nresult will contain no empty strings at the start or end if the string has\nleading or trailing whitespace.")]),e._v(" "),s("p",[e._v("Note that the above mentioned behavior matches python's str.split.")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("b",[s("code",[e._v("input")])]),e._v(": A string "),s("code",[e._v("Tensor")]),e._v(" of rank "),s("code",[e._v("N")]),e._v(", the strings to split.  If\n"),s("code",[e._v("rank(input)")]),e._v(" is not known statically, then it is assumed to be "),s("code",[e._v("1")]),e._v(".")]),e._v(" "),s("li",[s("b",[s("code",[e._v("sep")])]),e._v(": "),s("code",[e._v("0-D")]),e._v(" string "),s("code",[e._v("Tensor")]),e._v(", the delimiter character.")]),e._v(" "),s("li",[s("b",[s("code",[e._v("maxsplit")])]),e._v(": An "),s("code",[e._v("int")]),e._v(". If "),s("code",[e._v("maxsplit > 0")]),e._v(", limit of the split of the result.")]),e._v(" "),s("li",[s("b",[s("code",[e._v("result_type")])]),e._v(": The tensor type for the result: one of "),s("code",[e._v('"RaggedTensor"')]),e._v(" or\n"),s("code",[e._v('"SparseTensor"')]),e._v(".")]),e._v(" "),s("li",[s("b",[s("code",[e._v("source")])]),e._v(': alias for "input" argument.')]),e._v(" "),s("li",[s("b",[s("code",[e._v("name")])]),e._v(": A name for the operation (optional).")])]),e._v(" "),s("h4",{attrs:{id:"raises"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),s("ul",[s("li",[s("b",[s("code",[e._v("ValueError")])]),e._v(": If sep is not a string.")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A "),s("code",[e._v("SparseTensor")]),e._v(" or "),s("code",[e._v("RaggedTensor")]),e._v(" of rank "),s("code",[e._v("N+1")]),e._v(", the strings split\naccording to the delimiter.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")])])])}),[],!1,null,null,null);t.default=r.exports}}]);