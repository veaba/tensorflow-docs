(window.webpackJsonp=window.webpackJsonp||[]).push([[1279],{1468:function(e,t,a){"use strict";a.r(t);var r=a(0),i=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.estimator.Estimator"),a("OutboundLink")],1),e._v("Creates a new  which has given metrics.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.estimator.add_metrics")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.estimator.add_metrics")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.estimator.add_metrics(\n    estimator,\n    metric_fn\n)\n")])])]),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("   def my_auc(labels, predictions):\n    auc_metric = tf.keras.metrics.AUC(name=\"my_auc\")\n    auc_metric.update_state(y_true=labels, y_pred=predictions['logistic'])\n    return {'auc': auc_metric}\n\n  estimator = tf.estimator.DNNClassifier(...)\n  estimator = tf.estimator.add_metrics(estimator, my_auc)\n  estimator.train(...)\n  estimator.evaluate(...)\n")])])]),a("p",[e._v("Example usage of custom metric which uses features:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("   def my_auc(labels, predictions, features):\n    auc_metric = tf.keras.metrics.AUC(name=\"my_auc\")\n    auc_metric.update_state(y_true=labels, y_pred=predictions['logistic'],\n                            sample_weight=features['weight'])\n    return {'auc': auc_metric}\n\n  estimator = tf.estimator.DNNClassifier(...)\n  estimator = tf.estimator.add_metrics(estimator, my_auc)\n  estimator.train(...)\n  estimator.evaluate(...)\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("estimator")]),e._v(": A "),a("code",[e._v("tf.estimator.Estimator")]),e._v(" object.")]),e._v(" "),a("li",[a("code",[e._v("metric_fn")]),e._v(": A function which should obey the following signature:\nArgs: can only have following four arguments in any order:\npre"),a("code",[e._v("dict")]),e._v("ions: Pre"),a("code",[e._v("dict")]),e._v("ions "),a("code",[e._v("Tensor")]),e._v(" or "),a("code",[e._v("dict")]),e._v(" of "),a("code",[e._v("Tensor")]),e._v(" created by given "),a("code",[e._v("estimator")]),e._v(".\nfeatures: Input "),a("code",[e._v("dict")]),e._v(" of "),a("code",[e._v("Tensor")]),e._v(" objects created by "),a("code",[e._v("input_fn")]),e._v(" which is given to "),a("code",[e._v("estimator")]),e._v(".evaluate as an argument.\nlabels: Labels "),a("code",[e._v("Tensor")]),e._v(" or "),a("code",[e._v("dict")]),e._v(" of "),a("code",[e._v("Tensor")]),e._v(" created by "),a("code",[e._v("input_fn")]),e._v(" which is given to "),a("code",[e._v("estimator")]),e._v(".evaluate as an argument.\nconfig: config attribute of the "),a("code",[e._v("estimator")]),e._v(".\nReturns: Dict of metric results keyed by name. Final metrics are a union of this and "),a("code",[e._v("estimator")]),e._v("'s existing metrics. If there is a name conflict between this and "),a("code",[e._v("estimator")]),e._v("s existing metrics, this will override the existing one. The values of the "),a("code",[e._v("dict")]),e._v(" are the results of calling a metric function, namely a ("),a("code",[e._v("metric_tensor, update_op")]),e._v(") tuple.")]),e._v(" "),a("li",[e._v("Args: can only have following four arguments in any order:")]),e._v(" "),a("li",[e._v("pre"),a("code",[e._v("dict")]),e._v("ions: Pre"),a("code",[e._v("dict")]),e._v("ions "),a("code",[e._v("Tensor")]),e._v(" or "),a("code",[e._v("dict")]),e._v(" of "),a("code",[e._v("Tensor")]),e._v(" created by given "),a("code",[e._v("estimator")]),e._v(".")]),e._v(" "),a("li",[e._v("features: Input "),a("code",[e._v("dict")]),e._v(" of "),a("code",[e._v("Tensor")]),e._v(" objects created by "),a("code",[e._v("input_fn")]),e._v(" which is given to "),a("code",[e._v("estimator")]),e._v(".evaluate as an argument.")]),e._v(" "),a("li",[e._v("labels: Labels "),a("code",[e._v("Tensor")]),e._v(" or "),a("code",[e._v("dict")]),e._v(" of "),a("code",[e._v("Tensor")]),e._v(" created by "),a("code",[e._v("input_fn")]),e._v(" which is given to "),a("code",[e._v("estimator")]),e._v(".evaluate as an argument.")]),e._v(" "),a("li",[e._v("config: config attribute of the "),a("code",[e._v("estimator")]),e._v(".")]),e._v(" "),a("li",[e._v("Returns: Dict of metric results keyed by name. Final metrics are a union of this and "),a("code",[e._v("estimator")]),e._v("'s existing metrics. If there is a name conflict between this and "),a("code",[e._v("estimator")]),e._v("s existing metrics, this will override the existing one. The values of the "),a("code",[e._v("dict")]),e._v(" are the results of calling a metric function, namely a ("),a("code",[e._v("metric_tensor, update_op")]),e._v(") tuple.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.estimator.Estimator"),a("OutboundLink")],1),e._v("A new  which has a union of original metrics with given ones.")])])}),[],!1,null,null,null);t.default=i.exports}}]);