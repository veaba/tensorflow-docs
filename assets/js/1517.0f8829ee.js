(window.webpackJsonp=window.webpackJsonp||[]).push([[1517],{1708:function(a,t,e){"use strict";e.r(t);var s=e(0),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("Turn a nD tensor into a 2D tensor with same 0th dimension.")]),a._v(" "),e("h3",{attrs:{id:"aliases"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[a._v("#")]),a._v(" Aliases:")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("tf.compat.v1.keras.backend.batch_flatten")])]),a._v(" "),e("li",[e("code",[a._v("tf.compat.v2.keras.backend.batch_flatten")])])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" tf.keras.backend.batch_flatten(x)\n")])])]),e("p",[a._v("In other words, it flattens each data samples of a batch.")]),a._v(" "),e("h4",{attrs:{id:"arguments"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[a._v("#")]),a._v(" Arguments:")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("x")]),a._v(": A tensor or variable.")])]),a._v(" "),e("h4",{attrs:{id:"returns"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[a._v("#")]),a._v(" Returns:")]),a._v(" "),e("p",[a._v("A tensor.")]),a._v(" "),e("h4",{attrs:{id:"examples"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[a._v("#")]),a._v(" Examples:")]),a._v(" "),e("p",[a._v("Flattening a 3D tensor to 2D by collapsing the last dimension.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("     >>> from tensorflow.keras import backend as K\n    >>> x_batch = K.ones(shape=(2, 3, 4, 5))\n    >>> x_batch_flatten = K.batch_flatten(x_batch)\n    >>> K.int_shape(x_batch_flatten)\n    (2, 60)\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);