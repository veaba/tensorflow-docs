(window.webpackJsonp=window.webpackJsonp||[]).push([[722],{910:function(e,s,t){"use strict";t.r(s);var a=t(0),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Computes log(sum(exp(elements across dimensions of a tensor))). (deprecated arguments)")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.math.reduce_logsumexp")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.compat.v1.reduce_logsumexp(\n    input_tensor,\n    axis=None,\n    keepdims=None,\n    name=None,\n    reduction_indices=None,\n    keep_dims=None\n)\n")])])]),t("p",[e._v("Reduces input_tensor along the dimensions given in axis. Unless keepdims is true, the rank of the tensor is reduced by 1 for each entry in axis. If keepdims is true, the reduced dimensions are retained with length 1.")]),e._v(" "),t("p",[e._v("If axis has no entries, all dimensions are reduced, and a tensor with a single element is returned.")]),e._v(" "),t("p",[e._v("This function is more numerically stable than log(sum(exp(input))). It avoids overflows caused by taking the exp of large inputs and underflows caused by taking the log of small inputs.")]),e._v(" "),t("h4",{attrs:{id:"for-example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" x = tf.constant([[0., 0., 0.], [0., 0., 0.]])\ntf.reduce_logsumexp(x)  # log(6)\ntf.reduce_logsumexp(x, 0)  # [log(2), log(2), log(2)]\ntf.reduce_logsumexp(x, 1)  # [log(3), log(3)]\ntf.reduce_logsumexp(x, 1, keepdims=True)  # [[log(3)], [log(3)]]\ntf.reduce_logsumexp(x, [0, 1])  # log(6)\n")])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("input_tensor")]),e._v(": The tensor to reduce. Should have numeric type.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("The reduced tensor.")])])}),[],!1,null,null,null);s.default=n.exports}}]);