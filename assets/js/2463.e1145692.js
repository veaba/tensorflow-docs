(window.webpackJsonp=window.webpackJsonp||[]).push([[2463],{2651:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v('Returns CheckpointState proto from the "checkpoint" file.')]),t._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[t._v("#")]),t._v(" Aliases:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("tf.compat.v1.train.get_checkpoint_state")])]),t._v(" "),a("li",[a("code",[t._v("tf.compat.v2.train.get_checkpoint_state")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" tf.train.get_checkpoint_state(\n    checkpoint_dir,\n    latest_filename=None\n)\n")])])]),a("p",[t._v('If the "checkpoint" file contains a valid CheckpointState proto, returns it.')]),t._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[t._v("#")]),t._v(" Args:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("checkpoint_dir")]),t._v(": The directory of checkpoints.")]),t._v(" "),a("li",[a("code",[t._v("latest_filename")]),t._v(": Optional name of the checkpoint file. Default to 'checkpoint'.")])]),t._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns:")]),t._v(" "),a("p",[t._v("A CheckpointState if the state was available, None otherwise.")]),t._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[t._v("#")]),t._v(" Raises:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ValueError")]),t._v(": if the checkpoint read doesn't have model_checkpoint_path set.")])])])}),[],!1,null,null,null);e.default=r.exports}}]);