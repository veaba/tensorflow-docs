(window.webpackJsonp=window.webpackJsonp||[]).push([[2162],{2350:function(e,t,a){"use strict";a.r(t);var i=a(0),r=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Divides x / y elementwise (using Python 3 division operator semantics).")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.RaggedTensor.__truediv__")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v1.RaggedTensor.__truediv__")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v1.math.truediv")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v1.truediv")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.RaggedTensor.__truediv__")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.math.truediv")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.truediv")])]),e._v(" "),a("li",[a("code",[e._v("tf.truediv")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.math.truediv(\n    x,\n    y,\n    name=None\n)\n")])])]),a("p",[e._v("NOTE: Prefer using the Tensor operator or tf.divide which obey Python division operator semantics.")]),e._v(" "),a("p",[e._v("This function forces Python 3 division operator semantics where all integer arguments are cast to floating types first. This op is generated by normal x / y division in Python 3 and in Python 2.7 with from "),a("strong",[e._v("future")]),e._v(" import division. If you want integer division that rounds down, use x // y or tf.math.floordiv.")]),e._v(" "),a("p",[e._v("x and y must have the same numeric type. If the inputs are floating point, the output will have the same type. If the inputs are integral, the inputs are cast to float32 for int8 and int16 and float64 for int32 and int64 (matching the behavior of Numpy).")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("x")]),e._v(": "),a("code",[e._v("Tensor")]),e._v(" numerator of numeric type.")]),e._v(" "),a("li",[a("code",[e._v("y")]),e._v(": "),a("code",[e._v("Tensor")]),e._v(" denominator of numeric t"),a("code",[e._v("y")]),e._v("pe.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("x / y evaluated in floating point.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("TypeError")]),e._v(": If "),a("code",[e._v("x")]),e._v(" and "),a("code",[e._v("y")]),e._v(" have different dt"),a("code",[e._v("y")]),e._v("pes.")])])])}),[],!1,null,null,null);t.default=r.exports}}]);