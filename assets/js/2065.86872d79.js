(window.webpackJsonp=window.webpackJsonp||[]).push([[2065],{2253:function(t,e,a){"use strict";a.r(e);var n=a(0),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Defined in generated file: python/ops/gen_math_ops.py")]),t._v(" "),a("p",[t._v("Computes the trignometric inverse tangent of x element-wise.")]),t._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[t._v("#")]),t._v(" Aliases:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("tf.atan")])]),t._v(" "),a("li",[a("code",[t._v("tf.compat.v1.atan")])]),t._v(" "),a("li",[a("code",[t._v("tf.compat.v1.math.atan")])]),t._v(" "),a("li",[a("code",[t._v("tf.compat.v2.atan")])]),t._v(" "),a("li",[a("code",[t._v("tf.compat.v2.math.atan")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" tf.math.atan(\n    x,\n    name=None\n)\n")])])]),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/math/atan",target:"_blank",rel:"noopener noreferrer"}},[t._v("tf.math.atan"),a("OutboundLink")],1),t._v("The  operation returns the inverse of tf.math.tan, such that if y = tf.math.tan(x) then, x = (y).")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/math/atan",target:"_blank",rel:"noopener noreferrer"}},[t._v("tf.math.atan"),a("OutboundLink")],1),t._v("Note: The output of  will lie within the invertible range of tan, i.e (-pi/2, pi/2).")]),t._v(" "),a("h4",{attrs:{id:"for-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[t._v("#")]),t._v(" For example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" # Note: [1.047, 0.785] ~= [(pi/3), (pi/4)]\nx = tf.constant([1.047, 0.785])\ny = tf.math.tan(x) # [1.731261, 0.99920404]\n\ntf.math.atan(y) # [1.047, 0.785] = x\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[t._v("#")]),t._v(" Args:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("x")]),t._v(": A "),a("code",[t._v("Tensor")]),t._v(". Must be one of the following types: "),a("code",[t._v("bfloat16")]),t._v(", "),a("code",[t._v("half")]),t._v(", "),a("code",[t._v("float32")]),t._v(", "),a("code",[t._v("float64")]),t._v(", "),a("code",[t._v("int32")]),t._v(", "),a("code",[t._v("int64")]),t._v(", "),a("code",[t._v("complex64")]),t._v(", "),a("code",[t._v("complex128")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("name")]),t._v(": A "),a("code",[t._v("name")]),t._v(" for the operation (optional).")])]),t._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns:")]),t._v(" "),a("p",[t._v("A Tensor. Has the same type as x.")])])}),[],!1,null,null,null);e.default=r.exports}}]);