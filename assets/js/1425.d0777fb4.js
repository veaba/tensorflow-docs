(window.webpackJsonp=window.webpackJsonp||[]).push([[1425],{1616:function(e,a,t){"use strict";t.r(a);var s=t(0),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Parses a single SequenceExample proto.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.io.parse_single_sequence_example")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v1.parse_single_sequence_example")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.io.parse_single_sequence_example")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.io.parse_single_sequence_example(\n    serialized,\n    context_features=None,\n    sequence_features=None,\n    example_name=None,\n    name=None\n)\n")])])]),t("p",[t("a",{attrs:{href:"https://www.tensorflow.org/code/tensorflow/core/example/example.proto",target:"_blank",rel:"noopener noreferrer"}},[e._v("SequenceExample"),t("OutboundLink")],1),e._v("Parses a single serialized  proto given in serialized.")]),e._v(" "),t("p",[e._v("This op parses a serialized sequence example into a tuple of dictionaries, each mapping keys to Tensor and SparseTensor objects. The first dictionary contains mappings for keys appearing in context_features, and the second dictionary contains mappings for keys appearing in sequence_features.")]),e._v(" "),t("p",[e._v("At least one of context_features and sequence_features must be provided and non-empty.")]),e._v(" "),t("p",[e._v("The context_features keys are associated with a SequenceExample as a whole, independent of time / frame. In contrast, the sequence_features keys provide a way to access variable-length data within the FeatureList section of the SequenceExample proto. While the shapes of context_features values are fixed with respect to frame, the frame dimension (the first dimension) of sequence_features values may vary between SequenceExample protos, and even between feature_list keys within the same SequenceExample.")]),e._v(" "),t("p",[e._v("context_features contains VarLenFeature and FixedLenFeature objects. Each VarLenFeature is mapped to a SparseTensor, and each FixedLenFeature is mapped to a Tensor, of the specified type, shape, and default value.")]),e._v(" "),t("p",[e._v("sequence_features contains VarLenFeature and FixedLenSequenceFeature objects. Each VarLenFeature is mapped to a SparseTensor, and each FixedLenSequenceFeature is mapped to a Tensor, each of the specified type. The shape will be (T,) + df.dense_shape for FixedLenSequenceFeature df, where T is the length of the associated FeatureList in the SequenceExample. For instance, FixedLenSequenceFeature([]) yields a scalar 1-D Tensor of static shape [None] and dynamic shape [T], while FixedLenSequenceFeature([k]) (for int k >= 1) yields a 2-D matrix Tensor of static shape [None, k] and dynamic shape [T, k].")]),e._v(" "),t("p",[e._v("Each SparseTensor corresponding to sequence_features represents a ragged vector. Its indices are [time, index], where time is the FeatureList entry and index is the value's index in the list of values associated with that time.")]),e._v(" "),t("p",[e._v("FixedLenFeature entries with a default_value and FixedLenSequenceFeature entries with allow_missing=True are optional; otherwise, we will fail if that Feature or FeatureList is missing from any example in serialized.")]),e._v(" "),t("p",[e._v("example_name may contain a descriptive name for the corresponding serialized proto. This may be useful for debugging purposes, but it has no effect on the output. If not None, example_name must be a scalar.")]),e._v(" "),t("p",[e._v("Note that the batch version of this function, tf.parse_sequence_example, is written for better memory efficiency and will be faster on large SequenceExamples.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("serialized")]),e._v(": A scalar (0-D Tensor) of type string, a single binary "),t("code",[e._v("serialized")]),e._v(" "),t("code",[e._v("SequenceExample")]),e._v(" proto.")]),e._v(" "),t("li",[t("code",[e._v("context_features")]),e._v(": A "),t("code",[e._v("dict")]),e._v(" mapping feature keys to "),t("code",[e._v("FixedLenFeature")]),e._v(" or "),t("code",[e._v("VarLenFeature")]),e._v(" values. These features are associated with a "),t("code",[e._v("SequenceExample")]),e._v(" as a whole.")]),e._v(" "),t("li",[t("code",[e._v("sequence_features")]),e._v(": A "),t("code",[e._v("dict")]),e._v(" mapping feature keys to "),t("code",[e._v("FixedLenSequenceFeature")]),e._v(" or "),t("code",[e._v("VarLenFeature")]),e._v(" values. These features are associated with data within the "),t("code",[e._v("FeatureList")]),e._v(" section of the "),t("code",[e._v("SequenceExample")]),e._v(" proto.")]),e._v(" "),t("li",[t("code",[e._v("example_name")]),e._v(": A scalar (0-D Tensor) of strings (optional), the name of the "),t("code",[e._v("serialized")]),e._v(" proto.")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": A "),t("code",[e._v("name")]),e._v(" for this operation (optional).")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A tuple of two dicts, each mapping keys to Tensors and SparseTensors. The first dict contains the context key/values. The second dict contains the feature_list key/values.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": if any feature is invalid.")])])])}),[],!1,null,null,null);a.default=n.exports}}]);