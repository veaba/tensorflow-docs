(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{204:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"class-feature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-feature","aria-hidden":"true"}},[e._v("#")]),e._v(" Class Feature")]),e._v(" "),a("p",[e._v("This enumeration represents optional conversion options.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[e._v("Class "),a("code",[e._v("tf.compat.v1.autograph.experimental.Feature")])]),e._v(" "),a("li",[e._v("Class "),a("code",[e._v("tf.compat.v2.autograph.experimental.Feature")])])]),e._v(" "),a("p",[e._v("These conversion options are experimental. They are subject to change without notice and offer no guarantees.")]),e._v(" "),a("p",[e._v("Example Usage")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" optionals= tf.autograph.experimental.Feature.EQUALITY_OPERATORS\n@tf.function(experimental_autograph_options=optionals)\ndef f(i):\n  if i == 0:  # EQUALITY_OPERATORS allows the use of == here.\n    tf.print('i is zero')\n")])])]),a("h4",{attrs:{id:"attributes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attributes","aria-hidden":"true"}},[e._v("#")]),e._v(" Attributes:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ALL")]),e._v(": Enable all features.")]),e._v(" "),a("li",[a("code",[e._v("AUTO_CONTROL_DEPS")]),e._v(": Insert of control dependencies in the generated code.")]),e._v(" "),a("li",[a("code",[e._v("ASSERT_STATEMENTS")]),e._v(": Convert Tensor-dependent assert statements to tf.Assert.")]),e._v(" "),a("li",[a("code",[e._v("BUILTIN_FUNCTIONS")]),e._v(": Convert builtin functions applied to Tensors to their TF counterparts.")]),e._v(" "),a("li",[a("code",[e._v("EQUALITY_OPERATORS")]),e._v(": Whether to convert the comparison operators, like equality. This is soon to be deprecated as support is being added to the Tensor class.")]),e._v(" "),a("li",[a("code",[e._v("LISTS")]),e._v(": Convert list idioms, like initializers, slices, append, etc.")]),e._v(" "),a("li",[a("code",[e._v("NAME_SCOPES")]),e._v(": Insert name scopes that name ops according to context, like the function they were defined in.")])]),e._v(" "),a("h2",{attrs:{id:"class-members"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-members","aria-hidden":"true"}},[e._v("#")]),e._v(" Class Members")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ALL")])]),e._v(" "),a("li",[a("code",[e._v("ASSERT_STATEMENTS")])]),e._v(" "),a("li",[a("code",[e._v("AUTO_CONTROL_DEPS")])]),e._v(" "),a("li",[a("code",[e._v("BUILTIN_FUNCTIONS")])]),e._v(" "),a("li",[a("code",[e._v("EQUALITY_OPERATORS")])]),e._v(" "),a("li",[a("code",[e._v("LISTS")])]),e._v(" "),a("li",[a("code",[e._v("NAME_SCOPES")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);