(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{319:function(e,_,v){"use strict";v.r(_);var o=v(0),c=Object(o.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("BatchToSpace for 4-D tensors of type T.")]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v(" tf.compat.v1.batch_to_space(\n    input,\n    crops,\n    block_size,\n    name=None,\n    block_shape=None\n)\n")])])]),v("p",[e._v("This is a legacy version of the more general BatchToSpaceND.")]),e._v(" "),v("p",[e._v("Rearranges (permutes) data from batch into blocks of spatial data, followed by cropping. This is the reverse transformation of SpaceToBatch. More specifically, this op outputs a copy of the input tensor where values from the batch dimension are moved in spatial blocks to the height and width dimensions, followed by cropping along the height and width dimensions.")]),e._v(" "),v("h4",{attrs:{id:"args"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("input")]),e._v(":"),v("code"),e._v("A"),v("code",[e._v("``Tensor")]),e._v("."),v("code"),e._v("4-D"),v("code",[e._v("``t``e")]),e._v("n"),v("code",[e._v("s``o")]),e._v("r"),v("code",[e._v("``w``i``t``h`` ``s``h``a``p``e``")]),e._v("["),v("code",[e._v("b``a``t``c``h``*``b``l``o``c``k``_``s``i``z``e``*``b``l``o``c``k``_``s``i``z``e``,`` ``h``e``i``g``h``t``_``p``a``d``/``b``l``o``c``k``_``s``i``z``e``,`` ``w``i``d``t``h``_``p``a``d``/``b``l``o``c``k``_``s``i``z``e``,`` ``d``e``p``t``h")]),e._v("]."),v("code"),e._v("N"),v("code",[e._v("o``t``e`` ``t``h``a``t`` ``t``h``e`` ``b``a``t``c``h`` ``s``i``z``e`` ``o")]),e._v("f"),v("code",[e._v("``t``h``e`` ``input`` ``t``e")]),e._v("n"),v("code",[e._v("s``o")]),e._v("r"),v("code"),e._v("mu"),v("code",[e._v("s``t`` ``b``e`` ``d``i")]),e._v("v"),v("code",[e._v("i``s``i``b``l``e`` ``b")]),e._v("y"),v("code",[e._v("``b``l``o``c``k``_``s``i``z``e`` ``*`` ``b``l``o``c``k``_``s``i``z``e")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("c")]),e._v("r"),v("code",[e._v("o``p``s")]),e._v(":"),v("code"),e._v("A"),v("code",[e._v("``Tensor")]),e._v("."),v("code"),e._v("Mu"),v("code",[e._v("s``t`` ``b``e`` ``o")]),e._v("n"),v("code",[e._v("e`` ``o")]),e._v("f"),v("code",[e._v("``t``h``e``")]),e._v("f"),v("code",[e._v("o``l``l``o``w``i")]),e._v("n"),v("code",[e._v("g`` ``t")]),e._v("y"),v("code",[e._v("p``e``s")]),e._v(":"),v("code",[e._v("``i")]),e._v("n"),v("code",[e._v("t")]),e._v("3"),v("code",[e._v("2``,`` ``i")]),e._v("n"),v("code",[e._v("t")]),e._v("64."),v("code",[e._v("``2")]),e._v("-D"),v("code",[e._v("``t``e")]),e._v("n"),v("code",[e._v("s``o")]),e._v("r"),v("code",[e._v("``o")]),e._v("f"),v("code"),e._v("n"),v("code",[e._v("o")]),e._v("n-n"),v("code",[e._v("e``g``a``t``i")]),e._v("v"),v("code",[e._v("e`` ``i")]),e._v("n"),v("code",[e._v("t``e``g``e")]),e._v("r"),v("code",[e._v("s`` ``w``i``t``h`` ``s``h``a``p``e``")]),e._v("["),v("code",[e._v("2``,`` ``2")]),e._v("]."),v("code"),e._v("I"),v("code",[e._v("t`` ``s``p``e``c``i")]),e._v("f"),v("code",[e._v("i``e``s`` ``h``o``w``")]),e._v("m"),v("code",[e._v("a")]),e._v("ny"),v("code",[e._v("``e``l``e")]),e._v("m"),v("code",[e._v("e")]),e._v("n"),v("code",[e._v("t``s`` ``t``o`` ``c")]),e._v("r"),v("code",[e._v("o``p``")]),e._v("fr"),v("code",[e._v("o")]),e._v("m"),v("code",[e._v("``t``h``e`` ``i")]),e._v("n"),v("code",[e._v("t``e")]),e._v("rm"),v("code",[e._v("e``d``i``a``t``e``")]),e._v("r"),v("code",[e._v("e``s")]),e._v("u"),v("code",[e._v("l``t`` ``a``c")]),e._v("r"),v("code",[e._v("o``s``s`` ``t``h``e`` ``s``p``a``t``i``a``l`` ``d``i")]),e._v("m"),v("code",[e._v("e")]),e._v("n"),v("code",[e._v("s``i``o")]),e._v("n"),v("code",[e._v("s`` ``a``s``")]),e._v("f"),v("code",[e._v("o``l``l``o``w``s")]),e._v(":\n"),v("code",[e._v("c")]),e._v("r"),v("code",[e._v("o``p``s``")]),e._v("="),v("code"),e._v("[["),v("code",[e._v("c")]),e._v("r"),v("code",[e._v("o``p``_``t``o``p``,`` ``c")]),e._v("r"),v("code",[e._v("o``p``_``b``o``t``t``o")]),e._v("m]"),v("code",[e._v(",``")]),e._v("["),v("code",[e._v("c")]),e._v("r"),v("code",[e._v("o``p``_``l``e")]),e._v("f"),v("code",[e._v("t``,`` ``c")]),e._v("r"),v("code",[e._v("o``p``_")]),e._v("r"),v("code",[e._v("i``g``h``t")]),e._v("]]")]),e._v(" "),v("li",[v("code",[e._v("b``l``o``c``k``_``s``i``z``e")]),e._v(":"),v("code"),e._v("An"),v("code",[e._v("``i")]),e._v("n"),v("code",[e._v("t`` ``t``h``a``t`` ``i``s`` ``>= 2")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("name")]),e._v(":"),v("code"),e._v("A"),v("code",[e._v("``name``")]),e._v("f"),v("code",[e._v("o")]),e._v("r"),v("code",[e._v("``t``h``e`` ``o``p``e")]),e._v("r"),v("code",[e._v("a``t``i``o")]),e._v("n"),v("code"),e._v("("),v("code",[e._v("o``p``t``i``o")]),e._v("n"),v("code",[e._v("a``l")]),e._v(").")])]),e._v(" "),v("h4",{attrs:{id:"returns"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),v("p",[e._v("A Tensor. Has the same type as input.")])])}),[],!1,null,null,null);_.default=c.exports}}]);