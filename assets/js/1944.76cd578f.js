(window.webpackJsonp=window.webpackJsonp||[]).push([[1944],{2135:function(e,o,a){"use strict";a.r(o);var v=a(0),s=Object(v.a)({},(function(){var e=this,o=e.$createElement,a=e._self._c||o;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Generates skipgram word pairs.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.keras.preprocessing.sequence.skipgrams")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.keras.preprocessing.sequence.skipgrams")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.keras.preprocessing.sequence.skipgrams(\n    sequence,\n    vocabulary_size,\n    window_size=4,\n    negative_samples=1.0,\n    shuffle=True,\n    categorical=False,\n    sampling_table=None,\n    seed=None\n)\n")])])]),a("p",[e._v("This function transforms a sequence of word indexes (list of integers) into tuples of words of the form:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("(")]),e._v("w"),a("code",[e._v("o")]),e._v("r"),a("code",[e._v("d")]),e._v(","),a("code"),e._v("w"),a("code",[e._v("o")]),e._v("r"),a("code",[e._v("d")]),e._v(" "),a("code",[e._v("i")]),e._v("n"),a("code"),e._v("t"),a("code",[e._v("h")]),e._v("e"),a("code"),e._v("s"),a("code",[e._v("a")]),e._v("m"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("w")]),e._v("i"),a("code",[e._v("n")]),e._v("d"),a("code",[e._v("o")]),e._v("w"),a("code",[e._v(")")]),e._v(","),a("code"),e._v("w"),a("code",[e._v("i")]),e._v("t"),a("code",[e._v("h")]),e._v(" "),a("code",[e._v("l")]),e._v("a"),a("code",[e._v("b")]),e._v("e"),a("code",[e._v("l")]),e._v(" "),a("code",[e._v("1")]),e._v(" "),a("code",[e._v("(")]),e._v("p"),a("code",[e._v("o")]),e._v("s"),a("code",[e._v("i")]),e._v("t"),a("code",[e._v("i")]),e._v("v"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("s")]),e._v("a"),a("code",[e._v("m")]),e._v("p"),a("code",[e._v("l")]),e._v("e"),a("code",[e._v("s")]),e._v(")"),a("code",[e._v(".")])]),e._v(" "),a("li",[a("code",[e._v("(")]),e._v("w"),a("code",[e._v("o")]),e._v("r"),a("code",[e._v("d")]),e._v(","),a("code"),e._v("r"),a("code",[e._v("a")]),e._v("n"),a("code",[e._v("d")]),e._v("o"),a("code",[e._v("m")]),e._v(" "),a("code",[e._v("w")]),e._v("o"),a("code",[e._v("r")]),e._v("d"),a("code"),e._v("f"),a("code",[e._v("r")]),e._v("o"),a("code",[e._v("m")]),e._v(" "),a("code",[e._v("t")]),e._v("h"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("v")]),e._v("o"),a("code",[e._v("c")]),e._v("a"),a("code",[e._v("b")]),e._v("u"),a("code",[e._v("l")]),e._v("a"),a("code",[e._v("r")]),e._v("y"),a("code",[e._v(")")]),e._v(","),a("code"),e._v("w"),a("code",[e._v("i")]),e._v("t"),a("code",[e._v("h")]),e._v(" "),a("code",[e._v("l")]),e._v("a"),a("code",[e._v("b")]),e._v("e"),a("code",[e._v("l")]),e._v(" "),a("code",[e._v("0")]),e._v(" "),a("code",[e._v("(")]),e._v("n"),a("code",[e._v("e")]),e._v("g"),a("code",[e._v("a")]),e._v("t"),a("code",[e._v("i")]),e._v("v"),a("code",[e._v("e")]),e._v(" "),a("code",[e._v("s")]),e._v("a"),a("code",[e._v("m")]),e._v("p"),a("code",[e._v("l")]),e._v("e"),a("code",[e._v("s")]),e._v(")"),a("code",[e._v(".")]),e._v(" "),a("a",{attrs:{href:"http://arxiv.org/pdf/1301.3781v3.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Efficient Estimation of Word Representations in Vector Space"),a("OutboundLink")],1),e._v("Read more about Skipgram in this gnomic paper by Mikolov et al.:")])]),e._v(" "),a("h1",{attrs:{id:"arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" sequence: A word sequence (sentence), encoded as a list\n    of word indices (integers). If using a `sampling_table`,\n    word indices are expected to match the rank\n    of the words in a reference dataset (e.g. 10 would encode\n    the 10-th most frequently occurring token).\n    Note that index 0 is expected to be a non-word and will be skipped.\nvocabulary_size: Int, maximum possible word index + 1\nwindow_size: Int, size of sampling windows (technically half-window).\n    The window of a word `w_i` will be\n    `[i - window_size, i + window_size+1]`.\nnegative_samples: Float >= 0. 0 for no negative (i.e. random) samples.\n    1 for same number as positive samples.\nshuffle: Whether to shuffle the word couples before returning them.\ncategorical: bool. if False, labels will be\n    integers (eg. `[0, 1, 1 .. ]`),\n    if `True`, labels will be categorical, e.g.\n    `[[1,0],[0,1],[0,1] .. ]`.\nsampling_table: 1D array of size `vocabulary_size` where the entry i\n    encodes the probability to sample a word of rank i.\nseed: Random seed.\n")])])]),a("h1",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" couples, labels: where `couples` are int pairs and\n    `labels` are either 0 or 1.\n")])])]),a("h1",{attrs:{id:"note"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#note","aria-hidden":"true"}},[e._v("#")]),e._v(" Note")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" By convention, index 0 in the vocabulary is\na non-word and will be skipped.\n")])])])])}),[],!1,null,null,null);o.default=s.exports}}]);