(window.webpackJsonp=window.webpackJsonp||[]).push([[2027],{2218:function(e,t,a){"use strict";a.r(t);var o=a(0),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Defined in generated file: python/ops/gen_linalg_ops.py")]),e._v(" "),a("p",[e._v("Computes the matrix square root of one or more square matrices:")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.linalg.sqrtm")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v1.matrix_square_root")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.linalg.sqrtm")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.matrix_square_root")])]),e._v(" "),a("li",[a("code",[e._v("tf.matrix_square_root")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.linalg.sqrtm(\n    input,\n    name=None\n)\n")])])]),a("p",[e._v("matmul(sqrtm(A), sqrtm(A)) = A")]),e._v(" "),a("p",[e._v("The input matrix should be invertible. If the input matrix is real, it should have no eigenvalues which are real and negative (pairs of complex conjugate eigenvalues are allowed).")]),e._v(" "),a("p",[e._v('The matrix square root is computed by first reducing the matrix to quasi-triangular form with the real Schur decomposition. The square root of the quasi-triangular matrix is then computed directly. Details of the algorithm can be found in: Nicholas J. Higham, "Computing real square roots of a real matrix", Linear Algebra Appl., 1987.')]),e._v(" "),a("p",[e._v("The input is a tensor of shape [..., M, M] whose inner-most 2 dimensions form square matrices. The output is a tensor of the same shape as the input containing the matrix square root for all input submatrices [..., :, :].")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("input")]),e._v(":"),a("code"),e._v("A"),a("code",[e._v("``Tensor``.`` ``M")]),e._v("ust"),a("code"),e._v("be"),a("code"),e._v("one"),a("code"),e._v("of"),a("code"),e._v("the"),a("code"),e._v("following"),a("code"),e._v("types:"),a("code",[e._v("``float64``,`` ``float32``,`` ``half``,`` ``complex64``,`` ``complex128``.``")]),e._v("Shape"),a("code"),e._v("is"),a("code"),e._v("["),a("code",[e._v(".``.``.``,`` ``M``,`` ``M")]),e._v("]"),a("code",[e._v(".")])]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(":"),a("code"),e._v("A"),a("code",[e._v("``name``")]),e._v("for"),a("code"),e._v("the"),a("code"),e._v("operation"),a("code"),e._v("(optional)"),a("code",[e._v(".")])])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A Tensor. Has the same type as input.")])])}),[],!1,null,null,null);t.default=r.exports}}]);