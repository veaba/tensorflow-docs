(window.webpackJsonp=window.webpackJsonp||[]).push([[2293],{2481:function(e,a,t){"use strict";t.r(a);var s=t(0),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Draws shape samples from each of the given Poisson distribution(s).")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v2.random.poisson")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.random.poisson(\n    shape,\n    lam,\n    dtype=tf.dtypes.float32,\n    seed=None,\n    name=None\n)\n")])])]),t("p",[e._v("lam is the rate parameter describing the distribution(s).")]),e._v(" "),t("h4",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" samples = tf.random.poisson([10], [0.5, 1.5])\n# samples has shape [10, 2], where each slice [:, 0] and [:, 1] represents\n# the samples drawn from each distribution\n\nsamples = tf.random.poisson([7, 5], [12.2, 3.3])\n# samples has shape [7, 5, 2], where each slice [:, :, 0] and [:, :, 1]\n# represents the 7x5 samples drawn from each of the two distributions\n")])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("shape")]),e._v(": A 1-D integer Tensor or Python array. The "),t("code",[e._v("shape")]),e._v(' of the output samples to be drawn per "rate"-parameterized distribution.')]),e._v(" "),t("li",[t("code",[e._v("lam")]),e._v(": A Tensor or Python value or N-D array of type "),t("code",[e._v("dtype")]),e._v(". "),t("code",[e._v("lam")]),e._v(" provides the rate parameter(s) describing the poisson distribution(s) to sample.")]),e._v(" "),t("li",[t("code",[e._v("dtype")]),e._v(": The type of the output: "),t("code",[e._v("float16")]),e._v(", "),t("code",[e._v("float32")]),e._v(", "),t("code",[e._v("float64")]),e._v(", "),t("code",[e._v("int32")]),e._v(" or "),t("code",[e._v("int64")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("seed")]),e._v(": A Python integer. Used to create a random "),t("code",[e._v("seed")]),e._v(" for the distributions. See "),t("code",[e._v("tf.compat.v1.set_random_seed")]),e._v(" for behavior.")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": Optional "),t("code",[e._v("name")]),e._v(" for the operation.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("samples")]),e._v(": a "),t("code",[e._v("Tensor")]),e._v(" of shape tf.concat([shape, tf.shape(lam)], axis=0) with values of type "),t("code",[e._v("dtype")]),e._v(".")])])])}),[],!1,null,null,null);a.default=r.exports}}]);