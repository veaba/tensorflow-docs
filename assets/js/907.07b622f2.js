(window.webpackJsonp=window.webpackJsonp||[]).push([[907],{1095:function(e,a,i){"use strict";i.r(a);var t=i(0),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,i=e._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("p",[i("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/Variable",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.Variable"),i("OutboundLink")],1),e._v("Replaces  initializers so they load from a checkpoint file.")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v(" tf.compat.v1.train.init_from_checkpoint(\n    ckpt_dir_or_file,\n    assignment_map\n)\n")])])]),i("p",[i("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/compat/v1/global_variables_initializer",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.compat.v1.global_variables_initializer"),i("OutboundLink")],1),e._v("Values are not loaded immediately, but when the initializer is run (typically by running a  op).")]),e._v(" "),i("p",[e._v("Assignment map supports following syntax:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("'checkpoint_scope_name/': 'scope_name/'")]),e._v(" - will load all variables in current "),i("code",[e._v("scope_name")]),e._v(" from "),i("code",[e._v("checkpoint_scope_name")]),e._v(" with matching tensor names.")]),e._v(" "),i("li",[i("code",[e._v("'checkpoint_scope_name/some_other_variable': 'scope_name/variable_name'")]),e._v(" - will initialize "),i("code",[e._v("scope_name")]),e._v("/variable_name variable from "),i("code",[e._v("checkpoint_scope_name")]),e._v("/some_other_variable.")]),e._v(" "),i("li",[i("code",[e._v("'scope_variable_name': variable")]),e._v(" - will initialize given "),i("code",[e._v("tf.Variable")]),e._v(" object with tensor 'scope_variable_name' from the checkpoint.")]),e._v(" "),i("li",[e._v("'scope_variable_name': list(variable) - will initialize list of partitioned variables with tensor 'scope_variable_name' from the checkpoint.")]),e._v(" "),i("li",[i("code",[e._v("'/': 'scope_name/'")]),e._v(" - will load all variables in current "),i("code",[e._v("scope_name")]),e._v(" from checkpoint's root (e.g. no scope).")])]),e._v(" "),i("p",[e._v("Supports loading into partitioned variables, which are represented as '"),i("variable",[e._v("/part_<part #>'.")])],1),e._v(" "),i("h4",{attrs:{id:"example"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v(" # Say, '/tmp/model.ckpt' has the following tensors:\n#  -- name='old_scope_1/var1', shape=[20, 2]\n#  -- name='old_scope_1/var2', shape=[50, 4]\n#  -- name='old_scope_2/var3', shape=[100, 100]\n\n# Create new model's variables\nwith tf.compat.v1.variable_scope('new_scope_1'):\n  var1 = tf.compat.v1.get_variable('var1', shape=[20, 2],\n                         initializer=tf.compat.v1.zeros_initializer())\nwith tf.compat.v1.variable_scope('new_scope_2'):\n  var2 = tf.compat.v1.get_variable('var2', shape=[50, 4],\n                         initializer=tf.compat.v1.zeros_initializer())\n  # Partition into 5 variables along the first axis.\n  var3 = tf.compat.v1.get_variable(name='var3', shape=[100, 100],\n                         initializer=tf.compat.v1.zeros_initializer(),\n                         partitioner=lambda shape, dtype: [5, 1])\n\n# Initialize all variables in `new_scope_1` from `old_scope_1`.\ninit_from_checkpoint('/tmp/model.ckpt', {'old_scope_1/': 'new_scope_1'})\n\n# Use names to specify which variables to initialize from checkpoint.\ninit_from_checkpoint('/tmp/model.ckpt',\n                     {'old_scope_1/var1': 'new_scope_1/var1',\n                      'old_scope_1/var2': 'new_scope_2/var2'})\n\n# Or use tf.Variable objects to identify what to initialize.\ninit_from_checkpoint('/tmp/model.ckpt',\n                     {'old_scope_1/var1': var1,\n                      'old_scope_1/var2': var2})\n\n# Initialize partitioned variables using variable's name\ninit_from_checkpoint('/tmp/model.ckpt',\n                     {'old_scope_2/var3': 'new_scope_2/var3'})\n\n# Or specify the list of tf.Variable objects.\ninit_from_checkpoint('/tmp/model.ckpt',\n                     {'old_scope_2/var3': var3._get_variable_list()})\n")])])]),i("h4",{attrs:{id:"args"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("ckpt_dir_or_file")]),e._v(": Directory with checkpoints file or path to checkpoint.")]),e._v(" "),i("li",[i("code",[e._v("assignment_map")]),e._v(": Dict, where keys are names of the variables in the checkpoint and values are current variables or names of current variables (in default graph).")])]),e._v(" "),i("h4",{attrs:{id:"raises"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("ValueError")]),e._v(": If missing variables in current graph, or if missing checkpoints or tensors in checkpoints.")])])])}),[],!1,null,null,null);a.default=r.exports}}]);