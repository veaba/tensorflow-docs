(window.webpackJsonp=window.webpackJsonp||[]).push([[2590],{2781:function(e,_,v){"use strict";v.r(_);var o=v(0),d=Object(o.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("SpaceToBatch for N-D tensors of type T.")]),e._v(" "),v("h3",{attrs:{id:"aliases"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("tf.compat.v2.nn.space_to_batch")])]),e._v(" "),v("li",[v("code",[e._v("tf.compat.v2.space_to_batch")])]),e._v(" "),v("li",[v("code",[e._v("tf.nn.space_to_batch")])])]),e._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v(" tf.space_to_batch(\n    input,\n    block_shape,\n    paddings,\n    name=None\n)\n")])])]),v("p",[e._v('This operation divides "spatial" dimensions '),v("code",[e._v("[1, ..., M]")]),e._v(" of the input into a grid of blocks of shape "),v("code",[e._v("block_shape")]),e._v(', and interleaves these blocks with the "batch" dimension (0) such that in the output, the spatial dimensions '),v("code",[e._v("[1, ..., M]")]),e._v(" correspond to the position within the grid, and the batch dimension combines both the position within a spatial block and the original batch position. Prior to division into blocks, the spatial dimensions of the input are optionally zero padded according to "),v("code",[e._v("paddings")]),e._v(". See below for a precise description.")]),e._v(" "),v("h4",{attrs:{id:"args"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("input")]),e._v(": A "),v("code",[e._v("Tensor")]),e._v(". N-D with shape "),v("code",[e._v("input")]),e._v("_shape = [batch] + spatial_shape + remaining_shape, where spatial_shape has "),v("code",[e._v("M")]),e._v(" dimensions.")]),e._v(" "),v("li",[v("code",[e._v("block_shape")]),e._v(": A "),v("code",[e._v("Tensor")]),e._v(". "),v("code",[e._v("M")]),e._v("ust be one of the following types: "),v("code",[e._v("int32")]),e._v(", "),v("code",[e._v("int64")]),e._v(". 1-D with shape "),v("code",[e._v("[M]")]),e._v(", all values must be >= 1.")]),e._v(" "),v("li",[v("code",[e._v("paddings")]),e._v(": A "),v("code",[e._v("Tensor")]),e._v(". "),v("code",[e._v("M")]),e._v("ust be one of the follow"),v("code",[e._v("i")]),e._v("ng types: "),v("code",[e._v("int32")]),e._v(", "),v("code",[e._v("int64")]),e._v(". 2-D w"),v("code",[e._v("i")]),e._v("th shape "),v("code",[e._v("[M, 2]")]),e._v(", all values must be >= 0. "),v("code",[e._v("paddings")]),e._v("["),v("code",[e._v("i")]),e._v("] = [pad_start, pad_end] spec"),v("code",[e._v("i")]),e._v("f"),v("code",[e._v("i")]),e._v("es the padd"),v("code",[e._v("i")]),e._v("ng for "),v("code",[e._v("input")]),e._v(" d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("on "),v("code",[e._v("i + 1")]),e._v(", wh"),v("code",[e._v("i")]),e._v("ch corresponds to spat"),v("code",[e._v("i")]),e._v("al d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("on "),v("code",[e._v("i")]),e._v(". It "),v("code",[e._v("i")]),e._v("s requ"),v("code",[e._v("i")]),e._v("red that "),v("code",[e._v("block_shape")]),e._v("["),v("code",[e._v("i")]),e._v("] d"),v("code",[e._v("i")]),e._v("v"),v("code",[e._v("i")]),e._v("des "),v("code",[e._v("input")]),e._v("_shape["),v("code",[e._v("i + 1")]),e._v("] + pad_start + pad_end.\nTh"),v("code",[e._v("i")]),e._v("s operat"),v("code",[e._v("i")]),e._v("on "),v("code",[e._v("i")]),e._v("s equ"),v("code",[e._v("i")]),e._v("valent to the follow"),v("code",[e._v("i")]),e._v("ng steps:\nZero-pad the start and end of d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("ons "),v("code",[e._v("[1, ..., M]")]),e._v(" of the "),v("code",[e._v("input")]),e._v(" accord"),v("code",[e._v("i")]),e._v("ng to "),v("code",[e._v("paddings")]),e._v(" to produce "),v("code",[e._v("padded")]),e._v(" of shape "),v("code",[e._v("padded")]),e._v("_shape.\nReshape "),v("code",[e._v("padded")]),e._v(" to "),v("code",[e._v("reshaped_padded")]),e._v(" of shape:\n[batch] + ["),v("code",[e._v("padded")]),e._v("_shape[1] / "),v("code",[e._v("block_shape")]),e._v("[0], "),v("code",[e._v("block_shape")]),e._v("[0], ..., "),v("code",[e._v("padded")]),e._v("_shape"),v("code",[e._v("[M]")]),e._v(" / "),v("code",[e._v("block_shape")]),e._v("["),v("code",[e._v("M")]),e._v("-1], "),v("code",[e._v("block_shape")]),e._v("["),v("code",[e._v("M")]),e._v("-1]] + rema"),v("code",[e._v("i")]),e._v("n"),v("code",[e._v("i")]),e._v("ng_shape\nPermute d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("ons of "),v("code",[e._v("reshaped_padded")]),e._v(" to produce "),v("code",[e._v("permuted_reshaped_padded")]),e._v(" of shape:\n"),v("code",[e._v("block_shape")]),e._v(" + [batch] + ["),v("code",[e._v("padded")]),e._v("_shape[1] / "),v("code",[e._v("block_shape")]),e._v("[0], ..., "),v("code",[e._v("padded")]),e._v("_shape"),v("code",[e._v("[M]")]),e._v(" / "),v("code",[e._v("block_shape")]),e._v("["),v("code",[e._v("M")]),e._v("-1]] + rema"),v("code",[e._v("i")]),e._v("n"),v("code",[e._v("i")]),e._v("ng_shape\nReshape "),v("code",[e._v("permuted_reshaped_padded")]),e._v(" to flatten "),v("code",[e._v("block_shape")]),e._v(" "),v("code",[e._v("i")]),e._v("nto the batch d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("on, produc"),v("code",[e._v("i")]),e._v("ng an output tensor of shape:\n[batch * prod("),v("code",[e._v("block_shape")]),e._v(")] + ["),v("code",[e._v("padded")]),e._v("_shape[1] / "),v("code",[e._v("block_shape")]),e._v("[0], ..., "),v("code",[e._v("padded")]),e._v("_shape"),v("code",[e._v("[M]")]),e._v(" / "),v("code",[e._v("block_shape")]),e._v("["),v("code",[e._v("M")]),e._v("-1]] + rema"),v("code",[e._v("i")]),e._v("n"),v("code",[e._v("i")]),e._v("ng_shape\nSome examples:\n(1) For the follow"),v("code",[e._v("i")]),e._v("ng "),v("code",[e._v("input")]),e._v(" of shape "),v("code",[e._v("[1, 2, 2, 1]")]),e._v(", "),v("code",[e._v("block_shape")]),e._v(" = [2, 2], and "),v("code",[e._v("paddings")]),e._v(" = [[0, 0], [0, 0]]:")]),e._v(" "),v("li",[e._v("Zero-pad the start and end of d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("ons "),v("code",[e._v("[1, ..., M]")]),e._v(" of the "),v("code",[e._v("input")]),e._v(" accord"),v("code",[e._v("i")]),e._v("ng to "),v("code",[e._v("paddings")]),e._v(" to produce "),v("code",[e._v("padded")]),e._v(" of shape "),v("code",[e._v("padded")]),e._v("_shape.")]),e._v(" "),v("li",[e._v("Reshape "),v("code",[e._v("padded")]),e._v(" to "),v("code",[e._v("reshaped_padded")]),e._v(" of shape:\n[batch] + ["),v("code",[e._v("padded")]),e._v("_shape[1] / "),v("code",[e._v("block_shape")]),e._v("[0], "),v("code",[e._v("block_shape")]),e._v("[0], ..., "),v("code",[e._v("padded")]),e._v("_shape"),v("code",[e._v("[M]")]),e._v(" / "),v("code",[e._v("block_shape")]),e._v("["),v("code",[e._v("M")]),e._v("-1], "),v("code",[e._v("block_shape")]),e._v("["),v("code",[e._v("M")]),e._v("-1]] + rema"),v("code",[e._v("i")]),e._v("n"),v("code",[e._v("i")]),e._v("ng_shape")]),e._v(" "),v("li",[e._v("Permute d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("ons of "),v("code",[e._v("reshaped_padded")]),e._v(" to produce "),v("code",[e._v("permuted_reshaped_padded")]),e._v(" of shape:\n"),v("code",[e._v("block_shape")]),e._v(" + [batch] + ["),v("code",[e._v("padded")]),e._v("_shape[1] / "),v("code",[e._v("block_shape")]),e._v("[0], ..., "),v("code",[e._v("padded")]),e._v("_shape"),v("code",[e._v("[M]")]),e._v(" / "),v("code",[e._v("block_shape")]),e._v("["),v("code",[e._v("M")]),e._v("-1]] + rema"),v("code",[e._v("i")]),e._v("n"),v("code",[e._v("i")]),e._v("ng_shape")]),e._v(" "),v("li",[e._v("Reshape "),v("code",[e._v("permuted_reshaped_padded")]),e._v(" to flatten "),v("code",[e._v("block_shape")]),e._v(" "),v("code",[e._v("i")]),e._v("nto the batch d"),v("code",[e._v("i")]),e._v("mens"),v("code",[e._v("i")]),e._v("on, produc"),v("code",[e._v("i")]),e._v("ng an output tensor of shape:\n[batch * prod("),v("code",[e._v("block_shape")]),e._v(")] + ["),v("code",[e._v("padded")]),e._v("_shape[1] / "),v("code",[e._v("block_shape")]),e._v("[0], ..., "),v("code",[e._v("padded")]),e._v("_shape"),v("code",[e._v("[M]")]),e._v(" / "),v("code",[e._v("block_shape")]),e._v("["),v("code",[e._v("M")]),e._v("-1]] + rema"),v("code",[e._v("i")]),e._v("n"),v("code",[e._v("i")]),e._v("ng_shape\nThe output tensor has shape "),v("code",[e._v("[4, 1, 1, 1]")]),e._v(" and value:\n(2) For the following input of shape "),v("code",[e._v("[1, 2, 2, 3]")]),e._v(", "),v("code",[e._v("block_shape = [2, 2]")]),e._v(", and "),v("code",[e._v("paddings = [[0, 0], [0, 0]]")]),e._v(":\nThe output tensor has shape "),v("code",[e._v("[4, 1, 1, 3]")]),e._v(" and value:\n(3) For the following input of shape "),v("code",[e._v("[1, 4, 4, 1]")]),e._v(", "),v("code",[e._v("block_shape = [2, 2]")]),e._v(", and "),v("code",[e._v("paddings = [[0, 0], [0, 0]]")]),e._v(":\nThe output tensor has shape "),v("code",[e._v("[4, 2, 2, 1]")]),e._v(" and value:\n(4) For the following input of shape "),v("code",[e._v("[2, 2, 4, 1]")]),e._v(", block_shape = "),v("code",[e._v("[2, 2]")]),e._v(", and paddings = "),v("code",[e._v("[[0, 0], [2, 0]]")]),e._v(":\nThe output tensor has shape "),v("code",[e._v("[8, 1, 3, 1]")]),e._v(" and value:\nAmong others, this operation is useful for reducing atrous convolution into regular convolution. * "),v("code",[e._v("name")]),e._v(": A "),v("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),v("h4",{attrs:{id:"returns"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),v("p",[e._v("A "),v("code",[e._v("Tensor")]),e._v(". Has the same type as "),v("code",[e._v("input")]),e._v(".")])])}),[],!1,null,null,null);_.default=d.exports}}]);