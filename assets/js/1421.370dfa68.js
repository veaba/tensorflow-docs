(window.webpackJsonp=window.webpackJsonp||[]).push([[1421],{1612:function(t,e,a){"use strict";a.r(e);var r=a(0),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Defined in generated file: python/ops/gen_io_ops.py")]),t._v(" "),a("p",[t._v("Returns the set of files matching one or more glob patterns.")]),t._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[t._v("#")]),t._v(" Aliases:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("tf.compat.v1.io.matching_files")])]),t._v(" "),a("li",[a("code",[t._v("tf.compat.v1.matching_files")])]),t._v(" "),a("li",[a("code",[t._v("tf.compat.v2.io.matching_files")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" tf.io.matching_files(\n    pattern,\n    name=None\n)\n")])])]),a("p",[t._v("Note that this routine only supports wildcard characters in the basename portion of the pattern, not in the directory portion. Note also that the order of filenames returned is deterministic.")]),t._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[t._v("#")]),t._v(" Args:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("pattern")]),t._v(": A "),a("code",[t._v("Tensor")]),t._v(" of type "),a("code",[t._v("string")]),t._v(". Shell wildcard "),a("code",[t._v("pattern")]),t._v("(s). Scalar or vector of type "),a("code",[t._v("string")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("name")]),t._v(": A "),a("code",[t._v("name")]),t._v(" for the operation (optional).")])]),t._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns:")]),t._v(" "),a("p",[t._v("A Tensor of type string.")])])}),[],!1,null,null,null);e.default=s.exports}}]);