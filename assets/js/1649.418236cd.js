(window.webpackJsonp=window.webpackJsonp||[]).push([[1649],{1840:function(a,e,t){"use strict";t.r(e);var r=t(0),n=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("Instantiates a variable and returns it.")]),a._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[a._v("#")]),a._v(" Aliases:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("tf.compat.v1.keras.backend.variable")])]),a._v(" "),t("li",[t("code",[a._v("tf.compat.v2.keras.backend.variable")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" tf.keras.backend.variable(\n    value,\n    dtype=None,\n    name=None,\n    constraint=None\n)\n")])])]),t("h4",{attrs:{id:"arguments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[a._v("#")]),a._v(" Arguments:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("value")]),a._v(": Numpy array, initial "),t("code",[a._v("value")]),a._v(" of the tensor.")]),a._v(" "),t("li",[t("code",[a._v("dtype")]),a._v(": Tensor type.")]),a._v(" "),t("li",[t("code",[a._v("name")]),a._v(": Optional "),t("code",[a._v("name")]),a._v(" string for the tensor.")]),a._v(" "),t("li",[t("code",[a._v("constraint")]),a._v(": Optional projection function to be applied to the variable after an optimizer update.")])]),a._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[a._v("#")]),a._v(" Returns:")]),a._v(" "),t("p",[a._v("A variable instance (with Keras metadata included).")]),a._v(" "),t("h4",{attrs:{id:"examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[a._v("#")]),a._v(" Examples:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("     >>> import numpy as np\n    >>> from keras import backend as K\n    >>> val = np.array([[1, 2], [3, 4]])\n    >>> kvar = K.variable(value=val, dtype='float64', name='example_var')\n    >>> K.dtype(kvar)\n    'float64'\n    >>> print(kvar)\n    example_var\n    >>> kvar.eval()\n    array([[ 1.,  2.],\n           [ 3.,  4.]])\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);