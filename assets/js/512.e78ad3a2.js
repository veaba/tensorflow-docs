(window.webpackJsonp=window.webpackJsonp||[]).push([[512],{700:function(e,t,s){"use strict";s.r(t);var a=s(0),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Max pooling layer for 3D inputs (e.g. (deprecated)")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.compat.v1.layers.max_pooling3d(\n    inputs,\n    pool_size,\n    strides,\n    padding='valid',\n    data_format='channels_last',\n    name=None\n)\n")])])]),s("p",[e._v("volumes).")]),e._v(" "),s("h4",{attrs:{id:"arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("inputs")]),e._v(": The tensor over which to pool. Must have rank 5.")]),e._v(" "),s("li",[s("code",[e._v("pool_size")]),e._v(": An integer or tuple/list of 3 integers: (pool_depth, pool_height, pool_width) specifying the size of the pooling window. Can be a single integer to specify the same value for all spatial dimensions.")]),e._v(" "),s("li",[s("code",[e._v("strides")]),e._v(": An integer or tuple/list of 3 integers, specifying the "),s("code",[e._v("strides")]),e._v(" of the pooling operation. Can be a single integer to specify the same value for all spatial dimensions.")]),e._v(" "),s("li",[s("code",[e._v("padding")]),e._v(": A string. The "),s("code",[e._v("padding")]),e._v(" method, either 'valid' or 'same'. Case-insensitive.")]),e._v(" "),s("li",[s("code",[e._v("data_format")]),e._v(": A string. The ordering of the dimensions in the "),s("code",[e._v("inputs")]),e._v(". "),s("code",[e._v("channels_last")]),e._v(" (default) and "),s("code",[e._v("channels_first")]),e._v(" are supported. "),s("code",[e._v("channels_last")]),e._v(" corresponds to "),s("code",[e._v("inputs")]),e._v(" with shape ("),s("code",[e._v("batch, depth, height, width, channels")]),e._v(") while "),s("code",[e._v("channels_first")]),e._v(" corresponds to "),s("code",[e._v("inputs")]),e._v(" with shape ("),s("code",[e._v("batch, channels, depth, height, width")]),e._v(").")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(": A string, the "),s("code",[e._v("name")]),e._v(" of the layer.")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("Output tensor.")]),e._v(" "),s("h4",{attrs:{id:"raises"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ValueError")]),e._v(": if eager execution is enabled.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);