(window.webpackJsonp=window.webpackJsonp||[]).push([[2360],{2548:function(e,s,t){"use strict";t.r(s);var a=t(0),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Split a SparseTensor into num_split tensors along axis.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v2.sparse.split")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.sparse.split(\n    sp_input=None,\n    num_split=None,\n    axis=None,\n    name=None\n)\n")])])]),t("p",[e._v("If the sp_input.dense_shape[axis] is not an integer multiple of num_split each slice starting from 0:shape[axis] % num_split gets extra one dimension. For example, if axis = 1 and num_split = 2 and the input is:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" input_tensor = shape = [2, 7]\n[    a   d e  ]\n[b c          ]\n")])])]),t("p",[e._v("Graphically the output tensors are:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" output_tensor[0] =\n[    a ]\n[b c   ]\n\noutput_tensor[1] =\n[ d e  ]\n[      ]\n")])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("sp_input")]),e._v(": The "),t("code",[e._v("SparseTensor")]),e._v(" to split.")]),e._v(" "),t("li",[t("code",[e._v("num_split")]),e._v(": A Python integer. The number of ways to split.")]),e._v(" "),t("li",[t("code",[e._v("axis")]),e._v(": A 0-D "),t("code",[e._v("int32")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(". The dimension along which to split.")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": A "),t("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("num_split SparseTensor objects resulting from splitting value.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("TypeError")]),e._v(": If "),t("code",[e._v("sp_input")]),e._v(" is not a "),t("code",[e._v("SparseTensor")]),e._v(".")])])])}),[],!1,null,null,null);s.default=n.exports}}]);