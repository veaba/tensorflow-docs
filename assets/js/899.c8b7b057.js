(window.webpackJsonp=window.webpackJsonp||[]).push([[899],{1087:function(e,a,t){"use strict";t.r(a);var n=t(0),r=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Applies exponential decay to the learning rate.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.compat.v1.train.exponential_decay(\n    learning_rate,\n    global_step,\n    decay_steps,\n    decay_rate,\n    staircase=False,\n    name=None\n)\n")])])]),t("p",[e._v("When training a model, it is often recommended to lower the learning rate as the training progresses. This function applies an exponential decay function to a provided initial learning rate. It requires a global_step value to compute the decayed learning rate. You can just pass a TensorFlow variable that you increment at each training step.")]),e._v(" "),t("p",[e._v("The function returns the decayed learning rate. It is computed as:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" decayed_learning_rate = learning_rate *\n                        decay_rate ^ (global_step / decay_steps)\n")])])]),t("p",[e._v("If the argument staircase is True, then global_step / decay_steps is an integer division and the decayed learning rate follows a staircase function.")]),e._v(" "),t("p",[e._v("Example: decay every 100000 steps with a base of 0.96:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" ...\nglobal_step = tf.Variable(0, trainable=False)\nstarter_learning_rate = 0.1\nlearning_rate = tf.compat.v1.train.exponential_decay(starter_learning_rate,\nglobal_step,\n                                           100000, 0.96, staircase=True)\n# Passing global_step to minimize() will increment it at each step.\nlearning_step = (\n    tf.compat.v1.train.GradientDescentOptimizer(learning_rate)\n    .minimize(...my loss..., global_step=global_step)\n)\n")])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("learning_rate")]),e._v(": A scalar "),t("code",[e._v("float32")]),e._v(" or "),t("code",[e._v("float64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" or a Python number. The initial learning rate.")]),e._v(" "),t("li",[t("code",[e._v("global_step")]),e._v(": A scalar "),t("code",[e._v("int32")]),e._v(" or "),t("code",[e._v("int64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" or a Python number. Global step to use for the decay computation. Must not be negative.")]),e._v(" "),t("li",[t("code",[e._v("decay_steps")]),e._v(": A scalar "),t("code",[e._v("int32")]),e._v(" or "),t("code",[e._v("int64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" or a Python number. Must be positive. See the decay computation above.")]),e._v(" "),t("li",[t("code",[e._v("decay_rate")]),e._v(": A scalar "),t("code",[e._v("float32")]),e._v(" or "),t("code",[e._v("float64")]),e._v(" "),t("code",[e._v("Tensor")]),e._v(" or a Python number. The decay rate.")]),e._v(" "),t("li",[t("code",[e._v("staircase")]),e._v(": Boolean. If "),t("code",[e._v("True")]),e._v(" decay the learning rate at discrete intervals")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": String. Optional "),t("code",[e._v("name")]),e._v(" of the operation. Defaults to 'ExponentialDecay'.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A scalar Tensor of the same type as learning_rate. The decayed learning rate.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": if "),t("code",[e._v("global_step")]),e._v(" is not supplied.")])]),e._v(" "),t("h4",{attrs:{id:"eager-compatibility"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eager-compatibility","aria-hidden":"true"}},[e._v("#")]),e._v(" Eager Compatibility")]),e._v(" "),t("p",[e._v("When eager execution is enabled, this function returns a function which in turn returns the decayed learning rate Tensor. This can be useful for changing the learning rate value across different invocations of optimizer functions.")])])}),[],!1,null,null,null);a.default=r.exports}}]);