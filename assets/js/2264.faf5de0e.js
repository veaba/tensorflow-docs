(window.webpackJsonp=window.webpackJsonp||[]).push([[2264],{2452:function(e,t,a){"use strict";a.r(t);var o=a(0),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Defined in generated file: python/ops/gen_array_ops.py")]),e._v(" "),a("p",[e._v("Concatenates quantized tensors along one dimension.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.quantization.quantized_concat")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v1.quantized_concat")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.quantization.quantized_concat")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.quantization.quantized_concat(\n    concat_dim,\n    values,\n    input_mins,\n    input_maxes,\n    name=None\n)\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("concat_dim")]),e._v(": A "),a("code",[e._v("Tensor")]),e._v(" of type "),a("code",[e._v("int32")]),e._v(". 0-D. The dimension along which to concatenate. Must be in the range [0, rank(values)).")]),e._v(" "),a("li",[a("code",[e._v("values")]),e._v(": A list of at least 2 "),a("code",[e._v("Tensor")]),e._v(" objects with the same type. The "),a("code",[e._v("N")]),e._v(" "),a("code",[e._v("Tensor")]),e._v("s to concatenate. Their ranks and types must match, and their sizes must match in all dimensions except "),a("code",[e._v("concat_dim")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("input_mins")]),e._v(": A list with the same length as "),a("code",[e._v("values")]),e._v(" of "),a("code",[e._v("Tensor")]),e._v(" objects with type "),a("code",[e._v("float32")]),e._v(". The minimum scalar "),a("code",[e._v("values")]),e._v(" for each of the input tensors.")]),e._v(" "),a("li",[a("code",[e._v("input_maxes")]),e._v(": A list with the same length as "),a("code",[e._v("values")]),e._v(" of "),a("code",[e._v("Tensor")]),e._v(" objects with type "),a("code",[e._v("float32")]),e._v(". The maximum scalar "),a("code",[e._v("values")]),e._v(" for each of the input tensors.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": A "),a("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A tuple of Tensor objects (output, output_min, output_max).")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("output")]),e._v(": A "),a("code",[e._v("Tensor")]),e._v(". Has the same type as "),a("code",[e._v("values")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("output")]),e._v("_min: A "),a("code",[e._v("Tensor")]),e._v(" of type "),a("code",[e._v("float32")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("output")]),e._v("_max: A "),a("code",[e._v("Tensor")]),e._v(" of type "),a("code",[e._v("float32")]),e._v(".")])])])}),[],!1,null,null,null);t.default=n.exports}}]);