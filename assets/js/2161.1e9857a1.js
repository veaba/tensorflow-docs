(window.webpackJsonp=window.webpackJsonp||[]).push([[2161],{2349:function(e,t,s){"use strict";s.r(t);var a=s(0),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Finds values and indices of the k largest entries for the last dimension.")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("tf.compat.v1.math.top_k")])]),e._v(" "),s("li",[s("code",[e._v("tf.compat.v1.nn.top_k")])]),e._v(" "),s("li",[s("code",[e._v("tf.compat.v2.math.top_k")])]),e._v(" "),s("li",[s("code",[e._v("tf.compat.v2.nn.top_k")])]),e._v(" "),s("li",[s("code",[e._v("tf.nn.top_k")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.math.top_k(\n    input,\n    k=1,\n    sorted=True,\n    name=None\n)\n")])])]),s("p",[e._v("If the input is a vector (rank=1), finds the k largest entries in the vector and outputs their values and indices as vectors. Thus values[j] is the j-th largest entry in input, and its index is indices[j].")]),e._v(" "),s("p",[e._v("For matrices (resp. higher rank input), computes the top k entries in each row (resp. vector along the last dimension). Thus,")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" values.shape = indices.shape = input.shape[:-1] + [k]\n")])])]),s("p",[e._v("If two elements are equal, the lower-index element appears first.")]),e._v(" "),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("input")]),e._v(": 1-D or higher "),s("code",[e._v("Tensor")]),e._v(" with last dimension at least "),s("code",[e._v("k")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("k")]),e._v(": 0-D "),s("code",[e._v("int32")]),e._v(" "),s("code",[e._v("Tensor")]),e._v(". Number of top elements to loo"),s("code",[e._v("k")]),e._v(" for along the last dimension (along each row for matrices).")]),e._v(" "),s("li",[s("code",[e._v("sorted")]),e._v(": If true the resulting "),s("code",[e._v("k")]),e._v(" elements will be "),s("code",[e._v("sorted")]),e._v(" by the values in descending order.")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(": Optional "),s("code",[e._v("name")]),e._v(" for the operation.")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("values")]),e._v(": The "),s("code",[e._v("k")]),e._v(" largest elements along each last dimensional slice.")]),e._v(" "),s("li",[s("code",[e._v("indices")]),e._v(": The "),s("code",[e._v("indices")]),e._v(" of "),s("code",[e._v("values")]),e._v(" within the last dimension of "),s("code",[e._v("input")]),e._v(".")])])])}),[],!1,null,null,null);t.default=n.exports}}]);