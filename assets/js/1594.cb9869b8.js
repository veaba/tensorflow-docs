(window.webpackJsonp=window.webpackJsonp||[]).push([[1594],{1785:function(e,a,t){"use strict";t.r(a);var s=t(0),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Instantiates a placeholder tensor and returns it.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.keras.backend.placeholder")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.keras.backend.placeholder")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.keras.backend.placeholder(\n    shape=None,\n    ndim=None,\n    dtype=None,\n    sparse=False,\n    name=None,\n    ragged=False\n)\n")])])]),t("h4",{attrs:{id:"arguments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("shape")]),e._v(": Shape of the placeholder (integer tuple, may include "),t("code",[e._v("None")]),e._v(" entries).")]),e._v(" "),t("li",[t("code",[e._v("ndim")]),e._v(": Number of axes of the tensor. At least one of {"),t("code",[e._v("shape")]),e._v(", "),t("code",[e._v("ndim")]),e._v("} must be specified. If both are specified, "),t("code",[e._v("shape")]),e._v(" is used.")]),e._v(" "),t("li",[t("code",[e._v("dtype")]),e._v(": Placeholder type.")]),e._v(" "),t("li",[t("code",[e._v("sparse")]),e._v(": Boolean, whether the placeholder should have a "),t("code",[e._v("sparse")]),e._v(" type.")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": Optional "),t("code",[e._v("name")]),e._v(" string for the placeholder.")]),e._v(" "),t("li",[t("code",[e._v("ragged")]),e._v(": Boolean, whether the placeholder should have a "),t("code",[e._v("ragged")]),e._v(" type. In this case, values of '"),t("code",[e._v("None")]),e._v("' in the '"),t("code",[e._v("shape")]),e._v("' argument represent "),t("code",[e._v("ragged")]),e._v(" dimensions. For more information about RaggedTensors, see this guide.")])]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": If called with eager execution")]),e._v(" "),t("li",[t("code",[e._v("ValueError")]),e._v(": If called with sparse = True and ragged = True.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("Tensor instance (with Keras metadata included).")]),e._v(" "),t("h4",{attrs:{id:"examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("     >>> from keras import backend as K\n    >>> input_ph = K.placeholder(shape=(2, 4, 5))\n    >>> input_ph\n    <tf.Tensor 'Placeholder_4:0' shape=(2, 4, 5) dtype=float32>\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);