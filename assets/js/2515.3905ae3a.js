(window.webpackJsonp=window.webpackJsonp||[]).push([[2515],{2706:function(e,v,_){"use strict";_.r(v);var o=_(0),t=Object(o.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("p",[e._v("Converts the given "),_("code",[e._v("value")]),e._v(" to a "),_("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),_("h3",{attrs:{id:"aliases"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("tf.compat.v2.convert_to_tensor")])])]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" tf.convert_to_tensor(\n    value,\n    dtype=None,\n    dtype_hint=None,\n    name=None\n)\n")])])]),_("h3",{attrs:{id:"used-in-the-guide"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("E")]),e._v("a"),_("code",[e._v("g")]),e._v("e"),_("code",[e._v("r")]),e._v(" "),_("code",[e._v("e")]),e._v("x"),_("code",[e._v("e")]),e._v("c"),_("code",[e._v("u")]),e._v("t"),_("code",[e._v("i")]),e._v("o"),_("code",[e._v("n")])])]),e._v(" "),_("h3",{attrs:{id:"used-in-the-tutorials"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("A")]),e._v("u"),_("code",[e._v("t")]),e._v("o"),_("code",[e._v("m")]),e._v("a"),_("code",[e._v("t")]),e._v("i"),_("code",[e._v("c")]),e._v(" "),_("code",[e._v("d")]),e._v("i"),_("code",[e._v("f")]),e._v("f"),_("code",[e._v("e")]),e._v("r"),_("code",[e._v("e")]),e._v("n"),_("code",[e._v("t")]),e._v("i"),_("code",[e._v("a")]),e._v("t"),_("code",[e._v("i")]),e._v("o"),_("code",[e._v("n")]),e._v(" "),_("code",[e._v("a")]),e._v("n"),_("code",[e._v("d")]),e._v(" "),_("code",[e._v("g")]),e._v("r"),_("code",[e._v("a")]),e._v("d"),_("code",[e._v("i")]),e._v("e"),_("code",[e._v("n")]),e._v("t"),_("code"),e._v("t"),_("code",[e._v("a")]),e._v("p"),_("code",[e._v("e")])]),e._v(" "),_("li",[_("code",[e._v("C")]),e._v("u"),_("code",[e._v("s")]),e._v("t"),_("code",[e._v("o")]),e._v("m"),_("code"),e._v("t"),_("code",[e._v("r")]),e._v("a"),_("code",[e._v("i")]),e._v("n"),_("code",[e._v("i")]),e._v("n"),_("code",[e._v("g")]),e._v(":"),_("code"),e._v("w"),_("code",[e._v("a")]),e._v("l"),_("code",[e._v("k")]),e._v("t"),_("code",[e._v("h")]),e._v("r"),_("code",[e._v("o")]),e._v("u"),_("code",[e._v("g")]),e._v("h``")]),e._v(" "),_("li",[_("code",[e._v("D")]),e._v("e"),_("code",[e._v("e")]),e._v("p"),_("code",[e._v("D")]),e._v("r"),_("code",[e._v("e")]),e._v("a"),_("code",[e._v("m")])]),e._v(" "),_("li",[_("code",[e._v("N")]),e._v("e"),_("code",[e._v("u")]),e._v("r"),_("code",[e._v("a")]),e._v("l"),_("code"),e._v("m"),_("code",[e._v("a")]),e._v("c"),_("code",[e._v("h")]),e._v("i"),_("code",[e._v("n")]),e._v("e"),_("code"),e._v("t"),_("code",[e._v("r")]),e._v("a"),_("code",[e._v("n")]),e._v("s"),_("code",[e._v("l")]),e._v("a"),_("code",[e._v("t")]),e._v("i"),_("code",[e._v("o")]),e._v("n"),_("code"),e._v("w"),_("code",[e._v("i")]),e._v("t"),_("code",[e._v("h")]),e._v(" "),_("code",[e._v("a")]),e._v("t"),_("code",[e._v("t")]),e._v("e"),_("code",[e._v("n")]),e._v("t"),_("code",[e._v("i")]),e._v("o"),_("code",[e._v("n")]),e._v("\nThis function converts Python objects of various types to "),_("code",[e._v("Tensor")]),e._v(" objects. It accepts "),_("code",[e._v("Tensor")]),e._v(" objects, numpy arrays, Python lists, and Python scalars. For example:")])]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[e._v(" import numpy as np\n\ndef my_func(arg):\n  arg = tf.convert_to_tensor(arg, dtype=tf.float32)\n  return tf.matmul(arg, arg) + arg\n\n# The following calls are equivalent.\nvalue_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))\nvalue_2 = my_func([[1.0, 2.0], [3.0, 4.0]])\nvalue_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))\n")])])]),_("p",[e._v("This function can be useful when composing a new operation in Python (such as "),_("code",[e._v("my_func")]),e._v(" in the example above). All standard Python op constructors apply this function to each of their "),_("code",[e._v("Tensor")]),e._v("-valued inputs, which allows those ops to accept numpy arrays, Python lists, and scalars in addition to "),_("code",[e._v("Tensor")]),e._v(" objects.")]),e._v(" "),_("h4",{attrs:{id:"args"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("value")]),e._v(": An object whose type has a registered "),_("code",[e._v("Tensor")]),e._v(" conversion function.")]),e._v(" "),_("li",[_("code",[e._v("dtype")]),e._v(": Optional element type for the returned tensor. If missing, the type is inferred from the type of "),_("code",[e._v("value")]),e._v(".")]),e._v(" "),_("li",[_("code",[e._v("dtype")]),e._v("_hint: Optional element type for the returned tensor, used when "),_("code",[e._v("dtype")]),e._v(" is None. In some cases, a caller may not have a "),_("code",[e._v("dtype")]),e._v(" in mind when converting to a tensor, so "),_("code",[e._v("dtype")]),e._v("_hint can be used as a soft preference. If the conversion to "),_("code",[e._v("dtype")]),e._v("_hint is not possible, this argument has no effect.")]),e._v(" "),_("li",[_("code",[e._v("name")]),e._v(": Optional "),_("code",[e._v("name")]),e._v(" to use if a new "),_("code",[e._v("Tensor")]),e._v(" is created.")])]),e._v(" "),_("h4",{attrs:{id:"returns"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),_("p",[e._v("A "),_("code",[e._v("Tensor")]),e._v(" based on "),_("code",[e._v("value")]),e._v(".")]),e._v(" "),_("h4",{attrs:{id:"raises"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("TypeError")]),e._v(": If no conversion function is registered for "),_("code",[e._v("value")]),e._v(" to "),_("code",[e._v("dtype")]),e._v(".")]),e._v(" "),_("li",[_("code",[e._v("RuntimeError")]),e._v(": If a registered conversion function returns an invalid "),_("code",[e._v("value")]),e._v(".")]),e._v(" "),_("li",[_("code",[e._v("ValueError")]),e._v(": If the "),_("code",[e._v("value")]),e._v(" is a tensor not of given "),_("code",[e._v("dtype")]),e._v(" in graph mode.")])])])}),[],!1,null,null,null);v.default=t.exports}}]);