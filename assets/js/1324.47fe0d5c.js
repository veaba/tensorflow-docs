(window.webpackJsonp=window.webpackJsonp||[]).push([[1324],{1513:function(e,a,t){"use strict";t.r(a);var s=t(0),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Applies weight values to a CategoricalColumn.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.feature_column.weighted_categorical_column")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.feature_column.weighted_categorical_column")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.feature_column.weighted_categorical_column(\n    categorical_column,\n    weight_feature_key,\n    dtype=tf.dtypes.float32\n)\n")])])]),t("p",[e._v("Use this when each of your sparse inputs has both an ID and a value. For example, if you're representing text documents as a collection of word frequencies, you can provide 2 parallel sparse input features ('terms' and 'frequencies' below).")]),e._v(" "),t("h4",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),t("p",[e._v("Input tf.Example objects:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' [\n  features {\n    feature {\n      key: "terms"\n      value {bytes_list {value: "very" value: "model"}}\n    }\n    feature {\n      key: "frequencies"\n      value {float_list {value: 0.3 value: 0.1}}\n    }\n  },\n  features {\n    feature {\n      key: "terms"\n      value {bytes_list {value: "when" value: "course" value: "human"}}\n    }\n    feature {\n      key: "frequencies"\n      value {float_list {value: 0.4 value: 0.1 value: 0.2}}\n    }\n  }\n]\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" categorical_column = categorical_column_with_hash_bucket(\n    column_name='terms', hash_bucket_size=1000)\nweighted_column = weighted_categorical_column(\n    categorical_column=categorical_column, weight_feature_key='frequencies')\ncolumns = [weighted_column, ...]\nfeatures = tf.io.parse_example(..., features=make_parse_example_spec(columns))\nlinear_prediction, _, _ = linear_model(features, columns)\n")])])]),t("p",[e._v("This assumes the input dictionary contains a SparseTensor for key 'terms', and a SparseTensor for key 'frequencies'. These 2 tensors must have the same indices and dense shape.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("categorical_column")]),e._v(": A "),t("code",[e._v("CategoricalColumn")]),e._v(" created by "),t("code",[e._v("categorical_column")]),t("em",[e._v("with")]),e._v("* functions.")]),e._v(" "),t("li",[t("code",[e._v("weight_feature_key")]),e._v(": String key for weight values.")]),e._v(" "),t("li",[t("code",[e._v("dtype")]),e._v(": Type of weights, such as "),t("code",[e._v("tf.float32")]),e._v(". Only float and integer weights are supported.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A CategoricalColumn composed of two sparse features: one represents id, the other represents weight (value) of the id feature in that example.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": if "),t("code",[e._v("dtype")]),e._v(" is not convertible to float.")])])])}),[],!1,null,null,null);a.default=r.exports}}]);