(window.webpackJsonp=window.webpackJsonp||[]).push([[1073],{1262:function(e,t,a){"use strict";a.r(t);var s=a(0),l=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Connects to the given cluster.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.config.experimental_connect_to_cluster")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.config.experimental_connect_to_cluster")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.config.experimental_connect_to_cluster(\n    cluster_spec_or_resolver,\n    job_name='localhost',\n    task_index=0,\n    protocol=None,\n    make_master_device_default=True\n)\n")])])]),a("p",[e._v('Will make devices on the cluster available to use. Note that calling this more than once will work, but will invalidate any tensor handles on the old remote devices. If the given local job name is not present in the cluster specification, it will be automatically added, using an unused port on the localhost. Args: cluster_spec_or_resolver: A ClusterSpec or ClusterResolver describing the cluster. job_name: The name of the local job. task_index: The local task index. protocol: The communication protocol, such as "grpc". If unspecified, will use the default from python/platform/remote_utils.py. make_master_device_default: If True and a cluster resolver is passed, will automatically enter the master task device scope, which indicates the master becomes the default device to run ops. It won\'t do anything if a cluster spec is passed. Will throw an error if the caller is currently already in some device scope.')])])}),[],!1,null,null,null);t.default=l.exports}}]);