(window.webpackJsonp=window.webpackJsonp||[]).push([[2382],{2570:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("Decodes each string in input into a sequence of Unicode code points.")]),e._v(" "),n("h3",{attrs:{id:"aliases"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("tf.compat.v1.strings.unicode_decode")])]),e._v(" "),n("li",[n("code",[e._v("tf.compat.v2.strings.unicode_decode")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" tf.strings.unicode_decode(\n    input,\n    input_encoding,\n    errors='replace',\n    replacement_char=65533,\n    replace_control_characters=False,\n    name=None\n)\n")])])]),n("h3",{attrs:{id:"used-in-the-tutorials"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("U")]),e._v("n"),n("code",[e._v("i")]),e._v("c"),n("code",[e._v("o")]),e._v("d"),n("code",[e._v("e")]),e._v(" "),n("code",[e._v("s")]),e._v("t"),n("code",[e._v("r")]),e._v("i"),n("code",[e._v("n")]),e._v("g"),n("code",[e._v("s")])])]),e._v(" "),n("p",[e._v("result[i1...iN, j] is the Unicode codepoint for the jth character in input[i1...iN], when decoded using input_encoding.")]),e._v(" "),n("h4",{attrs:{id:"args"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("input")]),e._v(": An "),n("code",[e._v("N")]),e._v(" dimensional potentially ragged "),n("code",[e._v("string")]),e._v(" tensor with shape ["),n("code",[e._v("D``1``.``.``.``D``N")]),e._v("]"),n("code",[e._v(".")]),e._v(" "),n("code",[e._v("N")]),e._v(" must be statically known"),n("code",[e._v(".")])]),e._v(" "),n("li",[n("code",[e._v("input")]),e._v("_encoding: String name for the unicode encoding that should be used to decode each "),n("code",[e._v("string``.")])]),e._v(" "),n("li",[n("code",[e._v("errors")]),e._v(": Specifies the response when an "),n("code",[e._v("input")]),e._v(" "),n("code",[e._v("string")]),e._v(" can't be converted using the indicated encoding"),n("code",[e._v(".")]),e._v(" One of:\n"),n("code",[e._v("'strict'")]),e._v(": Raise an exception for any illegal sub"),n("code",[e._v("string")]),e._v("s"),n("code",[e._v(".")]),e._v(" "),n("code",[e._v("'replace'")]),e._v(": Replace illegal sub"),n("code",[e._v("string")]),e._v("s with "),n("code",[e._v("replacement_char``.")]),e._v(" "),n("code",[e._v("'ignore'")]),e._v(": Skip illegal sub"),n("code",[e._v("string")]),e._v("s"),n("code",[e._v(".")])]),e._v(" "),n("li",[n("code",[e._v("'strict'")]),e._v(": Raise an exception for any illegal sub"),n("code",[e._v("string")]),e._v("s"),n("code",[e._v(".")])]),e._v(" "),n("li",[n("code",[e._v("'replace'")]),e._v(": Replace illegal sub"),n("code",[e._v("string")]),e._v("s with "),n("code",[e._v("replacement_char``.")])]),e._v(" "),n("li",[n("code",[e._v("'ignore'")]),e._v(": Skip illegal sub"),n("code",[e._v("string")]),e._v("s"),n("code",[e._v(".")])]),e._v(" "),n("li",[n("code",[e._v("replacement_char")]),e._v(": The replacement codepoint to be used in place of invalid sub"),n("code",[e._v("string")]),e._v("s in "),n("code",[e._v("input")]),e._v(" when "),n("code",[e._v("errors")]),e._v("="),n("code",[e._v("'replace'")]),e._v("; and in place of C0 control characters in "),n("code",[e._v("input")]),e._v(" when "),n("code",[e._v("replace_control_characters=True``.")])]),e._v(" "),n("li",[n("code",[e._v("replace_control_characters")]),e._v(": Whether to replace the C0 control characters (U+0000 - U+00"),n("code",[e._v("1")]),e._v("F) with the "),n("code",[e._v("replacement_char``.")])]),e._v(" "),n("li",[n("code",[e._v("name")]),e._v(": A "),n("code",[e._v("name")]),e._v(" for the operation (optional)"),n("code",[e._v(".")])])]),e._v(" "),n("h4",{attrs:{id:"returns"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/Tensor",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.Tensor"),n("OutboundLink")],1),e._v("A N+1 dimensional int32 tensor with shape [D1...DN, (num_chars)]. The returned tensor is a  if input is a scalar, or a tf.RaggedTensor otherwise.")]),e._v(" "),n("h4",{attrs:{id:"example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")])])}),[],!1,null,null,null);t.default=r.exports}}]);