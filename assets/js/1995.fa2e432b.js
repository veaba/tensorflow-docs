(window.webpackJsonp=window.webpackJsonp||[]).push([[1995],{2184:function(e,a,r){"use strict";r.r(a);var t=r(0),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"class-linearoperatorkronecker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#class-linearoperatorkronecker","aria-hidden":"true"}},[e._v("#")]),e._v(" Class LinearOperatorKronecker")]),e._v(" "),r("p",[e._v("Kronecker product between two LinearOperators.\n"),r("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/linalg/LinearOperator",target:"_blank",rel:"noopener noreferrer"}},[e._v("LinearOperator"),r("OutboundLink")],1),e._v("Inherits From:")]),e._v(" "),r("h3",{attrs:{id:"aliases"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),r("ul",[r("li",[e._v("Class "),r("code",[e._v("tf.compat.v1.linalg.LinearOperatorKronecker")])]),e._v(" "),r("li",[e._v("Class "),r("code",[e._v("tf.compat.v2.linalg.LinearOperatorKronecker")])])]),e._v(" "),r("p",[e._v("This operator composes one or more linear operators [op1,...,opJ], building a new LinearOperator representing the Kronecker product: op1 x op2 x .. opJ (we omit parentheses as the Kronecker product is associative).")]),e._v(" "),r("p",[e._v("If opj has shape batch_shape_j + [M_j, N_j], then the composed operator will have shape equal to broadcast_batch_shape + [prod M_j, prod N_j], where the product is over all operators.")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" # Create a 4 x 4 linear operator composed of two 2 x 2 operators.\noperator_1 = LinearOperatorFullMatrix([[1., 2.], [3., 4.]])\noperator_2 = LinearOperatorFullMatrix([[1., 0.], [2., 1.]])\noperator = LinearOperatorKronecker([operator_1, operator_2])\n\noperator.to_dense()\n==> [[1., 2., 0., 0.],\n     [3., 4., 0., 0.],\n     [2., 4., 1., 2.],\n     [6., 8., 3., 4.]]\n\noperator.shape\n==> [4, 4]\n\noperator.log_abs_determinant()\n==> scalar Tensor\n\nx = ... Shape [4, 2] Tensor\noperator.matmul(x)\n==> Shape [4, 2] Tensor\n\n# Create a [2, 3] batch of 4 x 5 linear operators.\nmatrix_45 = tf.random.normal(shape=[2, 3, 4, 5])\noperator_45 = LinearOperatorFullMatrix(matrix)\n\n# Create a [2, 3] batch of 5 x 6 linear operators.\nmatrix_56 = tf.random.normal(shape=[2, 3, 5, 6])\noperator_56 = LinearOperatorFullMatrix(matrix_56)\n\n# Compose to create a [2, 3] batch of 20 x 30 operators.\noperator_large = LinearOperatorKronecker([operator_45, operator_56])\n\n# Create a shape [2, 3, 20, 2] vector.\nx = tf.random.normal(shape=[2, 3, 6, 2])\noperator_large.matmul(x)\n==> Shape [2, 3, 30, 2] Tensor\n")])])]),r("h4",{attrs:{id:"performance"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#performance","aria-hidden":"true"}},[e._v("#")]),e._v(" Performance")]),e._v(" "),r("p",[e._v("The performance of LinearOperatorKronecker on any operation is equal to the sum of the individual operators' operations.")]),e._v(" "),r("h4",{attrs:{id:"matrix-property-hints"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#matrix-property-hints","aria-hidden":"true"}},[e._v("#")]),e._v(" Matrix property hints")]),e._v(" "),r("p",[e._v("This LinearOperator is initialized with boolean flags of the form is_X, for X = non_singular, self_adjoint, positive_definite, square. These have the following meaning:")]),e._v(" "),r("ul",[r("li",[e._v("If "),r("code",[e._v("is_X == True")]),e._v(", callers should expect the operator to have the property "),r("code",[e._v("X")]),e._v(". This is a promise that should be fulfilled, but is not a runtime assert. For example, finite floating point precision may result in these promises being violated.")]),e._v(" "),r("li",[e._v("If "),r("code",[e._v("is_X == False")]),e._v(", callers should expect the operator to not have "),r("code",[e._v("X")]),e._v(".")]),e._v(" "),r("li",[e._v("If "),r("code",[e._v("is_X == None")]),e._v(" (the default), callers should have no expectation either way.")])]),e._v(" "),r("h2",{attrs:{id:"init"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),r("strong",[e._v("init")])]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator_kronecker.py#L137-L229",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" __init__(\n    operators,\n    is_non_singular=None,\n    is_self_adjoint=None,\n    is_positive_definite=None,\n    is_square=None,\n    name=None\n)\n")])])]),r("p",[e._v("Initialize a LinearOperatorKronecker.")]),e._v(" "),r("p",[e._v("LinearOperatorKronecker is initialized with a list of operators [op_1,...,op_J].")]),e._v(" "),r("h4",{attrs:{id:"args"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("operators")]),e._v(": Iterable of "),r("code",[e._v("LinearOperator")]),e._v(" objects, each with the same "),r("code",[e._v("dtype")]),e._v(" and composable shape, representing the Kronecker factors.")]),e._v(" "),r("li",[r("code",[e._v("is_non_singular")]),e._v(": Expect that this operator is non-singular.")]),e._v(" "),r("li",[r("code",[e._v("is_self_adjoint")]),e._v(": Expect that this operator is equal to its hermitian transpose.")]),e._v(" "),r("li",[r("code",[e._v("is_positive_definite")]),e._v(": E"),r("code",[e._v("x")]),e._v("pect that this operator is positive definite, meaning the quadratic form "),r("code",[e._v("x")]),e._v("^H A "),r("code",[e._v("x")]),e._v(" has positive real part for all nonzero "),r("code",[e._v("x")]),e._v(". Note that we do not require the operator to be self-adjoint to be positive-definite. See: https://en.wikipedia.org/wiki/Positive-definite_matri"),r("code",[e._v("x")]),e._v("\n#E"),r("code",[e._v("x")]),e._v("tension_for_non_symmetric_matrices")]),e._v(" "),r("li",[r("code",[e._v("is_square")]),e._v(": E"),r("code",[e._v("x")]),e._v("pect that this operator acts like square [batch] matrices.")]),e._v(" "),r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("LinearOperator")]),e._v(". Default is the individual "),r("code",[e._v("operators")]),e._v(" "),r("code",[e._v("name")]),e._v("s joined with "),r("code",[e._v("_x_")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"raises"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("TypeError")]),e._v(": If all operators do not have the same "),r("code",[e._v("dtype")]),e._v(".")]),e._v(" "),r("li",[r("code",[e._v("ValueError")]),e._v(": If "),r("code",[e._v("operators")]),e._v(" is empty.")])]),e._v(" "),r("h2",{attrs:{id:"properties"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),r("h3",{attrs:{id:"h"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#h","aria-hidden":"true"}},[e._v("#")]),e._v(" H")]),e._v(" "),r("p",[e._v("Returns the adjoint of the current LinearOperator.")]),e._v(" "),r("p",[e._v("Given A representing this LinearOperator, return A*. Note that calling self.adjoint() and self.H are equivalent.")]),e._v(" "),r("h4",{attrs:{id:"args-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("LinearOperator which represents the adjoint of this LinearOperator.")]),e._v(" "),r("h3",{attrs:{id:"batch-shape"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#batch-shape","aria-hidden":"true"}},[e._v("#")]),e._v(" batch_shape")]),e._v(" "),r("p",[e._v("TensorShape of batch dimensions of this LinearOperator.")]),e._v(" "),r("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns TensorShape([B1,...,Bb]), equivalent to A.get_shape()[:-2]")]),e._v(" "),r("h4",{attrs:{id:"returns-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("TensorShape, statically determined, may be undefined.")]),e._v(" "),r("h3",{attrs:{id:"domain-dimension"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#domain-dimension","aria-hidden":"true"}},[e._v("#")]),e._v(" domain_dimension")]),e._v(" "),r("p",[e._v("Dimension (in the sense of vector spaces) of the domain of this operator.")]),e._v(" "),r("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns N.")]),e._v(" "),r("h4",{attrs:{id:"returns-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("Dimension object.")]),e._v(" "),r("h3",{attrs:{id:"dtype"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dtype","aria-hidden":"true"}},[e._v("#")]),e._v(" dtype")]),e._v(" "),r("p",[e._v("The DType of Tensors handled by this LinearOperator.")]),e._v(" "),r("h3",{attrs:{id:"graph-parents"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#graph-parents","aria-hidden":"true"}},[e._v("#")]),e._v(" graph_parents")]),e._v(" "),r("p",[e._v("List of graph dependencies of this LinearOperator.")]),e._v(" "),r("h3",{attrs:{id:"is-non-singular"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#is-non-singular","aria-hidden":"true"}},[e._v("#")]),e._v(" is_non_singular")]),e._v(" "),r("h3",{attrs:{id:"is-positive-definite"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#is-positive-definite","aria-hidden":"true"}},[e._v("#")]),e._v(" is_positive_definite")]),e._v(" "),r("h3",{attrs:{id:"is-self-adjoint"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#is-self-adjoint","aria-hidden":"true"}},[e._v("#")]),e._v(" is_self_adjoint")]),e._v(" "),r("h3",{attrs:{id:"is-square"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#is-square","aria-hidden":"true"}},[e._v("#")]),e._v(" is_square")]),e._v(" "),r("p",[e._v("Return True/False depending on if this operator is square.")]),e._v(" "),r("h3",{attrs:{id:"operators"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#operators","aria-hidden":"true"}},[e._v("#")]),e._v(" operators")]),e._v(" "),r("h3",{attrs:{id:"range-dimension"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#range-dimension","aria-hidden":"true"}},[e._v("#")]),e._v(" range_dimension")]),e._v(" "),r("p",[e._v("Dimension (in the sense of vector spaces) of the range of this operator.")]),e._v(" "),r("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns M.")]),e._v(" "),r("h4",{attrs:{id:"returns-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("Dimension object.")]),e._v(" "),r("h3",{attrs:{id:"shape"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#shape","aria-hidden":"true"}},[e._v("#")]),e._v(" shape")]),e._v(" "),r("p",[e._v("TensorShape of this LinearOperator.")]),e._v(" "),r("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns TensorShape([B1,...,Bb, M, N]), equivalent to A.get_shape().")]),e._v(" "),r("h4",{attrs:{id:"returns-5"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("TensorShape, statically determined, may be undefined.")]),e._v(" "),r("h3",{attrs:{id:"tensor-rank"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tensor-rank","aria-hidden":"true"}},[e._v("#")]),e._v(" tensor_rank")]),e._v(" "),r("p",[e._v("Rank (in the sense of tensors) of matrix corresponding to this operator.")]),e._v(" "),r("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns b + 2.")]),e._v(" "),r("h4",{attrs:{id:"args-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-6"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("Python integer, or None if the tensor rank is undefined.")]),e._v(" "),r("h2",{attrs:{id:"methods"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),r("h3",{attrs:{id:"add-to-tensor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#add-to-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" add_to_tensor")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L1014-L1027",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" add_to_tensor(\n    x,\n    name='add_to_tensor'\n)\n")])])]),r("p",[e._v("Add matrix represented by this operator to x. Equivalent to A + x.")]),e._v(" "),r("h4",{attrs:{id:"args-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("x")]),e._v(": "),r("code",[e._v("Tensor")]),e._v(" with same "),r("code",[e._v("dtype")]),e._v(" and shape broadcastable to "),r("code",[e._v("self.shape")]),e._v(".")]),e._v(" "),r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" to give this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-7"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("A Tensor with broadcast shape and same dtype as self.")]),e._v(" "),r("h3",{attrs:{id:"adjoint"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#adjoint","aria-hidden":"true"}},[e._v("#")]),e._v(" adjoint")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L870-L885",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" adjoint(name='adjoint')\n")])])]),r("p",[e._v("Returns the adjoint of the current LinearOperator.")]),e._v(" "),r("p",[e._v("Given A representing this LinearOperator, return A*. Note that calling self.adjoint() and self.H are equivalent.")]),e._v(" "),r("h4",{attrs:{id:"args-5"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-8"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("LinearOperator which represents the adjoint of this LinearOperator.")]),e._v(" "),r("h3",{attrs:{id:"assert-non-singular"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#assert-non-singular","aria-hidden":"true"}},[e._v("#")]),e._v(" assert_non_singular")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L484-L502",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" assert_non_singular(name='assert_non_singular')\n")])])]),r("p",[e._v("Returns an Op that asserts this operator is non singular.")]),e._v(" "),r("p",[e._v("This operator is considered non-singular if")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" ConditionNumber < max{100, range_dimension, domain_dimension} * eps,\neps := np.finfo(self.dtype.as_numpy_dtype).eps\n")])])]),r("h4",{attrs:{id:"args-6"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A string "),r("code",[e._v("name")]),e._v(" to prepend to created ops.")])]),e._v(" "),r("h4",{attrs:{id:"returns-9"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("An Assert Op, that, when run, will raise an InvalidArgumentError if the operator is singular.")]),e._v(" "),r("h3",{attrs:{id:"assert-positive-definite"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#assert-positive-definite","aria-hidden":"true"}},[e._v("#")]),e._v(" assert_positive_definite")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L520-L535",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" assert_positive_definite(name='assert_positive_definite')\n")])])]),r("p",[e._v("Returns an Op that asserts this operator is positive definite.")]),e._v(" "),r("p",[e._v("Here, positive definite means that the quadratic form x^H A x has positive real part for all nonzero x. Note that we do not require the operator to be self-adjoint to be positive definite.")]),e._v(" "),r("h4",{attrs:{id:"args-7"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" to give this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-10"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-10","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("An Assert Op, that, when run, will raise an InvalidArgumentError if the operator is not positive definite.")]),e._v(" "),r("h3",{attrs:{id:"assert-self-adjoint"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#assert-self-adjoint","aria-hidden":"true"}},[e._v("#")]),e._v(" assert_self_adjoint")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L547-L561",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" assert_self_adjoint(name='assert_self_adjoint')\n")])])]),r("p",[e._v("Returns an Op that asserts this operator is self-adjoint.")]),e._v(" "),r("p",[e._v("Here we check that this operator is exactly equal to its hermitian transpose.")]),e._v(" "),r("h4",{attrs:{id:"args-8"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A string "),r("code",[e._v("name")]),e._v(" to prepend to created ops.")])]),e._v(" "),r("h4",{attrs:{id:"returns-11"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-11","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("An Assert Op, that, when run, will raise an InvalidArgumentError if the operator is not self-adjoint.")]),e._v(" "),r("h3",{attrs:{id:"batch-shape-tensor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#batch-shape-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" batch_shape_tensor")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L318-L338",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" batch_shape_tensor(name='batch_shape_tensor')\n")])])]),r("p",[e._v("Shape of batch dimensions of this operator, determined at runtime.")]),e._v(" "),r("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns a Tensor holding [B1,...,Bb].")]),e._v(" "),r("h4",{attrs:{id:"args-9"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-12"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-12","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("int32 Tensor")]),e._v(" "),r("h3",{attrs:{id:"cholesky"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cholesky","aria-hidden":"true"}},[e._v("#")]),e._v(" cholesky")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L915-L938",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" cholesky(name='cholesky')\n")])])]),r("p",[e._v("Returns a Cholesky factor as a LinearOperator.")]),e._v(" "),r("p",[e._v("Given A representing this LinearOperator, if A is positive definite self-adjoint, return L, where A = L L^T, i.e. the cholesky decomposition.")]),e._v(" "),r("h4",{attrs:{id:"args-10"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-10","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-13"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-13","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("LinearOperator which represents the lower triangular matrix in the Cholesky decomposition.")]),e._v(" "),r("h4",{attrs:{id:"raises-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("ValueError")]),e._v(": When the "),r("code",[e._v("LinearOperator")]),e._v(" is not hinted to be positive definite and self adjoint.")])]),e._v(" "),r("h3",{attrs:{id:"determinant"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#determinant","aria-hidden":"true"}},[e._v("#")]),e._v(" determinant")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L677-L694",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" determinant(name='det')\n")])])]),r("p",[e._v("Determinant for every batch member.")]),e._v(" "),r("h4",{attrs:{id:"args-11"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-11","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-14"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-14","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("Tensor with shape self.batch_shape and same dtype as self.")]),e._v(" "),r("h4",{attrs:{id:"raises-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("NotImplementedError")]),e._v(": If "),r("code",[e._v("self.is_square")]),e._v(" is "),r("code",[e._v("False")]),e._v(".")])]),e._v(" "),r("h3",{attrs:{id:"diag-part"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#diag-part","aria-hidden":"true"}},[e._v("#")]),e._v(" diag_part")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L965-L991",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" diag_part(name='diag_part')\n")])])]),r("p",[e._v("Efficiently get the [batch] diagonal part of this operator.")]),e._v(" "),r("p",[e._v("If this operator has shape [B1,...,Bb, M, N], this returns a Tensor diagonal, of shape [B1,...,Bb, min(M, N)], where diagonal[b1,...,bb, i] = self.to_dense()[b1,...,bb, i, i].")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" my_operator = LinearOperatorDiag([1., 2.])\n\n# Efficiently get the diagonal\nmy_operator.diag_part()\n==> [1., 2.]\n\n# Equivalent, but inefficient method\ntf.linalg.diag_part(my_operator.to_dense())\n==> [1., 2.]\n")])])]),r("h4",{attrs:{id:"args-12"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-12","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-15"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-15","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("diag_part")]),e._v(": A "),r("code",[e._v("Tensor")]),e._v(" of same "),r("code",[e._v("dtype")]),e._v(" as self.")])]),e._v(" "),r("h3",{attrs:{id:"domain-dimension-tensor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#domain-dimension-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" domain_dimension_tensor")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L393-L414",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" domain_dimension_tensor(name='domain_dimension_tensor')\n")])])]),r("p",[e._v("Dimension (in the sense of vector spaces) of the domain of this operator.")]),e._v(" "),r("p",[e._v("Determined at runtime.")]),e._v(" "),r("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns N.")]),e._v(" "),r("h4",{attrs:{id:"args-13"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-13","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-16"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-16","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("int32 Tensor")]),e._v(" "),r("h3",{attrs:{id:"inverse"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#inverse","aria-hidden":"true"}},[e._v("#")]),e._v(" inverse")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L890-L913",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" inverse(name='inverse')\n")])])]),r("p",[e._v("Returns the Inverse of this LinearOperator.")]),e._v(" "),r("p",[e._v("Given A representing this LinearOperator, return a LinearOperator representing A^-1.")]),e._v(" "),r("h4",{attrs:{id:"args-14"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-14","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" scope to use for ops added by this method.")])]),e._v(" "),r("h4",{attrs:{id:"returns-17"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-17","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("LinearOperator representing inverse of this matrix.")]),e._v(" "),r("h4",{attrs:{id:"raises-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("ValueError")]),e._v(": When the "),r("code",[e._v("LinearOperator")]),e._v(" is not hinted to be "),r("code",[e._v("non_singular")]),e._v(".")])]),e._v(" "),r("h3",{attrs:{id:"log-abs-determinant"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#log-abs-determinant","aria-hidden":"true"}},[e._v("#")]),e._v(" log_abs_determinant")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L706-L723",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" log_abs_determinant(name='log_abs_det')\n")])])]),r("p",[e._v("Log absolute value of determinant for every batch member.")]),e._v(" "),r("h4",{attrs:{id:"args-15"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-15","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-18"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-18","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("Tensor with shape self.batch_shape and same dtype as self.")]),e._v(" "),r("h4",{attrs:{id:"raises-5"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("NotImplementedError")]),e._v(": If "),r("code",[e._v("self.is_square")]),e._v(" is "),r("code",[e._v("False")]),e._v(".")])]),e._v(" "),r("h3",{attrs:{id:"matmul"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#matmul","aria-hidden":"true"}},[e._v("#")]),e._v(" matmul")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L574-L627",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" matmul(\n    x,\n    adjoint=False,\n    adjoint_arg=False,\n    name='matmul'\n)\n")])])]),r("p",[e._v("Transform [batch] matrix x with left multiplication: x --\x3e Ax.")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" # Make an operator acting like batch matrix A.  Assume A.shape = [..., M, N]\noperator = LinearOperator(...)\noperator.shape = [..., M, N]\n\nX = ... # shape [..., N, R], batch matrix, R > 0.\n\nY = operator.matmul(X)\nY.shape\n==> [..., M, R]\n\nY[..., :, r] = sum_j A[..., :, j] X[j, r]\n")])])]),r("h4",{attrs:{id:"args-16"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-16","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("x")]),e._v(": "),r("code",[e._v("LinearOperator")]),e._v(" or "),r("code",[e._v("Tensor")]),e._v(" with compatible shape and same "),r("code",[e._v("dtype")]),e._v(" as "),r("code",[e._v("self")]),e._v(". See class docstring for definition of compatibility.")]),e._v(" "),r("li",[r("code",[e._v("adjoint")]),e._v(": Python "),r("code",[e._v("bool")]),e._v(". If "),r("code",[e._v("True")]),e._v(", left multiply by the "),r("code",[e._v("adjoint")]),e._v(": A^H "),r("code",[e._v("x")]),e._v(".")]),e._v(" "),r("li",[r("code",[e._v("adjoint")]),e._v("_arg: Python "),r("code",[e._v("bool")]),e._v(". If "),r("code",[e._v("True")]),e._v(", compute A "),r("code",[e._v("x")]),e._v("^H where "),r("code",[e._v("x")]),e._v("^H is the hermitian transpose (transposition and comple"),r("code",[e._v("x")]),e._v(" conjugation).")]),e._v(" "),r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-19"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-19","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("A LinearOperator or Tensor with shape [..., M, R] and same dtype as self.")]),e._v(" "),r("h3",{attrs:{id:"matvec"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#matvec","aria-hidden":"true"}},[e._v("#")]),e._v(" matvec")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L634-L667",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" matvec(\n    x,\n    adjoint=False,\n    name='matvec'\n)\n")])])]),r("p",[e._v("Transform [batch] vector x with left multiplication: x --\x3e Ax.")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" # Make an operator acting like batch matric A.  Assume A.shape = [..., M, N]\noperator = LinearOperator(...)\n\nX = ... # shape [..., N], batch vector\n\nY = operator.matvec(X)\nY.shape\n==> [..., M]\n\nY[..., :] = sum_j A[..., :, j] X[..., j]\n")])])]),r("h4",{attrs:{id:"args-17"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-17","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("x")]),e._v(": "),r("code",[e._v("Tensor")]),e._v(" with compatible shape and same "),r("code",[e._v("dtype")]),e._v(" as "),r("code",[e._v("self")]),e._v(". "),r("code",[e._v("x")]),e._v(" is treated as a [batch] vector meaning for every set of leading dimensions, the last dimension defines a vector. See class docstring for definition of compatibility.")]),e._v(" "),r("li",[r("code",[e._v("adjoint")]),e._v(": Python "),r("code",[e._v("bool")]),e._v(". If "),r("code",[e._v("True")]),e._v(", left multiply by the "),r("code",[e._v("adjoint")]),e._v(": A^H "),r("code",[e._v("x")]),e._v(".")]),e._v(" "),r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-20"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-20","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("A Tensor with shape [..., M] and same dtype as self.")]),e._v(" "),r("h3",{attrs:{id:"range-dimension-tensor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#range-dimension-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" range_dimension_tensor")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L432-L453",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" range_dimension_tensor(name='range_dimension_tensor')\n")])])]),r("p",[e._v("Dimension (in the sense of vector spaces) of the range of this operator.")]),e._v(" "),r("p",[e._v("Determined at runtime.")]),e._v(" "),r("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns M.")]),e._v(" "),r("h4",{attrs:{id:"args-18"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-18","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-21"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-21","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("int32 Tensor")]),e._v(" "),r("h3",{attrs:{id:"shape-tensor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#shape-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" shape_tensor")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L284-L302",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" shape_tensor(name='shape_tensor')\n")])])]),r("p",[e._v("Shape of this LinearOperator, determined at runtime.\n"),r("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/shape",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.shape(A)"),r("OutboundLink")],1),e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns a Tensor holding [B1,...,Bb, M, N], equivalent to .")]),e._v(" "),r("h4",{attrs:{id:"args-19"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-19","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-22"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-22","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("int32 Tensor")]),e._v(" "),r("h3",{attrs:{id:"solve"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#solve","aria-hidden":"true"}},[e._v("#")]),e._v(" solve")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L740-L813",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" solve(\n    rhs,\n    adjoint=False,\n    adjoint_arg=False,\n    name='solve'\n)\n")])])]),r("p",[e._v("Solve (exact or approx) R (batch) systems of equations: A X = rhs.")]),e._v(" "),r("p",[e._v("The returned Tensor will be close to an exact solution if A is well conditioned. Otherwise closeness will vary. See class docstring for details.")]),e._v(" "),r("h4",{attrs:{id:"examples"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" # Make an operator acting like batch matrix A.  Assume A.shape = [..., M, N]\noperator = LinearOperator(...)\noperator.shape = [..., M, N]\n\n# Solve R > 0 linear systems for every member of the batch.\nRHS = ... # shape [..., M, R]\n\nX = operator.solve(RHS)\n# X[..., :, r] is the solution to the r'th linear system\n# sum_j A[..., :, j] X[..., j, r] = RHS[..., :, r]\n\noperator.matmul(X)\n==> RHS\n")])])]),r("h4",{attrs:{id:"args-20"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-20","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("rhs")]),e._v(": "),r("code",[e._v("Tensor")]),e._v(" with same "),r("code",[e._v("dtype")]),e._v(" as this operator and compatible shape. "),r("code",[e._v("rhs")]),e._v(" is treated like a [batch] matrix meaning for every set of leading dimensions, the last two dimensions defines a matrix. See class docstring for definition of compatibility.")]),e._v(" "),r("li",[r("code",[e._v("adjoint")]),e._v(": Python "),r("code",[e._v("bool")]),e._v(". If "),r("code",[e._v("True")]),e._v(", solve the system involving the "),r("code",[e._v("adjoint")]),e._v(" of this "),r("code",[e._v("LinearOperator")]),e._v(": A^H X = "),r("code",[e._v("rhs")]),e._v(".")]),e._v(" "),r("li",[r("code",[e._v("adjoint")]),e._v("_arg: Python "),r("code",[e._v("bool")]),e._v(". If "),r("code",[e._v("True")]),e._v(", solve A X = "),r("code",[e._v("rhs")]),e._v("^H where "),r("code",[e._v("rhs")]),e._v("^H is the hermitian transpose (transposition and complex conjugation).")]),e._v(" "),r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" scope to use for ops added by this method.")])]),e._v(" "),r("h4",{attrs:{id:"returns-23"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-23","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("Tensor with shape [...,N, R] and same dtype as rhs.")]),e._v(" "),r("h4",{attrs:{id:"raises-6"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("NotImplementedError")]),e._v(": If "),r("code",[e._v("self.is_non_singular")]),e._v(" or "),r("code",[e._v("is_square")]),e._v(" is False.")])]),e._v(" "),r("h3",{attrs:{id:"solvevec"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#solvevec","aria-hidden":"true"}},[e._v("#")]),e._v(" solvevec")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L821-L868",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" solvevec(\n    rhs,\n    adjoint=False,\n    name='solve'\n)\n")])])]),r("p",[e._v("Solve single equation with best effort: A X = rhs.")]),e._v(" "),r("p",[e._v("The returned Tensor will be close to an exact solution if A is well conditioned. Otherwise closeness will vary. See class docstring for details.")]),e._v(" "),r("h4",{attrs:{id:"examples-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#examples-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" # Make an operator acting like batch matrix A.  Assume A.shape = [..., M, N]\noperator = LinearOperator(...)\noperator.shape = [..., M, N]\n\n# Solve one linear system for every member of the batch.\nRHS = ... # shape [..., M]\n\nX = operator.solvevec(RHS)\n# X is the solution to the linear system\n# sum_j A[..., :, j] X[..., j] = RHS[..., :]\n\noperator.matvec(X)\n==> RHS\n")])])]),r("h4",{attrs:{id:"args-21"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-21","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("rhs")]),e._v(": "),r("code",[e._v("Tensor")]),e._v(" with same "),r("code",[e._v("dtype")]),e._v(" as this operator. "),r("code",[e._v("rhs")]),e._v(" is treated like a [batch] vector meaning for every set of leading dimensions, the last dimension defines a vector. See class docstring for definition of compatibility regarding batch dimensions.")]),e._v(" "),r("li",[r("code",[e._v("adjoint")]),e._v(": Python "),r("code",[e._v("bool")]),e._v(". If "),r("code",[e._v("True")]),e._v(", solve the system involving the "),r("code",[e._v("adjoint")]),e._v(" of this "),r("code",[e._v("LinearOperator")]),e._v(": A^H X = "),r("code",[e._v("rhs")]),e._v(".")]),e._v(" "),r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" scope to use for ops added by this method.")])]),e._v(" "),r("h4",{attrs:{id:"returns-24"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-24","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("Tensor with shape [...,N] and same dtype as rhs.")]),e._v(" "),r("h4",{attrs:{id:"raises-7"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#raises-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("NotImplementedError")]),e._v(": If "),r("code",[e._v("self.is_non_singular")]),e._v(" or "),r("code",[e._v("is_square")]),e._v(" is False.")])]),e._v(" "),r("h3",{attrs:{id:"tensor-rank-tensor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tensor-rank-tensor","aria-hidden":"true"}},[e._v("#")]),e._v(" tensor_rank_tensor")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L357-L375",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" tensor_rank_tensor(name='tensor_rank_tensor')\n")])])]),r("p",[e._v("Rank (in the sense of tensors) of matrix corresponding to this operator.")]),e._v(" "),r("p",[e._v("If this operator acts like the batch matrix A with A.shape = [B1,...,Bb, M, N], then this returns b + 2.")]),e._v(" "),r("h4",{attrs:{id:"args-22"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-22","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-25"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-25","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("int32 Tensor, determined at runtime.")]),e._v(" "),r("h3",{attrs:{id:"to-dense"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#to-dense","aria-hidden":"true"}},[e._v("#")]),e._v(" to_dense")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L956-L959",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" to_dense(name='to_dense')\n")])])]),r("p",[e._v("Return a dense (batch) matrix representing this operator.")]),e._v(" "),r("h3",{attrs:{id:"trace"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#trace","aria-hidden":"true"}},[e._v("#")]),e._v(" trace")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/ops/linalg/linear_operator.py#L996-L1008",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" trace(name='trace')\n")])])]),r("p",[e._v("Trace of the linear operator, equal to sum of self.diag_part().")]),e._v(" "),r("p",[e._v("If the operator is square, this is also the sum of the eigenvalues.")]),e._v(" "),r("h4",{attrs:{id:"args-23"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#args-23","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("name")]),e._v(": A "),r("code",[e._v("name")]),e._v(" for this "),r("code",[e._v("Op")]),e._v(".")])]),e._v(" "),r("h4",{attrs:{id:"returns-26"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returns-26","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),r("p",[e._v("Shape [B1,...,Bb] Tensor of same dtype as self.")])])}),[],!1,null,null,null);a.default=s.exports}}]);