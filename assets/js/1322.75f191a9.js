(window.webpackJsonp=window.webpackJsonp||[]).push([[1322],{1511:function(e,a,t){"use strict";t.r(a);var n=t(0),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Returns a feature column that represents sequences of numeric data.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.feature_column.sequence_numeric_column")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.feature_column.sequence_numeric_column")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.feature_column.sequence_numeric_column(\n    key,\n    shape=(1,),\n    default_value=0.0,\n    dtype=tf.dtypes.float32,\n    normalizer_fn=None\n)\n")])])]),t("h4",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" temperature = sequence_numeric_column('temperature')\ncolumns = [temperature]\n\nfeatures = tf.io.parse_example(..., features=make_parse_example_spec(columns))\nsequence_feature_layer = SequenceFeatures(columns)\nsequence_input, sequence_length = sequence_feature_layer(features)\nsequence_length_mask = tf.sequence_mask(sequence_length)\n\nrnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)\nrnn_layer = tf.keras.layers.RNN(rnn_cell)\noutputs, state = rnn_layer(sequence_input, mask=sequence_length_mask)\n")])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("key")]),e._v(": A unique string identifying the input features.")]),e._v(" "),t("li",[t("code",[e._v("shape")]),e._v(": The "),t("code",[e._v("shape")]),e._v(" of the input data per sequence id. E.g. if "),t("code",[e._v("shape")]),e._v("=(2,), each example must contain 2 * sequence_length values.")]),e._v(" "),t("li",[t("code",[e._v("default_value")]),e._v(": A single value compatible with "),t("code",[e._v("dtype")]),e._v(" that is used for padding the sparse data into a dense "),t("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("dtype")]),e._v(": The type of values.")]),e._v(" "),t("li",[t("code",[e._v("normalizer_fn")]),e._v(": If not "),t("code",[e._v("None")]),e._v(", a function that can be used to normalize the value of the tensor after "),t("code",[e._v("default_value")]),e._v(" is applied for parsing. Normalizer function takes the input "),t("code",[e._v("Tensor")]),e._v(" as its argument, and returns the output "),t("code",[e._v("Tensor")]),e._v(". (e.g. lambda x: (x - 3.0) / 4.2). Please note that even though the most common use case of this function is normalization, it can be used for any kind of "),t("code",[e._v("Tensor")]),e._v("flow transformations.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A SequenceNumericColumn.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("TypeError")]),e._v(": if any dimension in shape is not an int.")]),e._v(" "),t("li",[t("code",[e._v("ValueError")]),e._v(": if any dimension in shape is not a positive integer.")]),e._v(" "),t("li",[t("code",[e._v("ValueError")]),e._v(": if "),t("code",[e._v("dtype")]),e._v(" is not convertible to "),t("code",[e._v("tf.float32")]),e._v(".")])])])}),[],!1,null,null,null);a.default=s.exports}}]);