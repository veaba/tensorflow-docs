(window.webpackJsonp=window.webpackJsonp||[]).push([[774],{962:function(e,t,s){"use strict";s.r(t);var a=s(0),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Computes the difference between two lists of numbers or strings.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.compat.v1.setdiff1d(\n    x,\n    y,\n    index_dtype=tf.dtypes.int32,\n    name=None\n)\n")])])]),s("p",[e._v("Given a list x and a list y, this operation returns a list out that represents all values that are in x but not in y. The returned list out is sorted in the same order that the numbers appear in x (duplicates are preserved). This operation also returns a list idx that represents the position of each out element in x. In other words:")]),e._v(" "),s("p",[e._v("out[i] = x[idx[i]] for i in [0, 1, ..., len(out) - 1]")]),e._v(" "),s("p",[e._v("For example, given this input:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" x = [1, 2, 3, 4, 5, 6]\ny = [1, 3, 5]\n")])])]),s("p",[e._v("This operation would return:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" out ==> [2, 4, 6]\nidx ==> [1, 3, 5]\n")])])]),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("x")]),e._v(": A "),s("code",[e._v("Tensor")]),e._v(". 1-D. Values to keep.")]),e._v(" "),s("li",[s("code",[e._v("y")]),e._v(": A "),s("code",[e._v("Tensor")]),e._v(". Must have the same t"),s("code",[e._v("y")]),e._v("pe as "),s("code",[e._v("x")]),e._v(". 1-D. Values to remove.")]),e._v(" "),s("li",[s("code",[e._v("out_idx")]),e._v(": An optional "),s("code",[e._v("tf.DType")]),e._v(" from: "),s("code",[e._v("tf.int32, tf.int64")]),e._v(". Defaults to "),s("code",[e._v("tf.int32")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("name")]),e._v(": A "),s("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("A tuple of Tensor objects (out, idx).")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("out")]),e._v(": A "),s("code",[e._v("Tensor")]),e._v(". Has the same type as "),s("code",[e._v("x")]),e._v(".")]),e._v(" "),s("li",[s("code",[e._v("idx")]),e._v(": A "),s("code",[e._v("Tensor")]),e._v(" of type "),s("code",[e._v("out")]),e._v("_"),s("code",[e._v("idx")]),e._v(".")])])])}),[],!1,null,null,null);t.default=o.exports}}]);