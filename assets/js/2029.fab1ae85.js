(window.webpackJsonp=window.webpackJsonp||[]).push([[2029],{2220:function(a,e,t){"use strict";t.r(e);var s=t(0),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("Defined in generated file: python/ops/gen_array_ops.py")]),a._v(" "),t("p",[a._v("Returns a diagonal tensor with a given diagonal values.")]),a._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[a._v("#")]),a._v(" Aliases:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("tf.compat.v1.diag")])]),a._v(" "),t("li",[t("code",[a._v("tf.compat.v1.linalg.tensor_diag")])]),a._v(" "),t("li",[t("code",[a._v("tf.compat.v2.linalg.tensor_diag")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" tf.linalg.tensor_diag(\n    diagonal,\n    name=None\n)\n")])])]),t("p",[a._v("Given a diagonal, this operation returns a tensor with the diagonal and everything else padded with zeros. The diagonal is computed as follows:")]),a._v(" "),t("p",[a._v("Assume diagonal has dimensions [D1,..., Dk], then the output is a tensor of rank 2k with dimensions [D1,..., Dk, D1,..., Dk] where:")]),a._v(" "),t("p",[a._v("output[i1,..., ik, i1,..., ik] = diagonal[i1, ..., ik] and 0 everywhere else.")]),a._v(" "),t("h4",{attrs:{id:"for-example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[a._v("#")]),a._v(" For example:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" # 'diagonal' is [1, 2, 3, 4]\ntf.diag(diagonal) ==> [[1, 0, 0, 0]\n                       [0, 2, 0, 0]\n                       [0, 0, 3, 0]\n                       [0, 0, 0, 4]]\n")])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[a._v("#")]),a._v(" Args:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("diagonal")]),a._v(": A "),t("code",[a._v("Tensor")]),a._v(". Must be one of the following types: "),t("code",[a._v("bfloat16")]),a._v(", "),t("code",[a._v("half")]),a._v(", "),t("code",[a._v("float32")]),a._v(", "),t("code",[a._v("float64")]),a._v(", "),t("code",[a._v("int32")]),a._v(", "),t("code",[a._v("int64")]),a._v(", "),t("code",[a._v("complex64")]),a._v(", "),t("code",[a._v("complex128")]),a._v(". Rank k tensor where k is at most 1.")]),a._v(" "),t("li",[t("code",[a._v("name")]),a._v(": A "),t("code",[a._v("name")]),a._v(" for the operation (optional).")])]),a._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[a._v("#")]),a._v(" Returns:")]),a._v(" "),t("p",[a._v("A Tensor. Has the same type as diagonal.")])])}),[],!1,null,null,null);e.default=n.exports}}]);