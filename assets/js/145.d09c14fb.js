(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{333:function(e,s,a){"use strict";a.r(s);var t=a(0),i=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Computes the confusion matrix from predictions and labels.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.math.confusion_matrix")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.compat.v1.confusion_matrix(\n    labels,\n    predictions,\n    num_classes=None,\n    dtype=tf.dtypes.int32,\n    name=None,\n    weights=None\n)\n")])])]),a("p",[e._v("The matrix columns represent the prediction labels and the rows represent the real labels. The confusion matrix is always a 2-D array of shape [n, n], where n is the number of valid labels for a given classification task. Both prediction and labels must be 1-D arrays of the same shape in order for this function to work.")]),e._v(" "),a("p",[e._v("If num_classes is None, then num_classes will be set to one plus the maximum value in either predictions or labels. Class labels are expected to start at 0. For example, if num_classes is 3, then the possible labels would be [0, 1, 2].")]),e._v(" "),a("p",[e._v("If weights is not None, then each prediction contributes its corresponding weight to the total value of the confusion matrix cell.")]),e._v(" "),a("h4",{attrs:{id:"for-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("   tf.math.confusion_matrix([1, 2, 4], [2, 2, 4]) ==>\n      [[0 0 0 0 0]\n       [0 0 1 0 0]\n       [0 0 1 0 0]\n       [0 0 0 0 0]\n       [0 0 0 0 1]]\n")])])]),a("p",[e._v("Note that the possible labels are assumed to be [0, 1, 2, 3, 4], resulting in a 5x5 confusion matrix.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("labels")]),e._v(": 1-D "),a("code",[e._v("Tensor")]),e._v(" of real "),a("code",[e._v("labels")]),e._v(" for the classification task.")]),e._v(" "),a("li",[a("code",[e._v("predictions")]),e._v(": 1-D "),a("code",[e._v("Tensor")]),e._v(" of "),a("code",[e._v("predictions")]),e._v(" for a given classification.")]),e._v(" "),a("li",[a("code",[e._v("num_classes")]),e._v(": The possible number of "),a("code",[e._v("labels")]),e._v(" the classification task can have. If this value is not provided, it will be calculated using both "),a("code",[e._v("predictions")]),e._v(" and "),a("code",[e._v("labels")]),e._v(" array.")]),e._v(" "),a("li",[a("code",[e._v("dtype")]),e._v(": Data type of the confusion matrix.")]),e._v(" "),a("li",[a("code",[e._v("name")]),e._v(": Scope "),a("code",[e._v("name")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("weights")]),e._v(": An optional "),a("code",[e._v("Tensor")]),e._v(" whose shape matches "),a("code",[e._v("predictions")]),e._v(".")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("A Tensor of type dtype with shape [n, n] representing the confusion matrix, where n is the number of possible labels in the classification task.")]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If both "),a("code",[e._v("predictions")]),e._v(" and labels are not 1-D vectors and have mismatched shapes, or if "),a("code",[e._v("weights")]),e._v(" is not "),a("code",[e._v("None")]),e._v(" and its shape doesn't match "),a("code",[e._v("predictions")]),e._v(".")])])])}),[],!1,null,null,null);s.default=i.exports}}]);