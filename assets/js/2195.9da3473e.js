(window.webpackJsonp=window.webpackJsonp||[]).push([[2195],{2383:function(e,s,a){"use strict";a.r(s);var t=a(0),l=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Scales per-example losses with sample_weights and computes their average.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.nn.compute_average_loss")])]),e._v(" "),a("li",[a("code",[e._v("tf.compat.v2.nn.compute_average_loss")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.nn.compute_average_loss(\n    per_example_loss,\n    sample_weight=None,\n    global_batch_size=None\n)\n")])])]),a("p",[e._v("Usage with distribution strategy and custom training loop:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" with strategy.scope():\n  def compute_loss(labels, predictions, sample_weight=None):\n\n    # If you are using a `Loss` class instead, set reduction to `NONE` so that\n    # we can do the reduction afterwards and divide by global batch size.\n    per_example_loss = tf.keras.losses.sparse_categorical_crossentropy(\n        labels, predictions)\n\n    # Compute loss that is scaled by sample_weight and by global batch size.\n    return tf.compute_average_loss(\n        per_example_loss,\n        sample_weight=sample_weight,\n        global_batch_size=GLOBAL_BATCH_SIZE)\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("per_example_loss")]),e._v(": Per-example loss.")]),e._v(" "),a("li",[a("code",[e._v("sample_weight")]),e._v(": Optional weighting for each example.")]),e._v(" "),a("li",[a("code",[e._v("global_batch_size")]),e._v(": Optional global batch size value. Defaults to (size of first dimension of "),a("code",[e._v("losses")]),e._v(") * (number of replicas).")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("Scalar loss value.")])])}),[],!1,null,null,null);s.default=l.exports}}]);