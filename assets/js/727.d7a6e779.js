(window.webpackJsonp=window.webpackJsonp||[]).push([[727],{915:function(e,t,s){"use strict";s.r(t);var a=s(0),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Computes the sum of elements across dimensions of a tensor. (deprecated arguments)")]),e._v(" "),s("h3",{attrs:{id:"aliases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("tf.compat.v1.math.reduce_sum")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" tf.compat.v1.reduce_sum(\n    input_tensor,\n    axis=None,\n    keepdims=None,\n    name=None,\n    reduction_indices=None,\n    keep_dims=None\n)\n")])])]),s("p",[e._v("Reduces input_tensor along the dimensions given in axis. Unless keepdims is true, the rank of the tensor is reduced by 1 for each entry in axis. If keepdims is true, the reduced dimensions are retained with length 1.")]),e._v(" "),s("p",[e._v("If axis is None, all dimensions are reduced, and a tensor with a single element is returned.")]),e._v(" "),s("h4",{attrs:{id:"for-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" x = tf.constant([[1, 1, 1], [1, 1, 1]])\ntf.reduce_sum(x)  # 6\ntf.reduce_sum(x, 0)  # [2, 2, 2]\ntf.reduce_sum(x, 1)  # [3, 3]\ntf.reduce_sum(x, 1, keepdims=True)  # [[3], [3]]\ntf.reduce_sum(x, [0, 1])  # 6\n")])])]),s("h4",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("input_tensor")]),e._v(": The tensor to reduce. Should have numeric type.")])]),e._v(" "),s("h4",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),s("p",[e._v("The reduced tensor, of the same dtype as the input_tensor.")]),e._v(" "),s("h4",{attrs:{id:"numpy-compatibility"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#numpy-compatibility","aria-hidden":"true"}},[e._v("#")]),e._v(" Numpy Compatibility")]),e._v(" "),s("p",[e._v("Equivalent to np.sum apart the fact that numpy upcast uint8 and int32 to int64 while tensorflow returns the same dtype as the input.")])])}),[],!1,null,null,null);t.default=n.exports}}]);