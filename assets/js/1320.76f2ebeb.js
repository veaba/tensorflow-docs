(window.webpackJsonp=window.webpackJsonp||[]).push([[1320],{1509:function(e,a,t){"use strict";t.r(a);var s=t(0),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("A sequence of categorical terms where ids use a vocabulary file.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.feature_column.sequence_categorical_column_with_vocabulary_file")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.feature_column.sequence_categorical_column_with_vocabulary_file")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.feature_column.sequence_categorical_column_with_vocabulary_file(\n    key,\n    vocabulary_file,\n    vocabulary_size=None,\n    num_oov_buckets=0,\n    default_value=None,\n    dtype=tf.dtypes.string\n)\n")])])]),t("p",[e._v("Pass this to embedding_column or indicator_column to convert sequence categorical data into dense representation for input to sequence NN, such as RNN.")]),e._v(" "),t("h4",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" states = sequence_categorical_column_with_vocabulary_file(\n    key='states', vocabulary_file='/us/states.txt', vocabulary_size=50,\n    num_oov_buckets=5)\nstates_embedding = embedding_column(states, dimension=10)\ncolumns = [states_embedding]\n\nfeatures = tf.io.parse_example(..., features=make_parse_example_spec(columns))\nsequence_feature_layer = SequenceFeatures(columns)\nsequence_input, sequence_length = sequence_feature_layer(features)\nsequence_length_mask = tf.sequence_mask(sequence_length)\n\nrnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)\nrnn_layer = tf.keras.layers.RNN(rnn_cell)\noutputs, state = rnn_layer(sequence_input, mask=sequence_length_mask)\n")])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("key")]),e._v(": A unique string identifying the input feature.")]),e._v(" "),t("li",[t("code",[e._v("vocabulary_file")]),e._v(": The vocabulary file name.")]),e._v(" "),t("li",[t("code",[e._v("vocabulary_size")]),e._v(": Number of the elements in the vocabulary. This must be no greater than length of "),t("code",[e._v("vocabulary_file")]),e._v(", if less than length, later values are ignored. If None, it is set to the length of "),t("code",[e._v("vocabulary_file")]),e._v(".")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A SequenceCategoricalColumn.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": "),t("code",[e._v("vocabulary_file")]),e._v(" is missing or cannot be opened.")]),e._v(" "),t("li",[t("code",[e._v("ValueError")]),e._v(": "),t("code",[e._v("vocabulary_size")]),e._v(" is missing or < 1.")]),e._v(" "),t("li",[t("code",[e._v("ValueError")]),e._v(": "),t("code",[e._v("num_oov_buckets")]),e._v(" is a negative integer.")]),e._v(" "),t("li",[t("code",[e._v("ValueError")]),e._v(": "),t("code",[e._v("num_oov_buckets")]),e._v(" and "),t("code",[e._v("default_value")]),e._v(" are both specified.")]),e._v(" "),t("li",[t("code",[e._v("ValueError")]),e._v(": "),t("code",[e._v("dtype")]),e._v(" is neither string nor integer.")])])])}),[],!1,null,null,null);a.default=r.exports}}]);