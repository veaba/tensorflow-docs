(window.webpackJsonp=window.webpackJsonp||[]).push([[280],{468:function(e,a,t){"use strict";t.r(a);var s=t(0),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Base class used to parse and convert arguments.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[e._v("Class "),t("code",[e._v("tf.compat.v1.app.flags.ArgumentParser")])])]),e._v(" "),t("p",[e._v("The parse() method checks to make sure that the string argument is a legal value and convert it to a native type. If the value cannot be converted, it should throw a 'ValueError' exception with a human readable explanation of why the value is illegal.")]),e._v(" "),t("p",[e._v("Subclasses should also define a syntactic_help string which may be presented to the user to describe the form of the legal values.")]),e._v(" "),t("p",[e._v("Argument parser classes must be stateless, since instances are cached and shared between flags. Initializer arguments are allowed, but all member variables must be derived from initializer arguments only.")]),e._v(" "),t("h2",{attrs:{id:"methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),t("h3",{attrs:{id:"flag-type"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flag-type","aria-hidden":"true"}},[e._v("#")]),e._v(" flag_type")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" flag_type()\n")])])]),t("p",[e._v("Returns a string representing the type of the flag.")]),e._v(" "),t("h3",{attrs:{id:"parse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parse","aria-hidden":"true"}},[e._v("#")]),e._v(" parse")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" parse(argument)\n")])])]),t("p",[e._v("Parses the string argument and returns the native value.")]),e._v(" "),t("p",[e._v("By default it returns its argument unmodified.")]),e._v(" "),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("argument")]),e._v(": string "),t("code",[e._v("argument")]),e._v(" passed in the commandline.")])]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ValueError")]),e._v(": Raised when it fails to parse the argument.")]),e._v(" "),t("li",[t("code",[e._v("TypeError")]),e._v(": Raised when the argument has the wrong type.")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("The parsed value in native type.")])])}),[],!1,null,null,null);a.default=r.exports}}]);