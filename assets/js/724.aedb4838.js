(window.webpackJsonp=window.webpackJsonp||[]).push([[724],{912:function(e,t,a){"use strict";a.r(t);var n=a(0),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Computes the mean of elements across dimensions of a tensor.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v1.math.reduce_mean")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.compat.v1.reduce_mean(\n    input_tensor,\n    axis=None,\n    keepdims=None,\n    name=None,\n    reduction_indices=None,\n    keep_dims=None\n)\n")])])]),a("p",[e._v("Reduces input_tensor along the dimensions given in axis. Unless keepdims is true, the rank of the tensor is reduced by 1 for each entry in axis. If keepdims is true, the reduced dimensions are retained with length 1.")]),e._v(" "),a("p",[e._v("If axis is None, all dimensions are reduced, and a tensor with a single element is returned.")]),e._v(" "),a("h4",{attrs:{id:"for-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" x = tf.constant([[1., 1.], [2., 2.]])\ntf.reduce_mean(x)  # 1.5\ntf.reduce_mean(x, 0)  # [1.5, 1.5]\ntf.reduce_mean(x, 1)  # [1.,  2.]\n")])])]),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("input_tensor")]),e._v(": The tensor to reduce. Should have numeric type.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v("The reduced tensor.")]),e._v(" "),a("h4",{attrs:{id:"numpy-compatibility"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#numpy-compatibility","aria-hidden":"true"}},[e._v("#")]),e._v(" Numpy Compatibility")]),e._v(" "),a("p",[e._v("Equivalent to np.mean\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/math/reduce_mean",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.reduce_mean"),a("OutboundLink")],1),e._v("Please note that np.mean has a dtype parameter that could be used to specify the output type. By default this is dtype=float64. On the other hand,  has an aggressive type inference from input_tensor, for example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" x = tf.constant([1, 0, 1, 0])\ntf.reduce_mean(x)  # 0\ny = tf.constant([1., 0., 1., 0.])\ntf.reduce_mean(y)  # 0.5\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);