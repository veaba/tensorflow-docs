(window.webpackJsonp=window.webpackJsonp||[]).push([[1923],{2114:function(e,a,t){"use strict";t.r(a);var o=t(0),n=Object(o.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"class-imagedatagenerator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class-imagedatagenerator","aria-hidden":"true"}},[e._v("#")]),e._v(" Class ImageDataGenerator")]),e._v(" "),t("p",[e._v("Generate batches of tensor image data with real-time data augmentation.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[e._v("Class "),t("code",[e._v("tf.compat.v1.keras.preprocessing.image.ImageDataGenerator")])]),e._v(" "),t("li",[e._v("Class "),t("code",[e._v("tf.compat.v2.keras.preprocessing.image.ImageDataGenerator")])])]),e._v(" "),t("h3",{attrs:{id:"used-in-the-guide"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the guide:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("t")]),e._v("f"),t("code",[e._v(".")]),e._v("d"),t("code",[e._v("a")]),e._v("t"),t("code",[e._v("a")]),e._v(":"),t("code"),e._v("B"),t("code",[e._v("u")]),e._v("i"),t("code",[e._v("l")]),e._v("d"),t("code"),e._v("T"),t("code",[e._v("e")]),e._v("n"),t("code",[e._v("s")]),e._v("o"),t("code",[e._v("r")]),e._v("F"),t("code",[e._v("l")]),e._v("o"),t("code",[e._v("w")]),e._v(" "),t("code",[e._v("i")]),e._v("n"),t("code",[e._v("p")]),e._v("u"),t("code",[e._v("t")]),e._v(" "),t("code",[e._v("p")]),e._v("i"),t("code",[e._v("p")]),e._v("e"),t("code",[e._v("l")]),e._v("i"),t("code",[e._v("n")]),e._v("e"),t("code",[e._v("s")])])]),e._v(" "),t("h3",{attrs:{id:"used-in-the-tutorials"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#used-in-the-tutorials","aria-hidden":"true"}},[e._v("#")]),e._v(" Used in the tutorials:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("B")]),e._v("a"),t("code",[e._v("s")]),e._v("i"),t("code",[e._v("c")]),e._v(" "),t("code",[e._v("c")]),e._v("l"),t("code",[e._v("a")]),e._v("s"),t("code",[e._v("s")]),e._v("i"),t("code",[e._v("f")]),e._v("i"),t("code",[e._v("c")]),e._v("a"),t("code",[e._v("t")]),e._v("i"),t("code",[e._v("o")]),e._v("n"),t("code",[e._v(":")]),e._v(" "),t("code",[e._v("C")]),e._v("l"),t("code",[e._v("a")]),e._v("s"),t("code",[e._v("s")]),e._v("i"),t("code",[e._v("f")]),e._v("y"),t("code"),e._v("i"),t("code",[e._v("m")]),e._v("a"),t("code",[e._v("g")]),e._v("e"),t("code",[e._v("s")]),e._v(" "),t("code",[e._v("o")]),e._v("f"),t("code"),e._v("c"),t("code",[e._v("l")]),e._v("o"),t("code",[e._v("t")]),e._v("h"),t("code",[e._v("i")]),e._v("n"),t("code",[e._v("g")])]),e._v(" "),t("li",[t("code",[e._v("I")]),e._v("m"),t("code",[e._v("a")]),e._v("g"),t("code",[e._v("e")]),e._v(" "),t("code",[e._v("c")]),e._v("l"),t("code",[e._v("a")]),e._v("s"),t("code",[e._v("s")]),e._v("i"),t("code",[e._v("f")]),e._v("i"),t("code",[e._v("c")]),e._v("a"),t("code",[e._v("t")]),e._v("i"),t("code",[e._v("o")]),e._v("n``")]),e._v(" "),t("li",[t("code",[e._v("L")]),e._v("o"),t("code",[e._v("a")]),e._v("d"),t("code"),e._v("i"),t("code",[e._v("m")]),e._v("a"),t("code",[e._v("g")]),e._v("e"),t("code",[e._v("s")])]),e._v(" "),t("li",[t("code",[e._v("T")]),e._v("r"),t("code",[e._v("a")]),e._v("n"),t("code",[e._v("s")]),e._v("f"),t("code",[e._v("e")]),e._v("r"),t("code"),e._v("l"),t("code",[e._v("e")]),e._v("a"),t("code",[e._v("r")]),e._v("n"),t("code",[e._v("i")]),e._v("n"),t("code",[e._v("g")]),e._v(" "),t("code",[e._v("w")]),e._v("i"),t("code",[e._v("t")]),e._v("h"),t("code"),e._v("T"),t("code",[e._v("e")]),e._v("n"),t("code",[e._v("s")]),e._v("o"),t("code",[e._v("r")]),e._v("F"),t("code",[e._v("l")]),e._v("o"),t("code",[e._v("w")]),e._v(" "),t("code",[e._v("H")]),e._v("u"),t("code",[e._v("b")]),e._v(" "),t("code",[e._v("T")]),e._v("h"),t("code",[e._v("e")]),e._v(" "),t("code",[e._v("d")]),e._v("a"),t("code",[e._v("t")]),e._v("a"),t("code"),e._v("w"),t("code",[e._v("i")]),e._v("l"),t("code",[e._v("l")]),e._v(" "),t("code",[e._v("b")]),e._v("e"),t("code"),e._v("l"),t("code",[e._v("o")]),e._v("o"),t("code",[e._v("p")]),e._v("e"),t("code",[e._v("d")]),e._v(" "),t("code",[e._v("o")]),e._v("v"),t("code",[e._v("e")]),e._v("r"),t("code"),e._v("("),t("code",[e._v("i")]),e._v("n"),t("code"),e._v("b"),t("code",[e._v("a")]),e._v("t"),t("code",[e._v("c")]),e._v("h"),t("code",[e._v("e")]),e._v("s"),t("code",[e._v(")")]),e._v(".``")])]),e._v(" "),t("h4",{attrs:{id:"arguments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("featurewise_center")]),e._v(": Boolean. Set input mean to 0 over the dataset, feature-wise.")]),e._v(" "),t("li",[t("code",[e._v("samplewise_center")]),e._v(": Boolean. Set each sample mean to 0.")]),e._v(" "),t("li",[t("code",[e._v("featurewise_std_normalization")]),e._v(": Boolean. Divide inputs by std of the dataset, feature-wise.")]),e._v(" "),t("li",[t("code",[e._v("samplewise_std_normalization")]),e._v(": Boolean. Divide each input by its std.")]),e._v(" "),t("li",[t("code",[e._v("zca_epsilon")]),e._v(": epsilon for ZCA whitening. Default is 1e-6.")]),e._v(" "),t("li",[t("code",[e._v("zca_whitening")]),e._v(": Boolean. Apply ZCA whitening.")]),e._v(" "),t("li",[t("code",[e._v("rotation_range")]),e._v(": Int. Degree range for random rotations.")]),e._v(" "),t("li",[t("code",[e._v("width_shift_range")]),e._v(":"),t("code"),e._v("Float"),t("code",[e._v(",`` ``1``-")]),e._v("D"),t("code"),e._v("array"),t("code",[e._v("-")]),e._v("like"),t("code"),e._v("or"),t("code"),e._v("int\nfloat:"),t("code"),e._v("fraction"),t("code"),e._v("of"),t("code"),e._v("total"),t("code"),e._v("width"),t("code",[e._v(",``")]),e._v("if"),t("code"),e._v("<"),t("code",[e._v("``1``,``")]),e._v("or"),t("code"),e._v("pixels"),t("code"),e._v("if"),t("code"),e._v(">="),t("code",[e._v("``1")]),e._v(".\n"),t("code",[e._v("1``-")]),e._v("D"),t("code"),e._v("array"),t("code",[e._v("-")]),e._v("like:"),t("code"),e._v("random"),t("code"),e._v("elements"),t("code"),e._v("from"),t("code"),e._v("the"),t("code"),e._v("array.\nint:"),t("code"),e._v("integer"),t("code"),e._v("number"),t("code"),e._v("of"),t("code"),e._v("pixels"),t("code"),e._v("from"),t("code"),e._v("interval"),t("code"),e._v("("),t("code",[e._v("-``width_shift_range``,`` ``+``width_shift_range")]),e._v(")\nWith"),t("code",[e._v("``width_shift_range")]),e._v("=2"),t("code"),e._v("possible"),t("code"),e._v("values"),t("code"),e._v("are"),t("code"),e._v("integers"),t("code"),e._v("["),t("code",[e._v("-``1``,`` ``0``,`` ``+``1")]),e._v("]"),t("code",[e._v(",``")]),e._v("same"),t("code"),e._v("as"),t("code"),e._v("with"),t("code",[e._v("``width_shift_range")]),e._v("=["),t("code",[e._v("-``1``,`` ``0``,`` ``+``1")]),e._v("]"),t("code",[e._v(",``")]),e._v("while"),t("code"),e._v("with"),t("code",[e._v("``width_shift_range")]),e._v("="),t("code",[e._v("1")]),e._v("."),t("code",[e._v("0``")]),e._v("possible"),t("code"),e._v("values"),t("code"),e._v("are"),t("code"),e._v("floats"),t("code"),e._v("in"),t("code"),e._v("the"),t("code"),e._v("interval"),t("code"),e._v("["),t("code",[e._v("-``1")]),e._v("."),t("code",[e._v("0``,`` ``+``1")]),e._v("."),t("code",[e._v("0")]),e._v(").")]),e._v(" "),t("li",[e._v("float:"),t("code"),e._v("fraction"),t("code"),e._v("of"),t("code"),e._v("total"),t("code"),e._v("width"),t("code",[e._v(",``")]),e._v("if"),t("code"),e._v("<"),t("code",[e._v("``1``,``")]),e._v("or"),t("code"),e._v("pixels"),t("code"),e._v("if"),t("code"),e._v(">="),t("code",[e._v("``1")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("1``-")]),e._v("D"),t("code"),e._v("array"),t("code",[e._v("-")]),e._v("like:"),t("code"),e._v("random"),t("code"),e._v("elements"),t("code"),e._v("from"),t("code"),e._v("the"),t("code"),e._v("array.")]),e._v(" "),t("li",[e._v("int:"),t("code"),e._v("integer"),t("code"),e._v("number"),t("code"),e._v("of"),t("code"),e._v("pixels"),t("code"),e._v("from"),t("code"),e._v("interval"),t("code"),e._v("("),t("code",[e._v("-``width_shift_range``,`` ``+``width_shift_range")]),e._v(")")]),e._v(" "),t("li",[e._v("With"),t("code",[e._v("``width_shift_range")]),e._v("=2"),t("code"),e._v("possible"),t("code"),e._v("values"),t("code"),e._v("are"),t("code"),e._v("integers"),t("code"),e._v("["),t("code",[e._v("-``1``,`` ``0``,`` ``+``1")]),e._v("]"),t("code",[e._v(",``")]),e._v("same"),t("code"),e._v("as"),t("code"),e._v("with"),t("code",[e._v("``width_shift_range")]),e._v("=["),t("code",[e._v("-``1``,`` ``0``,`` ``+``1")]),e._v("]"),t("code",[e._v(",``")]),e._v("while"),t("code"),e._v("with"),t("code",[e._v("``width_shift_range")]),e._v("="),t("code",[e._v("1")]),e._v("."),t("code",[e._v("0``")]),e._v("possible"),t("code"),e._v("values"),t("code"),e._v("are"),t("code"),e._v("floats"),t("code"),e._v("in"),t("code"),e._v("the"),t("code"),e._v("interval"),t("code"),e._v("["),t("code",[e._v("-``1")]),e._v("."),t("code",[e._v("0``,`` ``+``1")]),e._v("."),t("code",[e._v("0")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("height_shift_range")]),e._v(":"),t("code"),e._v("Float"),t("code",[e._v(",`` ``1``-")]),e._v("D"),t("code"),e._v("array"),t("code",[e._v("-")]),e._v("like"),t("code"),e._v("or"),t("code"),e._v("int\nfloat:"),t("code"),e._v("fraction"),t("code"),e._v("of"),t("code"),e._v("total"),t("code"),e._v("height"),t("code",[e._v(",``")]),e._v("if"),t("code"),e._v("<"),t("code",[e._v("``1``,``")]),e._v("or"),t("code"),e._v("pixels"),t("code"),e._v("if"),t("code"),e._v(">="),t("code",[e._v("``1")]),e._v(".\n"),t("code",[e._v("1``-")]),e._v("D"),t("code"),e._v("array"),t("code",[e._v("-")]),e._v("like:"),t("code"),e._v("random"),t("code"),e._v("elements"),t("code"),e._v("from"),t("code"),e._v("the"),t("code"),e._v("array.\nint:"),t("code"),e._v("integer"),t("code"),e._v("number"),t("code"),e._v("of"),t("code"),e._v("pixels"),t("code"),e._v("from"),t("code"),e._v("interval"),t("code"),e._v("("),t("code",[e._v("-``height_shift_range``,`` ``+``height_shift_range")]),e._v(")\nWith"),t("code",[e._v("``height_shift_range")]),e._v("=2"),t("code"),e._v("possible"),t("code"),e._v("values"),t("code"),e._v("are"),t("code"),e._v("integers"),t("code"),e._v("["),t("code",[e._v("-``1``,`` ``0``,`` ``+``1")]),e._v("]"),t("code",[e._v(",``")]),e._v("same"),t("code"),e._v("as"),t("code"),e._v("with"),t("code",[e._v("``height_shift_range")]),e._v("=["),t("code",[e._v("-``1``,`` ``0``,`` ``+``1")]),e._v("]"),t("code",[e._v(",``")]),e._v("while"),t("code"),e._v("with"),t("code",[e._v("``height_shift_range")]),e._v("="),t("code",[e._v("1")]),e._v("."),t("code",[e._v("0``")]),e._v("possible"),t("code"),e._v("values"),t("code"),e._v("are"),t("code"),e._v("floats"),t("code"),e._v("in"),t("code"),e._v("the"),t("code"),e._v("interval"),t("code"),e._v("["),t("code",[e._v("-``1")]),e._v("."),t("code",[e._v("0``,`` ``+``1")]),e._v("."),t("code",[e._v("0")]),e._v(").")]),e._v(" "),t("li",[e._v("float:"),t("code"),e._v("fraction"),t("code"),e._v("of"),t("code"),e._v("total"),t("code"),e._v("height"),t("code",[e._v(",``")]),e._v("if"),t("code"),e._v("<"),t("code",[e._v("``1``,``")]),e._v("or"),t("code"),e._v("pixels"),t("code"),e._v("if"),t("code"),e._v(">="),t("code",[e._v("``1")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("1``-")]),e._v("D"),t("code"),e._v("array"),t("code",[e._v("-")]),e._v("like:"),t("code"),e._v("random"),t("code"),e._v("elements"),t("code"),e._v("from"),t("code"),e._v("the"),t("code"),e._v("array.")]),e._v(" "),t("li",[e._v("int:"),t("code"),e._v("integer"),t("code"),e._v("number"),t("code"),e._v("of"),t("code"),e._v("pixels"),t("code"),e._v("from"),t("code"),e._v("interval"),t("code"),e._v("("),t("code",[e._v("-``height_shift_range``,`` ``+``height_shift_range")]),e._v(")")]),e._v(" "),t("li",[e._v("With"),t("code",[e._v("``height_shift_range")]),e._v("=2"),t("code"),e._v("possible"),t("code"),e._v("values"),t("code"),e._v("are"),t("code"),e._v("integers"),t("code"),e._v("["),t("code",[e._v("-``1``,`` ``0``,`` ``+``1")]),e._v("]"),t("code",[e._v(",``")]),e._v("same"),t("code"),e._v("as"),t("code"),e._v("with"),t("code",[e._v("``height_shift_range")]),e._v("=["),t("code",[e._v("-``1``,`` ``0``,`` ``+``1")]),e._v("]"),t("code",[e._v(",``")]),e._v("while"),t("code"),e._v("with"),t("code",[e._v("``height_shift_range")]),e._v("="),t("code",[e._v("1")]),e._v("."),t("code",[e._v("0``")]),e._v("possible"),t("code"),e._v("values"),t("code"),e._v("are"),t("code"),e._v("floats"),t("code"),e._v("in"),t("code"),e._v("the"),t("code"),e._v("interval"),t("code"),e._v("["),t("code",[e._v("-``1")]),e._v("."),t("code",[e._v("0``,`` ``+``1")]),e._v("."),t("code",[e._v("0")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("brightness_range")]),e._v(":"),t("code"),e._v("Tuple"),t("code"),e._v("or"),t("code"),e._v("list"),t("code"),e._v("of"),t("code"),e._v("two"),t("code"),e._v("floats."),t("code"),e._v("Range"),t("code"),e._v("for"),t("code"),e._v("picking"),t("code"),e._v("a"),t("code"),e._v("brightness"),t("code"),e._v("shift"),t("code"),e._v("value"),t("code"),e._v("from.")]),e._v(" "),t("li",[t("code",[e._v("shear_range")]),e._v(":"),t("code"),e._v("Float."),t("code"),e._v("Shear"),t("code"),e._v("Intensity"),t("code"),e._v("(Shear"),t("code"),e._v("angle"),t("code"),e._v("in"),t("code"),e._v("counter"),t("code",[e._v("-")]),e._v("clockwise"),t("code"),e._v("direction"),t("code"),e._v("in"),t("code"),e._v("degrees)")]),e._v(" "),t("li",[t("code",[e._v("zoom_range")]),e._v(":"),t("code"),e._v("Float"),t("code"),e._v("or"),t("code"),e._v("[lower"),t("code",[e._v(",``")]),e._v("upper]."),t("code"),e._v("Range"),t("code"),e._v("for"),t("code"),e._v("random"),t("code"),e._v("zoom."),t("code"),e._v("If"),t("code"),e._v("a"),t("code"),e._v("float"),t("code",[e._v(",``")]),e._v("[lower"),t("code",[e._v(",``")]),e._v("upper]"),t("code"),e._v("="),t("code"),e._v("["),t("code",[e._v("1``-``zoom_range``,`` ``1``+``zoom_range")]),e._v("].")]),e._v(" "),t("li",[t("code",[e._v("channel_shift_range")]),e._v(":"),t("code"),e._v("Float."),t("code"),e._v("Range"),t("code"),e._v("for"),t("code"),e._v("random"),t("code"),e._v("channel"),t("code"),e._v("shifts.")]),e._v(" "),t("li",[t("code",[e._v("fill_mode")]),e._v(":"),t("code"),e._v("One"),t("code"),e._v("of"),t("code"),e._v('{"constant"'),t("code",[e._v(",``")]),e._v('"nearest"'),t("code",[e._v(",``")]),e._v('"reflect"'),t("code"),e._v("or"),t("code"),e._v('"wrap"}.'),t("code"),e._v("Default"),t("code"),e._v("is"),t("code"),e._v("'nearest'."),t("code"),e._v("Points"),t("code"),e._v("outside"),t("code"),e._v("the"),t("code"),e._v("boundaries"),t("code"),e._v("of"),t("code"),e._v("the"),t("code"),e._v("input"),t("code"),e._v("are"),t("code"),e._v("filled"),t("code"),e._v("according"),t("code"),e._v("to"),t("code"),e._v("the"),t("code"),e._v("given"),t("code"),e._v("mode:\n'constant':"),t("code"),e._v("kkkkkkkk|abcd|kkkkkkkk"),t("code"),e._v("(cval=k)\n'nearest':"),t("code"),e._v("aaaaaaaa|abcd|dddddddd\n'reflect':"),t("code"),e._v("abcddcba|abcd|dcbaabcd\n'wrap':"),t("code"),e._v("abcdabcd|abcd|abcdabcd")]),e._v(" "),t("li",[e._v("'constant':"),t("code"),e._v("kkkkkkkk|abcd|kkkkkkkk"),t("code"),e._v("(cval=k)")]),e._v(" "),t("li",[e._v("'nearest':"),t("code"),e._v("aaaaaaaa|abcd|dddddddd")]),e._v(" "),t("li",[e._v("'reflect':"),t("code"),e._v("abcddcba|abcd|dcbaabcd")]),e._v(" "),t("li",[e._v("'wrap':"),t("code"),e._v("abcdabcd|abcd|abcdabcd")]),e._v(" "),t("li",[t("code",[e._v("cval")]),e._v(":"),t("code"),e._v("Float"),t("code"),e._v("or"),t("code"),e._v("Int."),t("code"),e._v("Value"),t("code"),e._v("used"),t("code"),e._v("for"),t("code"),e._v("points"),t("code"),e._v("outside"),t("code"),e._v("the"),t("code"),e._v("boundaries"),t("code"),e._v("when"),t("code",[e._v("``fill_mode``")]),e._v("="),t("code"),e._v('"constant".')]),e._v(" "),t("li",[t("code",[e._v("horizontal_flip")]),e._v(":"),t("code"),e._v("Boolean."),t("code"),e._v("Randomly"),t("code"),e._v("flip"),t("code"),e._v("inputs"),t("code"),e._v("horizontally.")]),e._v(" "),t("li",[t("code",[e._v("vertical_flip")]),e._v(":"),t("code"),e._v("Boolean."),t("code"),e._v("Randomly"),t("code"),e._v("flip"),t("code"),e._v("inputs"),t("code"),e._v("vertically.")]),e._v(" "),t("li",[t("code",[e._v("rescale")]),e._v(":"),t("code"),e._v("rescaling"),t("code"),e._v("factor."),t("code"),e._v("Defaults"),t("code"),e._v("to"),t("code"),e._v("None."),t("code"),e._v("If"),t("code"),e._v("None"),t("code"),e._v("or"),t("code",[e._v("``0``,``")]),e._v("no"),t("code"),e._v("rescaling"),t("code"),e._v("is"),t("code"),e._v("applied"),t("code",[e._v(",``")]),e._v("otherwise"),t("code"),e._v("we"),t("code"),e._v("multiply"),t("code"),e._v("the"),t("code"),e._v("data"),t("code"),e._v("by"),t("code"),e._v("the"),t("code"),e._v("value"),t("code"),e._v("provided"),t("code"),e._v("(after"),t("code"),e._v("applying"),t("code"),e._v("all"),t("code"),e._v("other"),t("code"),e._v("transformations).")]),e._v(" "),t("li",[t("code",[e._v("preprocessing_function")]),e._v(":"),t("code"),e._v("function"),t("code"),e._v("that"),t("code"),e._v("will"),t("code"),e._v("be"),t("code"),e._v("implied"),t("code"),e._v("on"),t("code"),e._v("each"),t("code"),e._v("input."),t("code"),e._v("The"),t("code"),e._v("function"),t("code"),e._v("will"),t("code"),e._v("run"),t("code"),e._v("after"),t("code"),e._v("the"),t("code"),e._v("image"),t("code"),e._v("is"),t("code"),e._v("resized"),t("code"),e._v("and"),t("code"),e._v("augmented."),t("code"),e._v("The"),t("code"),e._v("function"),t("code"),e._v("should"),t("code"),e._v("take"),t("code"),e._v("one"),t("code"),e._v("argument:"),t("code"),e._v("one"),t("code"),e._v("image"),t("code"),e._v("(Numpy"),t("code"),e._v("tensor"),t("code"),e._v("with"),t("code"),e._v("rank"),t("code"),e._v("3)"),t("code",[e._v(",``")]),e._v("and"),t("code"),e._v("should"),t("code"),e._v("output"),t("code"),e._v("a"),t("code"),e._v("Numpy"),t("code"),e._v("tensor"),t("code"),e._v("with"),t("code"),e._v("the"),t("code"),e._v("same"),t("code"),e._v("shape.")]),e._v(" "),t("li",[t("code",[e._v("data_format")]),e._v(":"),t("code"),e._v("Image"),t("code"),e._v("data"),t("code"),e._v("format"),t("code",[e._v(",``")]),e._v("either"),t("code"),e._v('"channels_first"'),t("code"),e._v("or"),t("code"),e._v('"channels_last".'),t("code"),e._v('"channels_last"'),t("code"),e._v("mode"),t("code"),e._v("means"),t("code"),e._v("that"),t("code"),e._v("the"),t("code"),e._v("images"),t("code"),e._v("should"),t("code"),e._v("have"),t("code"),e._v("shape"),t("code"),e._v("("),t("code",[e._v("samples, height, width, channels")]),e._v(")"),t("code",[e._v(",``")]),e._v('"channels_first"'),t("code"),e._v("mode"),t("code"),e._v("means"),t("code"),e._v("that"),t("code"),e._v("the"),t("code"),e._v("images"),t("code"),e._v("should"),t("code"),e._v("have"),t("code"),e._v("shape"),t("code"),e._v("("),t("code",[e._v("samples, channels, height, width")]),e._v(")."),t("code"),e._v("It"),t("code"),e._v("defaults"),t("code"),e._v("to"),t("code"),e._v("the"),t("code",[e._v("``image_data_format``")]),e._v("value"),t("code"),e._v("found"),t("code"),e._v("in"),t("code"),e._v("your"),t("code"),e._v("Keras"),t("code"),e._v("config"),t("code"),e._v("file"),t("code"),e._v("at"),t("code",[e._v("``~/.keras/keras.json")]),e._v("."),t("code"),e._v("If"),t("code"),e._v("you"),t("code"),e._v("never"),t("code"),e._v("set"),t("code"),e._v("it"),t("code",[e._v(",``")]),e._v("then"),t("code"),e._v("it"),t("code"),e._v("will"),t("code"),e._v("be"),t("code"),e._v('"channels_last".')]),e._v(" "),t("li",[t("code",[e._v("validation_split")]),e._v(":"),t("code"),e._v("Float."),t("code"),e._v("Fraction"),t("code"),e._v("of"),t("code"),e._v("images"),t("code"),e._v("reserved"),t("code"),e._v("for"),t("code"),e._v("validation"),t("code"),e._v("(strictly"),t("code"),e._v("between"),t("code",[e._v("``0``")]),e._v("and"),t("code",[e._v("``1")]),e._v(").")]),e._v(" "),t("li",[t("code",[e._v("dtype")]),e._v(":"),t("code"),e._v("Dtype"),t("code"),e._v("to"),t("code"),e._v("use"),t("code"),e._v("for"),t("code"),e._v("the"),t("code"),e._v("generated"),t("code"),e._v("arrays.")])]),e._v(" "),t("h4",{attrs:{id:"examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[e._v("#")]),e._v(" Examples:")]),e._v(" "),t("p",[e._v("Example of using .flow(x, y):")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" (x_train, y_train), (x_test, y_test) = cifar10.load_data()\ny_train = np_utils.to_categorical(y_train, num_classes)\ny_test = np_utils.to_categorical(y_test, num_classes)\ndatagen = ImageDataGenerator(\n    featurewise_center=True,\n    featurewise_std_normalization=True,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True)\n# compute quantities required for featurewise normalization\n# (std, mean, and principal components if ZCA whitening is applied)\ndatagen.fit(x_train)\n# fits the model on batches with real-time data augmentation:\nmodel.fit_generator(datagen.flow(x_train, y_train, batch_size=32),\n                    steps_per_epoch=len(x_train) / 32, epochs=epochs)\n# here's a more \"manual\" example\nfor e in range(epochs):\n    print('Epoch', e)\n    batches = 0\n    for x_batch, y_batch in datagen.flow(x_train, y_train, batch_size=32):\n        model.fit(x_batch, y_batch)\n        batches += 1\n        if batches >= len(x_train) / 32:\n            # we need to break the loop by hand because\n            # the generator loops indefinitely\n            break\n")])])]),t("p",[e._v("Example of using .flow_from_directory(directory):")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" train_datagen = ImageDataGenerator(\n        rescale=1./255,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1./255)\ntrain_generator = train_datagen.flow_from_directory(\n        'data/train',\n        target_size=(150, 150),\n        batch_size=32,\n        class_mode='binary')\nvalidation_generator = test_datagen.flow_from_directory(\n        'data/validation',\n        target_size=(150, 150),\n        batch_size=32,\n        class_mode='binary')\nmodel.fit_generator(\n        train_generator,\n        steps_per_epoch=2000,\n        epochs=50,\n        validation_data=validation_generator,\n        validation_steps=800)\n")])])]),t("p",[e._v("Example of transforming images and masks together.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" # we create two instances with the same arguments\ndata_gen_args = dict(featurewise_center=True,\n                     featurewise_std_normalization=True,\n                     rotation_range=90,\n                     width_shift_range=0.1,\n                     height_shift_range=0.1,\n                     zoom_range=0.2)\nimage_datagen = ImageDataGenerator(**data_gen_args)\nmask_datagen = ImageDataGenerator(**data_gen_args)\n# Provide the same seed and keyword arguments to the fit and flow methods\nseed = 1\nimage_datagen.fit(images, augment=True, seed=seed)\nmask_datagen.fit(masks, augment=True, seed=seed)\nimage_generator = image_datagen.flow_from_directory(\n    'data/images',\n    class_mode=None,\n    seed=seed)\nmask_generator = mask_datagen.flow_from_directory(\n    'data/masks',\n    class_mode=None,\n    seed=seed)\n# combine generators into one which yields image and masks\ntrain_generator = zip(image_generator, mask_generator)\nmodel.fit_generator(\n    train_generator,\n    steps_per_epoch=2000,\n    epochs=50)\n")])])]),t("h2",{attrs:{id:"init"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#init","aria-hidden":"true"}},[e._v("#")]),e._v(" "),t("strong",[e._v("init")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/keras/preprocessing/image.py#L466-L519",target:"_blank",rel:"noopener noreferrer"}},[e._v("View source"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" __init__(\n    featurewise_center=False,\n    samplewise_center=False,\n    featurewise_std_normalization=False,\n    samplewise_std_normalization=False,\n    zca_whitening=False,\n    zca_epsilon=1e-06,\n    rotation_range=0,\n    width_shift_range=0.0,\n    height_shift_range=0.0,\n    brightness_range=None,\n    shear_range=0.0,\n    zoom_range=0.0,\n    channel_shift_range=0.0,\n    fill_mode='nearest',\n    cval=0.0,\n    horizontal_flip=False,\n    vertical_flip=False,\n    rescale=None,\n    preprocessing_function=None,\n    data_format=None,\n    validation_split=0.0,\n    dtype=None\n)\n")])])]),t("p",[e._v("Initialize self. See help(type(self)) for accurate signature.")]),e._v(" "),t("h2",{attrs:{id:"methods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),t("h3",{attrs:{id:"apply-transform"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#apply-transform","aria-hidden":"true"}},[e._v("#")]),e._v(" apply_transform")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" apply_transform(\n    x,\n    transform_parameters\n)\n")])])]),t("p",[e._v("Applies a transformation to an image according to given parameters.")]),e._v(" "),t("h1",{attrs:{id:"arguments-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" x: 3D tensor, single image.\ntransform_parameters: Dictionary with string - parameter pairs\n    describing the transformation.\n    Currently, the following parameters\n    from the dictionary are used:\n    - `'theta'`: Float. Rotation angle in degrees.\n    - `'tx'`: Float. Shift in the x direction.\n    - `'ty'`: Float. Shift in the y direction.\n    - `'shear'`: Float. Shear angle in degrees.\n    - `'zx'`: Float. Zoom in the x direction.\n    - `'zy'`: Float. Zoom in the y direction.\n    - `'flip_horizontal'`: Boolean. Horizontal flip.\n    - `'flip_vertical'`: Boolean. Vertical flip.\n    - `'channel_shift_intencity'`: Float. Channel shift intensity.\n    - `'brightness'`: Float. Brightness shift intensity.\n")])])]),t("h1",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" A transformed version of the input (same shape).\n")])])]),t("h3",{attrs:{id:"fit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fit","aria-hidden":"true"}},[e._v("#")]),e._v(" fit")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" fit(\n    x,\n    augment=False,\n    rounds=1,\n    seed=None\n)\n")])])]),t("p",[e._v("Fits the data generator to some sample data.")]),e._v(" "),t("p",[e._v("This computes the internal data stats related to the data-dependent transformations, based on an array of sample data.")]),e._v(" "),t("p",[e._v("Only required if featurewise_center or featurewise_std_normalization or zca_whitening are set to True.")]),e._v(" "),t("h1",{attrs:{id:"arguments-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" x: Sample data. Should have rank 4.\n In case of grayscale data,\n the channels axis should have value 1, in case\n of RGB data, it should have value 3, and in case\n of RGBA data, it should have value 4.\naugment: Boolean (default: False).\n    Whether to fit on randomly augmented samples.\nrounds: Int (default: 1).\n    If using data augmentation (`augment=True`),\n    this is how many augmentation passes over the data to use.\nseed: Int (default: None). Random seed.\n")])])]),t("h3",{attrs:{id:"flow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flow","aria-hidden":"true"}},[e._v("#")]),e._v(" flow")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" flow(\n    x,\n    y=None,\n    batch_size=32,\n    shuffle=True,\n    sample_weight=None,\n    seed=None,\n    save_to_dir=None,\n    save_prefix='',\n    save_format='png',\n    subset=None\n)\n")])])]),t("p",[e._v("Takes data & label arrays, generates batches of augmented data.")]),e._v(" "),t("h1",{attrs:{id:"arguments-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' x: Input data. Numpy array of rank 4 or a tuple.\n    If tuple, the first element\n    should contain the images and the second element\n    another numpy array or a list of numpy arrays\n    that gets passed to the output\n    without any modifications.\n    Can be used to feed the model miscellaneous data\n    along with the images.\n    In case of grayscale data, the channels axis of the image array\n    should have value 1, in case\n    of RGB data, it should have value 3, and in case\n    of RGBA data, it should have value 4.\ny: Labels.\nbatch_size: Int (default: 32).\nshuffle: Boolean (default: True).\nsample_weight: Sample weights.\nseed: Int (default: None).\nsave_to_dir: None or str (default: None).\n    This allows you to optionally specify a directory\n    to which to save the augmented pictures being generated\n    (useful for visualizing what you are doing).\nsave_prefix: Str (default: `\'\'`).\n    Prefix to use for filenames of saved pictures\n    (only relevant if `save_to_dir` is set).\nsave_format: one of "png", "jpeg"\n    (only relevant if `save_to_dir` is set). Default: "png".\nsubset: Subset of data (`"training"` or `"validation"`) if\n    `validation_split` is set in `ImageDataGenerator`.\n')])])]),t("h1",{attrs:{id:"returns-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" An `Iterator` yielding tuples of `(x, y)`\n    where `x` is a numpy array of image data\n    (in the case of a single image input) or a list\n    of numpy arrays (in the case with\n    additional inputs) and `y` is a numpy array\n    of corresponding labels. If 'sample_weight' is not None,\n    the yielded tuples are of the form `(x, y, sample_weight)`.\n    If `y` is None, only the numpy array `x` is returned.\n")])])]),t("h3",{attrs:{id:"flow-from-dataframe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flow-from-dataframe","aria-hidden":"true"}},[e._v("#")]),e._v(" flow_from_dataframe")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" flow_from_dataframe(\n    dataframe,\n    directory=None,\n    x_col='filename',\n    y_col='class',\n    weight_col=None,\n    target_size=(256, 256),\n    color_mode='rgb',\n    classes=None,\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=None,\n    save_to_dir=None,\n    save_prefix='',\n    save_format='png',\n    subset=None,\n    interpolation='nearest',\n    validate_filenames=True,\n    **kwargs\n)\n")])])]),t("p",[e._v("Takes the dataframe and the path to a directory and generates batches of augmented/normalized data.\n"),t("a",{attrs:{href:"http://bit.ly/keras_flow_from_dataframe",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v("**A simple tutorial can be found **.")]),e._v(" "),t("h1",{attrs:{id:"arguments-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' dataframe: Pandas dataframe containing the filepaths relative to\n    `directory` (or absolute paths if `directory` is None) of the\n    images in a string column. It should include other column/s\n    depending on the `class_mode`:\n    - if `class_mode` is `"categorical"` (default value) it must\n        include the `y_col` column with the class/es of each image.\n        Values in column can be string/list/tuple if a single class\n        or list/tuple if multiple classes.\n    - if `class_mode` is `"binary"` or `"sparse"` it must include\n        the given `y_col` column with class values as strings.\n    - if `class_mode` is `"raw"` or `"multi_output"` it should contain\n    the columns specified in `y_col`.\n    - if `class_mode` is `"input"` or `None` no extra column is needed.\ndirectory: string, path to the directory to read images from. If `None`,\n    data in `x_col` column should be absolute paths.\nx_col: string, column in `dataframe` that contains the filenames (or\n    absolute paths if `directory` is `None`).\ny_col: string or list, column/s in `dataframe` that has the target data.\nweight_col: string, column in `dataframe` that contains the sample\n    weights. Default: `None`.\ntarget_size: tuple of integers `(height, width)`, default: `(256, 256)`.\n    The dimensions to which all images found will be resized.\ncolor_mode: one of "grayscale", "rgb", "rgba". Default: "rgb".\n    Whether the images will be converted to have 1 or 3 color channels.\nclasses: optional list of classes (e.g. `[\'dogs\', \'cats\']`).\n    Default: None. If not provided, the list of classes will be\n    automatically inferred from the `y_col`,\n    which will map to the label indices, will be alphanumeric).\n    The dictionary containing the mapping from class names to class\n    indices can be obtained via the attribute `class_indices`.\nclass_mode: one of "binary", "categorical", "input", "multi_output",\n    "raw", sparse" or None. Default: "categorical".\n    Mode for yielding the targets:\n    - `"binary"`: 1D numpy array of binary labels,\n    - `"categorical"`: 2D numpy array of one-hot encoded labels.\n        Supports multi-label output.\n    - `"input"`: images identical to input images (mainly used to\n        work with autoencoders),\n    - `"multi_output"`: list with the values of the different columns,\n    - `"raw"`: numpy array of values in `y_col` column(s),\n    - `"sparse"`: 1D numpy array of integer labels,\n    - `None`, no targets are returned (the generator will only yield\n        batches of image data, which is useful to use in\n        `model.predict_generator()`).\nbatch_size: size of the batches of data (default: 32).\nshuffle: whether to shuffle the data (default: True)\nseed: optional random seed for shuffling and transformations.\nsave_to_dir: None or str (default: None).\n    This allows you to optionally specify a directory\n    to which to save the augmented pictures being generated\n    (useful for visualizing what you are doing).\nsave_prefix: str. Prefix to use for filenames of saved pictures\n    (only relevant if `save_to_dir` is set).\nsave_format: one of "png", "jpeg"\n    (only relevant if `save_to_dir` is set). Default: "png".\nfollow_links: whether to follow symlinks inside class subdirectories\n    (default: False).\nsubset: Subset of data (`"training"` or `"validation"`) if\n    `validation_split` is set in `ImageDataGenerator`.\ninterpolation: Interpolation method used to resample the image if the\n    target size is different from that of the loaded image.\n    Supported methods are `"nearest"`, `"bilinear"`, and `"bicubic"`.\n    If PIL version 1.1.3 or newer is installed, `"lanczos"` is also\n    supported. If PIL version 3.4.0 or newer is installed, `"box"` and\n    `"hamming"` are also supported. By default, `"nearest"` is used.\nvalidate_filenames: Boolean, whether to validate image filenames in\n    `x_col`. If `True`, invalid images will be ignored. Disabling this\n    option can lead to speed-up in the execution of this function.\n    Default: `True`.\n')])])]),t("h1",{attrs:{id:"returns-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" A `DataFrameIterator` yielding tuples of `(x, y)`\nwhere `x` is a numpy array containing a batch\nof images with shape `(batch_size, *target_size, channels)`\nand `y` is a numpy array of corresponding labels.\n")])])]),t("h3",{attrs:{id:"flow-from-directory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flow-from-directory","aria-hidden":"true"}},[e._v("#")]),e._v(" flow_from_directory")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" flow_from_directory(\n    directory,\n    target_size=(256, 256),\n    color_mode='rgb',\n    classes=None,\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=None,\n    save_to_dir=None,\n    save_prefix='',\n    save_format='png',\n    follow_links=False,\n    subset=None,\n    interpolation='nearest'\n)\n")])])]),t("p",[e._v("Takes the path to a directory & generates batches of augmented data.")]),e._v(" "),t("h1",{attrs:{id:"arguments-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' directory: string, path to the target directory.\n    It should contain one subdirectory per class.\n    Any PNG, JPG, BMP, PPM or TIF images\n    inside each of the subdirectories directory tree\n    will be included in the generator.\n    See [this script](\n    https://gist.github.com/fchollet/0830affa1f7f19fd47b06d4cf89ed44d)\n    for more details.\ntarget_size: Tuple of integers `(height, width)`,\n    default: `(256, 256)`.\n    The dimensions to which all images found will be resized.\ncolor_mode: One of "grayscale", "rgb", "rgba". Default: "rgb".\n    Whether the images will be converted to\n    have 1, 3, or 4 channels.\nclasses: Optional list of class subdirectories\n    (e.g. `[\'dogs\', \'cats\']`). Default: None.\n    If not provided, the list of classes will be automatically\n    inferred from the subdirectory names/structure\n    under `directory`, where each subdirectory will\n    be treated as a different class\n    (and the order of the classes, which will map to the label\n    indices, will be alphanumeric).\n    The dictionary containing the mapping from class names to class\n    indices can be obtained via the attribute `class_indices`.\nclass_mode: One of "categorical", "binary", "sparse",\n    "input", or None. Default: "categorical".\n    Determines the type of label arrays that are returned:\n    - "categorical" will be 2D one-hot encoded labels,\n    - "binary" will be 1D binary labels,\n        "sparse" will be 1D integer labels,\n    - "input" will be images identical\n        to input images (mainly used to work with autoencoders).\n    - If None, no labels are returned\n      (the generator will only yield batches of image data,\n      which is useful to use with `model.predict_generator()`).\n      Please note that in case of class_mode None,\n      the data still needs to reside in a subdirectory\n      of `directory` for it to work correctly.\nbatch_size: Size of the batches of data (default: 32).\nshuffle: Whether to shuffle the data (default: True)\n    If set to False, sorts the data in alphanumeric order.\nseed: Optional random seed for shuffling and transformations.\nsave_to_dir: None or str (default: None).\n    This allows you to optionally specify\n    a directory to which to save\n    the augmented pictures being generated\n    (useful for visualizing what you are doing).\nsave_prefix: Str. Prefix to use for filenames of saved pictures\n    (only relevant if `save_to_dir` is set).\nsave_format: One of "png", "jpeg"\n    (only relevant if `save_to_dir` is set). Default: "png".\nfollow_links: Whether to follow symlinks inside\n    class subdirectories (default: False).\nsubset: Subset of data (`"training"` or `"validation"`) if\n    `validation_split` is set in `ImageDataGenerator`.\ninterpolation: Interpolation method used to\n    resample the image if the\n    target size is different from that of the loaded image.\n    Supported methods are `"nearest"`, `"bilinear"`,\n    and `"bicubic"`.\n    If PIL version 1.1.3 or newer is installed, `"lanczos"` is also\n    supported. If PIL version 3.4.0 or newer is installed,\n    `"box"` and `"hamming"` are also supported.\n    By default, `"nearest"` is used.\n')])])]),t("h1",{attrs:{id:"returns-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-4","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" A `DirectoryIterator` yielding tuples of `(x, y)`\n    where `x` is a numpy array containing a batch\n    of images with shape `(batch_size, *target_size, channels)`\n    and `y` is a numpy array of corresponding labels.\n")])])]),t("h3",{attrs:{id:"get-random-transform"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-random-transform","aria-hidden":"true"}},[e._v("#")]),e._v(" get_random_transform")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" get_random_transform(\n    img_shape,\n    seed=None\n)\n")])])]),t("p",[e._v("Generates random parameters for a transformation.")]),e._v(" "),t("h1",{attrs:{id:"arguments-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" seed: Random seed.\nimg_shape: Tuple of integers.\n    Shape of the image that is transformed.\n")])])]),t("h1",{attrs:{id:"returns-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-5","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" A dictionary containing randomly chosen parameters describing the\ntransformation.\n")])])]),t("h3",{attrs:{id:"random-transform"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random-transform","aria-hidden":"true"}},[e._v("#")]),e._v(" random_transform")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" random_transform(\n    x,\n    seed=None\n)\n")])])]),t("p",[e._v("Applies a random transformation to an image.")]),e._v(" "),t("h1",{attrs:{id:"arguments-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments-8","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" x: 3D tensor, single image.\nseed: Random seed.\n")])])]),t("h1",{attrs:{id:"returns-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-6","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" A randomly transformed version of the input (same shape).\n")])])]),t("h3",{attrs:{id:"standardize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#standardize","aria-hidden":"true"}},[e._v("#")]),e._v(" standardize")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" standardize(x)\n")])])]),t("p",[e._v("Applies the normalization configuration in-place to a batch of inputs.")]),e._v(" "),t("p",[e._v("x is changed in-place since the function is mainly used internally to standarize images and feed them to your network. If a copy of x would be created instead it would have a significant performance cost. If you want to apply this method without changing the input in-place you can call the method creating a copy before:")]),e._v(" "),t("p",[e._v("standarize(np.copy(x))")]),e._v(" "),t("h1",{attrs:{id:"arguments-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments-9","aria-hidden":"true"}},[e._v("#")]),e._v(" Arguments")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" x: Batch of inputs to be normalized.\n")])])]),t("h1",{attrs:{id:"returns-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns-7","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" The inputs, normalized.\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);