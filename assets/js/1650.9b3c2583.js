(window.webpackJsonp=window.webpackJsonp||[]).push([[1650],{1841:function(a,e,t){"use strict";t.r(e);var r=t(0),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("Instantiates an all-zeros variable and returns it.")]),a._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[a._v("#")]),a._v(" Aliases:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("tf.compat.v1.keras.backend.zeros")])]),a._v(" "),t("li",[t("code",[a._v("tf.compat.v2.keras.backend.zeros")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" tf.keras.backend.zeros(\n    shape,\n    dtype=None,\n    name=None\n)\n")])])]),t("h4",{attrs:{id:"arguments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments","aria-hidden":"true"}},[a._v("#")]),a._v(" Arguments:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("shape")]),a._v(": Tuple or list of integers, "),t("code",[a._v("shape")]),a._v(" of returned Keras variable")]),a._v(" "),t("li",[t("code",[a._v("dtype")]),a._v(": data type of returned Keras variable")]),a._v(" "),t("li",[t("code",[a._v("name")]),a._v(": "),t("code",[a._v("name")]),a._v(" of returned Keras variable")])]),a._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[a._v("#")]),a._v(" Returns:")]),a._v(" "),t("p",[a._v("A variable (including Keras metadata), filled with 0.0. Note that if shape was symbolic, we cannot return a variable, and will return a dynamically-shaped tensor instead.")]),a._v(" "),t("h4",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[a._v("#")]),a._v(" Example:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" from tensorflow.keras import backend as K\nkvar = K.zeros((3,4))\nK.eval(kvar)\n# array([[ 0.,  0.,  0.,  0.], [ 0.,  0.,  0.,  0.],\n#       [ 0.,  0.,  0.,  0.]], dtype=float32)\nA = tf.constant([1,2,3])\nkvar2 = K.zeros(A.shape) # [0., 0., 0.] float32 by default\nkvar3 = K.zeros(A.shape,dtype=tf.int32) # [0, 0, 0] with int32 dtype\nkvar4 = K.zeros([2,3]) # [[0., 0., 0.], [0., 0., 0.]]\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);