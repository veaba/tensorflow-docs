(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{453:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"class-tpuestimatorspec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-tpuestimatorspec","aria-hidden":"true"}},[t._v("#")]),t._v(" Class TPUEstimatorSpec")]),t._v(" "),a("p",[t._v("Ops and objects returned from a model_fn and passed to TPUEstimator.")]),t._v(" "),a("p",[t._v("See EstimatorSpec for mode, predictions, loss, train_op, and export_outputs.\n"),a("a",{attrs:{href:"https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator",target:"_blank",rel:"noopener noreferrer"}},[t._v("tf.estimator.Estimator"),a("OutboundLink")],1),t._v("For evaluation, eval_metricsis a tuple of metric_fn and tensors, where metric_fn runs on CPU to generate metrics and tensors represents the Tensors transferred from TPU system to CPU host and passed to metric_fn. To be precise, TPU evaluation expects a slightly different signature from the . While EstimatorSpec.eval_metric_ops expects a dict, TPUEstimatorSpec.eval_metrics is a tuple of metric_fn and tensors. The tensors could be a list of Tensors or dict of names to Tensors. The tensors usually specify the model logits, which are transferred back from TPU system to CPU host. All tensors must have be batch-major, i.e., the batch size is the first dimension. Once all tensors are available at CPU host from all shards, they are concatenated (on CPU) and passed as positional arguments to the metric_fn if tensors is list or keyword arguments if tensors is a dict. metric_fn takes the tensors and returns a dict from metric string name to the result of calling a metric function, namely a (metric_tensor, update_op) tuple. See TPUEstimator for MNIST example how to specify the eval_metrics.")]),t._v(" "),a("p",[t._v("scaffold_fn is a function running on CPU to generate the Scaffold. This function should not capture any Tensors in model_fn.")]),t._v(" "),a("p",[t._v("host_call is a tuple of a function and a list or dictionary of tensors to pass to that function and returns a list of Tensors. host_call currently works for train() and evaluate(). The Tensors returned by the function is executed on the CPU on every step, so there is communication overhead when sending tensors from TPU to CPU. To reduce the overhead, try reducing the size of the tensors. The tensors are concatenated along their major (batch) dimension, and so must be >= rank 1. The host_call is useful for writing summaries with tf.contrib.summary.create_file_writer.")]),t._v(" "),a("h2",{attrs:{id:"new"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("strong",[t._v("new")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/tpu/tpu_estimator.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("View source"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" @staticmethod\n__new__(\n    cls,\n    mode,\n    predictions=None,\n    loss=None,\n    train_op=None,\n    eval_metrics=None,\n    export_outputs=None,\n    scaffold_fn=None,\n    host_call=None,\n    training_hooks=None,\n    evaluation_hooks=None,\n    prediction_hooks=None\n)\n")])])]),a("p",[t._v("Creates a validated TPUEstimatorSpec instance.")]),t._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties","aria-hidden":"true"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),a("h3",{attrs:{id:"mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mode","aria-hidden":"true"}},[t._v("#")]),t._v(" mode")]),t._v(" "),a("h3",{attrs:{id:"predictions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#predictions","aria-hidden":"true"}},[t._v("#")]),t._v(" predictions")]),t._v(" "),a("h3",{attrs:{id:"loss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loss","aria-hidden":"true"}},[t._v("#")]),t._v(" loss")]),t._v(" "),a("h3",{attrs:{id:"train-op"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#train-op","aria-hidden":"true"}},[t._v("#")]),t._v(" train_op")]),t._v(" "),a("h3",{attrs:{id:"eval-metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eval-metrics","aria-hidden":"true"}},[t._v("#")]),t._v(" eval_metrics")]),t._v(" "),a("h3",{attrs:{id:"export-outputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-outputs","aria-hidden":"true"}},[t._v("#")]),t._v(" export_outputs")]),t._v(" "),a("h3",{attrs:{id:"scaffold-fn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scaffold-fn","aria-hidden":"true"}},[t._v("#")]),t._v(" scaffold_fn")]),t._v(" "),a("h3",{attrs:{id:"host-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#host-call","aria-hidden":"true"}},[t._v("#")]),t._v(" host_call")]),t._v(" "),a("h3",{attrs:{id:"training-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#training-hooks","aria-hidden":"true"}},[t._v("#")]),t._v(" training_hooks")]),t._v(" "),a("h3",{attrs:{id:"evaluation-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#evaluation-hooks","aria-hidden":"true"}},[t._v("#")]),t._v(" evaluation_hooks")]),t._v(" "),a("h3",{attrs:{id:"prediction-hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prediction-hooks","aria-hidden":"true"}},[t._v("#")]),t._v(" prediction_hooks")]),t._v(" "),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),a("h3",{attrs:{id:"as-estimator-spec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#as-estimator-spec","aria-hidden":"true"}},[t._v("#")]),t._v(" as_estimator_spec")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/tensorflow/estimator/tree/master/tensorflow_estimator/python/estimator/tpu/tpu_estimator.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("View source"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" as_estimator_spec()\n")])])]),a("p",[t._v("Creates an equivalent EstimatorSpec used by CPU train/eval.")])])}),[],!1,null,null,null);e.default=r.exports}}]);