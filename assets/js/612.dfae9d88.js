(window.webpackJsonp=window.webpackJsonp||[]).push([[612],{800:function(t,e,a){"use strict";a.r(e);var i=a(0),r=Object(i.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Partitioner to allocate minimum size per slice.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" tf.compat.v1.min_max_variable_partitioner(\n    max_partitions=1,\n    axis=0,\n    min_slice_size=(256 << 10),\n    bytes_per_string_element=16\n)\n")])])]),a("p",[t._v("Returns a partitioner that partitions the variable of given shape and dtype such that each partition has a minimum of min_slice_size slice of the variable. The maximum number of such partitions (upper bound) is given by max_partitions.")]),t._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[t._v("#")]),t._v(" Args:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("max_partitions")]),t._v(": Upper bound on the number of partitions. Defaults to 1.")]),t._v(" "),a("li",[a("code",[t._v("axis")]),t._v(": Axis along which to partition the variable. Defaults to 0.")]),t._v(" "),a("li",[a("code",[t._v("min_slice_size")]),t._v(": Minimum size of the variable slice per partition. Defaults to 256K.")]),t._v(" "),a("li",[a("code",[t._v("bytes_per_string_element")]),t._v(": If the "),a("code",[t._v("Variable")]),t._v(" is of type string, this provides an estimate of how large each scalar in the "),a("code",[t._v("Variable")]),t._v(" is.")])]),t._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[t._v("#")]),t._v(" Returns:")]),t._v(" "),a("p",[t._v("A partition function usable as the partitioner argument to variable_scope and get_variable.")])])}),[],!1,null,null,null);e.default=r.exports}}]);