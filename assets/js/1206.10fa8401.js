(window.webpackJsonp=window.webpackJsonp||[]).push([[1206],{1395:function(e,a,t){"use strict";t.r(a);var r=t(0),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Converts two real numbers to a complex number.")]),e._v(" "),t("h3",{attrs:{id:"aliases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("tf.compat.v1.complex")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v1.dtypes.complex")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.complex")])]),e._v(" "),t("li",[t("code",[e._v("tf.compat.v2.dtypes.complex")])]),e._v(" "),t("li",[t("code",[e._v("tf.complex")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" tf.dtypes.complex(\n    real,\n    imag,\n    name=None\n)\n")])])]),t("p",[e._v("Given a tensor real representing the real part of a complex number, and a tensor imag representing the imaginary part of a complex number, this operation returns complex numbers elementwise of the form , where a represents the real part and b represents the imag part.")]),e._v(" "),t("p",[e._v("The input tensors real and imag must have the same shape.")]),e._v(" "),t("h4",{attrs:{id:"for-example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" real = tf.constant([2.25, 3.25])\nimag = tf.constant([4.75, 5.75])\ntf.complex(real, imag)  # [[2.25 + 4.75j], [3.25 + 5.75j]]\n")])])]),t("h4",{attrs:{id:"args"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("real")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(". Must be one of the following types: "),t("code",[e._v("float32")]),e._v(", "),t("code",[e._v("float64")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("imag")]),e._v(": A "),t("code",[e._v("Tensor")]),e._v(". Must have the same type as "),t("code",[e._v("real")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": A "),t("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),t("h4",{attrs:{id:"returns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),t("p",[e._v("A Tensor of type complex64 or complex128.")]),e._v(" "),t("h4",{attrs:{id:"raises"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("TypeError")]),e._v(": Real and imag must be correct types")])])])}),[],!1,null,null,null);a.default=s.exports}}]);