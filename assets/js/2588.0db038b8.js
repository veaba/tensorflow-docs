(window.webpackJsonp=window.webpackJsonp||[]).push([[2588],{2779:function(e,t,i){"use strict";i.r(t);var s=i(0),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("p",[e._v("Extracts a slice from a tensor.")]),e._v(" "),i("h3",{attrs:{id:"aliases"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("tf.compat.v1.slice")])]),e._v(" "),i("li",[i("code",[e._v("tf.compat.v2.slice")])])]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v(" tf.slice(\n    input_,\n    begin,\n    size,\n    name=None\n)\n")])])]),i("p",[e._v("This operation extracts a slice of "),i("code",[e._v("size")]),e._v(" "),i("code",[e._v("size")]),e._v(" from a tensor "),i("code",[e._v("input_")]),e._v(" starting at the location specified by "),i("code",[e._v("begin")]),e._v(". The slice "),i("code",[e._v("size")]),e._v(" is represented as a tensor shape, where "),i("code",[e._v("size")]),e._v("[i] is the number of elements of the 'i'th dimension of "),i("code",[e._v("input_")]),e._v(" that you want to slice. The starting location ("),i("code",[e._v("begin")]),e._v(") for the slice is represented as an offset in each dimension of "),i("code",[e._v("input_")]),e._v(". In other words, "),i("code",[e._v("begin")]),e._v("[i] is the offset into the i'th dimension of "),i("code",[e._v("input_")]),e._v(" that you want to slice from.\n"),i("a",{attrs:{href:"https://tensorflow.google.cn/api_docs/python/tf/Tensor#__getitem__",target:"_blank",rel:"noopener noreferrer"}},[e._v("tf.Tensor.getitem"),i("OutboundLink")],1),e._v("Note that  is typically a more pythonic way to perform slices, as it allows you to write foo[3:7, :-2] instead of tf.slice(foo, [3, 0], [4, foo.get_shape()[1]-2]).")]),e._v(" "),i("p",[i("code",[e._v("begin")]),e._v(" is zero-based; "),i("code",[e._v("size")]),e._v(" is one-based. If "),i("code",[e._v("size")]),e._v("[i] is -1, all remaining elements in dimension i are included in the slice. In other words, this is equivalent to setting:\nsize[i] = input_.dim_size(i) - begin[i]\nThis operation requires that:\n"),i("code",[e._v("0 <= begin[i] <= begin[i] + size[i] <= Di for i in [0, n]")])]),e._v(" "),i("h4",{attrs:{id:"for-example"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#for-example","aria-hidden":"true"}},[e._v("#")]),e._v(" For example:")]),e._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v(" t = tf.constant([[[1, 1, 1], [2, 2, 2]],\n                 [[3, 3, 3], [4, 4, 4]],\n                 [[5, 5, 5], [6, 6, 6]]])\ntf.slice(t, [1, 0, 0], [1, 1, 3])  # [[[3, 3, 3]]]\ntf.slice(t, [1, 0, 0], [1, 2, 3])  # [[[3, 3, 3],\n                                   #   [4, 4, 4]]]\ntf.slice(t, [1, 0, 0], [2, 1, 3])  # [[[3, 3, 3]],\n                                   #  [[5, 5, 5]]]\n")])])]),i("h4",{attrs:{id:"args"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),i("ul",[i("li",[i("code",[e._v("input_")]),e._v(": A "),i("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),i("li",[i("code",[e._v("begin")]),e._v(": An "),i("code",[e._v("int32")]),e._v(" or "),i("code",[e._v("int64")]),e._v(" "),i("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),i("li",[i("code",[e._v("size")]),e._v(": An "),i("code",[e._v("int32")]),e._v(" or "),i("code",[e._v("int64")]),e._v(" "),i("code",[e._v("Tensor")]),e._v(".")]),e._v(" "),i("li",[i("code",[e._v("name")]),e._v(": A "),i("code",[e._v("name")]),e._v(" for the operation (optional).")])]),e._v(" "),i("h4",{attrs:{id:"returns"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),i("p",[e._v("A "),i("code",[e._v("Tensor")]),e._v(" the same type as "),i("code",[e._v("input_")]),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);