(window.webpackJsonp=window.webpackJsonp||[]).push([[2422],{2610:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Computes the theoretical and numeric Jacobian of f.")]),e._v(" "),a("h3",{attrs:{id:"aliases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aliases","aria-hidden":"true"}},[e._v("#")]),e._v(" Aliases:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("tf.compat.v2.test.compute_gradient")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" tf.test.compute_gradient(\n    f,\n    x,\n    delta=0.001\n)\n")])])]),a("p",[e._v("With y = f(x), computes the theoretical and numeric Jacobian dy/dx.")]),e._v(" "),a("h4",{attrs:{id:"args"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#args","aria-hidden":"true"}},[e._v("#")]),e._v(" Args:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("f")]),e._v(": the "),a("code",[e._v("f")]),e._v("unction.")]),e._v(" "),a("li",[a("code",[e._v("x")]),e._v(": a list arguments "),a("code",[e._v("f")]),e._v("or the "),a("code",[e._v("f")]),e._v("unction")]),e._v(" "),a("li",[a("code",[e._v("delta")]),e._v(": (optional) perturbation used to compute numeric Jacobian.")])]),e._v(" "),a("h4",{attrs:{id:"returns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returns","aria-hidden":"true"}},[e._v("#")]),e._v(" Returns:")]),e._v(" "),a("p",[e._v('A pair of lists, where the first is a list of 2-d numpy arrays representing the theoretical Jacobians for each argument, and the second list is the numerical ones. Each 2-d array has "x_size" rows and "y_size" columns where "x_size" is the number of elements in the corresponding argument and "y_size" is the number of elements in f(x).')]),e._v(" "),a("h4",{attrs:{id:"raises"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raises","aria-hidden":"true"}},[e._v("#")]),e._v(" Raises:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("ValueError")]),e._v(": If result is empty but the gradient is nonzero.")]),e._v(" "),a("li",[a("code",[e._v("ValueError")]),e._v(": If x is not list, but any other type.")])]),e._v(" "),a("h4",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[e._v("#")]),e._v(" Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" @tf.function\ndef test_func(x):\n  return x*x\n\ntheoretical, numerical = tf.test.compute_gradient(test_func, [1.0])\ntheoretical, numerical\n# ((array([[2.]], dtype=float32),), (array([[2.000004]], dtype=float32),))\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);